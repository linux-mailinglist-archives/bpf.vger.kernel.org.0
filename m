Return-Path: <bpf+bounces-49654-lists+bpf=lfdr.de@vger.kernel.org>
X-Original-To: lists+bpf@lfdr.de
Delivered-To: lists+bpf@lfdr.de
Received: from sy.mirrors.kernel.org (sy.mirrors.kernel.org [IPv6:2604:1380:40f1:3f00::1])
	by mail.lfdr.de (Postfix) with ESMTPS id 2B842A1B125
	for <lists+bpf@lfdr.de>; Fri, 24 Jan 2025 08:55:54 +0100 (CET)
Received: from smtp.subspace.kernel.org (relay.kernel.org [52.25.139.140])
	(using TLSv1.2 with cipher ECDHE-ECDSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by sy.mirrors.kernel.org (Postfix) with ESMTPS id D58607A4542
	for <lists+bpf@lfdr.de>; Fri, 24 Jan 2025 07:55:43 +0000 (UTC)
Received: from localhost.localdomain (localhost.localdomain [127.0.0.1])
	by smtp.subspace.kernel.org (Postfix) with ESMTP id 1373D1DB139;
	Fri, 24 Jan 2025 07:55:44 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (2048-bit key) header.d=gmail.com header.i=@gmail.com header.b="ZXIklXrg"
X-Original-To: bpf@vger.kernel.org
Received: from mail-ed1-f48.google.com (mail-ed1-f48.google.com [209.85.208.48])
	(using TLSv1.2 with cipher ECDHE-RSA-AES128-GCM-SHA256 (128/128 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id ADDB1156991
	for <bpf@vger.kernel.org>; Fri, 24 Jan 2025 07:55:36 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=209.85.208.48
ARC-Seal:i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1737705343; cv=none; b=JwRp5oejTU8zf6mi4Gg2rBafLll+57BnD9+Fvh8GuLTEJ29UNZYlDRFAM2SAHy/cVBqbNV6/tiF1emtBLA34H2+5OJ3ZftQsnmHW2wLtAkCPzUazuIRNVwNmKuf0trmth5+u+LtNiuMeCkDcDbQKCZKZAzbPD4eNPXI8ey6APXM=
ARC-Message-Signature:i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1737705343; c=relaxed/simple;
	bh=0ALHqDUkPe4CLahqjSbX/OXhc/6R/+DXyFO0mAc12DE=;
	h=MIME-Version:From:Date:Message-ID:Subject:To:Content-Type; b=ubLfpIWBBsd0iqtRu78mlCNG3/C6Rtv6XiT9FZ4j0Jm8RNLL9NcWrLT6Ts0HHFd4YxaCGujseNpHa6RBZK43dhLMVq1q93QFj1MuRSQzkDLncWo7522WSwcXwcF9KFsdWNZExMVPFbBPH19fVBER3Bizs4OUtLBP44HiMbjLY+8=
ARC-Authentication-Results:i=1; smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=gmail.com; spf=pass smtp.mailfrom=gmail.com; dkim=pass (2048-bit key) header.d=gmail.com header.i=@gmail.com header.b=ZXIklXrg; arc=none smtp.client-ip=209.85.208.48
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=gmail.com
Authentication-Results: smtp.subspace.kernel.org; spf=pass smtp.mailfrom=gmail.com
Received: by mail-ed1-f48.google.com with SMTP id 4fb4d7f45d1cf-5d3e6274015so3345988a12.0
        for <bpf@vger.kernel.org>; Thu, 23 Jan 2025 23:55:36 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20230601; t=1737705334; x=1738310134; darn=vger.kernel.org;
        h=to:subject:message-id:date:from:mime-version:from:to:cc:subject
         :date:message-id:reply-to;
        bh=XSf0Er5qQcyNh+FEizR1hd50MMbiysA6XDyQaCeT4RA=;
        b=ZXIklXrgNblf+Eof81CdNcXWoiXtAGTNPtqQdk9Ucf4kMAaoJYn09+SD4VD0xNInVh
         /px1bed2p7Uk4RoXNwPInguUPtxteSl/ynL4wBy/EkqPr9ixQkIB/M/G1Ex/Q+4WNxM/
         W3U9h5Ushe3sJ1aM03ELRFtlVvAwNB00CHTyl2Ja3ipGIfk9Jtv4KTS0U0qnPASigqLy
         LB2xEEDd3jUIZu5qMWsGbtv7FjTQEBbyP1xMsu0+aWxfMW0E5oV55en5wy7NkeHhhjqK
         TG7MDf0W+niiHbJMC1SS8tYx9UFMVMP1ZcK5Sz/cHlXyZWMQGM4lLq2YJpCvi+1YS9iN
         Ufww==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20230601; t=1737705334; x=1738310134;
        h=to:subject:message-id:date:from:mime-version:x-gm-message-state
         :from:to:cc:subject:date:message-id:reply-to;
        bh=XSf0Er5qQcyNh+FEizR1hd50MMbiysA6XDyQaCeT4RA=;
        b=IKDRAIHuHKo5pi+Z8hoUOWdK3nSWybmJ3qwGITN42QCyyNCZcyw7dUFhzdtT8OVm1g
         q07VI04NiGi/cD18wiuM3Fqj2aAJnNA8l36M0CmDvxJGCSFIm7QDIqIUqvygK6QHxAVf
         kWZrzm7cdI1Y7e/EQY6bFfPYKN3JmIPJ2E1OD5qXKCATA8ha5YUuIo7MTQZ3nZq/hZRm
         uVR8SAr0il/rTrwHtj4Qwk+ZDiwLjwfcDH6RSgFJHD6U2ZmuBJqLux8hmc9g7cNwYwhr
         ytU/kp4hhc075oBVj7yF0uRIU67RlWWWs4fdRxHRUUETkiC4gNCAWJ+igl2JzNYoPKVo
         UmeA==
X-Gm-Message-State: AOJu0YwW2ZhrZ5kmRyZde5gLh5nyu/HtsEFeSStN98SYBYiltBkd5z1G
	3ptP/ShyZBTqknIL5AIKCjZpZPFdTOV8LEOsOGSMk6dBlOk5d4jF0kZsE9NOXvU2bBbmR4nuC3r
	9T6d+WO/tCRshntZGVBTJNM7xnehva81LU00=
X-Gm-Gg: ASbGncsJ04Ek5J0cxE/R/O6zdAKT3RJABO3IgmtKtZNFgIE0vJA+exi71aTEOz8prrj
	OuPMeNhQHAIp8SNGGv3qI3ev1GeN1q6mzDiXjItTbc5GLbgH7N1BNwhMcqjR1q2hP/zPUONn2
X-Google-Smtp-Source: AGHT+IFV7tiUYWohLShlUUOGwzkmg0uiXvwzB7LO7onR0uWNPRc8S1x9pkyZURS2Cv1ZvT0Zl9Nj4HOcB9yQ9M23VQ4=
X-Received: by 2002:a05:6402:2790:b0:5d9:b8a:9e08 with SMTP id
 4fb4d7f45d1cf-5db7d3189f5mr25669551a12.16.1737705334096; Thu, 23 Jan 2025
 23:55:34 -0800 (PST)
Precedence: bulk
X-Mailing-List: bpf@vger.kernel.org
List-Id: <bpf.vger.kernel.org>
List-Subscribe: <mailto:bpf+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:bpf+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
From: shivam tiwari <shivam.tiwari00021@gmail.com>
Date: Fri, 24 Jan 2025 13:25:16 +0530
X-Gm-Features: AWEUYZmL6uMEO4xl_USrQ0-YYMkTKkCEhV0VMhwNSTM43K6yu_FZdTJLfdSn6Sc
Message-ID: <CALz0HOrGei1UTAkceBZqPjGkY=6pRhpjt=b63bhhgPjF7_E9Gg@mail.gmail.com>
Subject: Vurnability in libbpf heap buffer attached with solution and Issue link
To: bpf@vger.kernel.org
Content-Type: multipart/mixed; boundary="00000000000029f6ba062c6f0d3c"

--00000000000029f6ba062c6f0d3c
Content-Type: multipart/alternative; boundary="00000000000029f6b8062c6f0d3a"

--00000000000029f6b8062c6f0d3a
Content-Type: text/plain; charset="UTF-8"

Fix Heap Buffer Overflow in btf_ext_parse_info Function

This pull request addresses a *heap-buffer-overflow* vulnerability detected
in the btf_ext_parse_info function located in src/btf.c. The issue arises
at line 3001, where an out-of-bounds memory access occurs, potentially
leading to undefined behavior and memory corruption. This can happen if the
function accesses data that exceeds the allocated buffer size without
sufficient bounds checking.

*Fix:*

   - Added additional checks to ensure the buffer accesses remain within
   bounds.
   - Improved memory validation to prevent overflows and ensure the
   integrity of the data being processed.

This change mitigates the risk of a heap buffer overflow, improving the
safety of the code and ensuring that all memory accesses are within valid
ranges.

For further details, refer to the issue link: OSS-Fuzz Issue 388905046
https://issues.oss-fuzz.com/issues/388905046
attached below updated code file
If you have any specific resolution code or further details to include in
the PR, please let me know.

--00000000000029f6b8062c6f0d3a
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div>Fix Heap Buffer Overflow in btf_ext_parse_info Functi=
on<br></div><div><p>This pull request addresses a <strong>heap-buffer-overf=
low</strong> vulnerability detected in the <code>btf_ext_parse_info</code> =
function located in <code>src/btf.c</code>. The issue arises at line 3001, =
where an out-of-bounds memory access occurs, potentially leading to undefin=
ed behavior and memory corruption. This can happen if the function accesses=
 data that exceeds the allocated buffer size without sufficient bounds chec=
king.</p><p><strong>Fix:</strong></p><ul><li>Added additional checks to ens=
ure the buffer accesses remain within bounds.</li><li>Improved memory valid=
ation to prevent overflows and ensure the integrity of the data being proce=
ssed.</li></ul><p>This change mitigates the risk of a heap buffer overflow,=
 improving the safety of the code and ensuring that all memory accesses are=
 within valid ranges.</p></div><div><br>For further details, refer to the i=
ssue link: OSS-Fuzz Issue 388905046=C2=A0<a href=3D"https://issues.oss-fuzz=
.com/issues/388905046">https://issues.oss-fuzz.com/issues/388905046</a>=C2=
=A0<br>attached below updated code file=C2=A0<br>If you have any specific r=
esolution code or further details to include in the PR, please let me know.=
</div><img width=3D"0" height=3D"0" class=3D"mailtrack-img" alt=3D"" style=
=3D"display:flex" src=3D"https://mailtrack.io/trace/mail/fec5d141f406fa2661=
b73a8ba81a7a1340d1961c.png?u=3D9570642"></div>

--00000000000029f6b8062c6f0d3a--
--00000000000029f6ba062c6f0d3c
Content-Type: text/plain; charset="US-ASCII"; name="btf.c"
Content-Disposition: attachment; filename="btf.c"
Content-Transfer-Encoding: base64
Content-ID: <f_m6agu4qu0>
X-Attachment-Id: f_m6agu4qu0

Ly8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IChMR1BMLTIuMSBPUiBCU0QtMi1DbGF1c2UpCi8q
IENvcHlyaWdodCAoYykgMjAxOCBGYWNlYm9vayAqLwoKI2luY2x1ZGUgPGJ5dGVzd2FwLmg+CiNp
bmNsdWRlIDxlbmRpYW4uaD4KI2luY2x1ZGUgPHN0ZGlvLmg+CiNpbmNsdWRlIDxzdGRsaWIuaD4K
I2luY2x1ZGUgPHN0cmluZy5oPgojaW5jbHVkZSA8ZmNudGwuaD4KI2luY2x1ZGUgPHVuaXN0ZC5o
PgojaW5jbHVkZSA8ZXJybm8uaD4KI2luY2x1ZGUgPHN5cy91dHNuYW1lLmg+CiNpbmNsdWRlIDxz
eXMvcGFyYW0uaD4KI2luY2x1ZGUgPHN5cy9zdGF0Lmg+CiNpbmNsdWRlIDxsaW51eC9rZXJuZWwu
aD4KI2luY2x1ZGUgPGxpbnV4L2Vyci5oPgojaW5jbHVkZSA8bGludXgvYnRmLmg+CiNpbmNsdWRl
IDxnZWxmLmg+CiNpbmNsdWRlICJidGYuaCIKI2luY2x1ZGUgImJwZi5oIgojaW5jbHVkZSAibGli
YnBmLmgiCiNpbmNsdWRlICJsaWJicGZfaW50ZXJuYWwuaCIKI2luY2x1ZGUgImhhc2htYXAuaCIK
I2luY2x1ZGUgInN0cnNldC5oIgojaW5jbHVkZSAic3RyX2Vycm9yLmgiCgojZGVmaW5lIEJURl9N
QVhfTlJfVFlQRVMgMHg3ZmZmZmZmZlUKI2RlZmluZSBCVEZfTUFYX1NUUl9PRkZTRVQgMHg3ZmZm
ZmZmZlUKCnN0YXRpYyBzdHJ1Y3QgYnRmX3R5cGUgYnRmX3ZvaWQ7CgpzdHJ1Y3QgYnRmIHsKCS8q
IHJhdyBCVEYgZGF0YSBpbiBuYXRpdmUgZW5kaWFubmVzcyAqLwoJdm9pZCAqcmF3X2RhdGE7Cgkv
KiByYXcgQlRGIGRhdGEgaW4gbm9uLW5hdGl2ZSBlbmRpYW5uZXNzICovCgl2b2lkICpyYXdfZGF0
YV9zd2FwcGVkOwoJX191MzIgcmF3X3NpemU7CgkvKiB3aGV0aGVyIHRhcmdldCBlbmRpYW5uZXNz
IGRpZmZlcnMgZnJvbSB0aGUgbmF0aXZlIG9uZSAqLwoJYm9vbCBzd2FwcGVkX2VuZGlhbjsKCgkv
KgoJICogV2hlbiBCVEYgaXMgbG9hZGVkIGZyb20gYW4gRUxGIG9yIHJhdyBtZW1vcnkgaXQgaXMg
c3RvcmVkCgkgKiBpbiBhIGNvbnRpZ3VvdXMgbWVtb3J5IGJsb2NrLiBUaGUgaGRyLCB0eXBlX2Rh
dGEsIGFuZCwgc3Ryc19kYXRhCgkgKiBwb2ludCBpbnNpZGUgdGhhdCBtZW1vcnkgcmVnaW9uIHRv
IHRoZWlyIHJlc3BlY3RpdmUgcGFydHMgb2YgQlRGCgkgKiByZXByZXNlbnRhdGlvbjoKCSAqCgkg
KiArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rCgkgKiB8ICBIZWFkZXIgIHwgIFR5
cGVzICB8ICBTdHJpbmdzICB8CgkgKiArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0r
CgkgKiBeICAgICAgICAgIF4gICAgICAgICBeCgkgKiB8ICAgICAgICAgIHwgICAgICAgICB8Cgkg
KiBoZHIgICAgICAgIHwgICAgICAgICB8CgkgKiB0eXBlc19kYXRhLSsgICAgICAgICB8CgkgKiBz
dHJzX2RhdGEtLS0tLS0tLS0tLS0rCgkgKgoJICogSWYgQlRGIGRhdGEgaXMgbGF0ZXIgbW9kaWZp
ZWQsIGUuZy4sIGR1ZSB0byB0eXBlcyBhZGRlZCBvcgoJICogcmVtb3ZlZCwgQlRGIGRlZHVwbGlj
YXRpb24gcGVyZm9ybWVkLCBldGMsIHRoaXMgY29udGlndW91cwoJICogcmVwcmVzZW50YXRpb24g
aXMgYnJva2VuIHVwIGludG8gdGhyZWUgaW5kZXBlbmRlbnRseSBhbGxvY2F0ZWQKCSAqIG1lbW9y
eSByZWdpb25zIHRvIGJlIGFibGUgdG8gbW9kaWZ5IHRoZW0gaW5kZXBlbmRlbnRseS4KCSAqIHJh
d19kYXRhIGlzIG51bGxlZCBvdXQgYXQgdGhhdCBwb2ludCwgYnV0IGNhbiBiZSBsYXRlciBhbGxv
Y2F0ZWQKCSAqIGFuZCBjYWNoZWQgYWdhaW4gaWYgdXNlciBjYWxscyBidGZfX3Jhd19kYXRhKCks
IGF0IHdoaWNoIHBvaW50CgkgKiByYXdfZGF0YSB3aWxsIGNvbnRhaW4gYSBjb250aWd1b3VzIGNv
cHkgb2YgaGVhZGVyLCB0eXBlcywgYW5kCgkgKiBzdHJpbmdzOgoJICoKCSAqICstLS0tLS0tLS0t
KyAgKy0tLS0tLS0tLSsgICstLS0tLS0tLS0tLSsKCSAqIHwgIEhlYWRlciAgfCAgfCAgVHlwZXMg
IHwgIHwgIFN0cmluZ3MgIHwKCSAqICstLS0tLS0tLS0tKyAgKy0tLS0tLS0tLSsgICstLS0tLS0t
LS0tLSsKCSAqIF4gICAgICAgICAgICAgXiAgICAgICAgICAgIF4KCSAqIHwgICAgICAgICAgICAg
fCAgICAgICAgICAgIHwKCSAqIGhkciAgICAgICAgICAgfCAgICAgICAgICAgIHwKCSAqIHR5cGVz
X2RhdGEtLS0tKyAgICAgICAgICAgIHwKCSAqIHN0cnNldF9fZGF0YShzdHJzX3NldCktLS0tLSsK
CSAqCgkgKiAgICAgICAgICAgICAgICstLS0tLS0tLS0tKy0tLS0tLS0tLSstLS0tLS0tLS0tLSsK
CSAqICAgICAgICAgICAgICAgfCAgSGVhZGVyICB8ICBUeXBlcyAgfCAgU3RyaW5ncyAgfAoJICog
cmF3X2RhdGEtLS0tLT4rLS0tLS0tLS0tLSstLS0tLS0tLS0rLS0tLS0tLS0tLS0rCgkgKi8KCXN0
cnVjdCBidGZfaGVhZGVyICpoZHI7CgoJdm9pZCAqdHlwZXNfZGF0YTsKCXNpemVfdCB0eXBlc19k
YXRhX2NhcDsgLyogdXNlZCBzaXplIHN0b3JlZCBpbiBoZHItPnR5cGVfbGVuICovCgoJLyogdHlw
ZSBJRCB0byBgc3RydWN0IGJ0Zl90eXBlICpgIGxvb2t1cCBpbmRleAoJICogdHlwZV9vZmZzWzBd
IGNvcnJlc3BvbmRzIHRvIHRoZSBmaXJzdCBub24tVk9JRCB0eXBlOgoJICogICAtIGZvciBiYXNl
IEJURiBpdCdzIHR5cGUgWzFdOwoJICogICAtIGZvciBzcGxpdCBCVEYgaXQncyB0aGUgZmlyc3Qg
bm9uLWJhc2UgQlRGIHR5cGUuCgkgKi8KCV9fdTMyICp0eXBlX29mZnM7CglzaXplX3QgdHlwZV9v
ZmZzX2NhcDsKCS8qIG51bWJlciBvZiB0eXBlcyBpbiB0aGlzIEJURiBpbnN0YW5jZToKCSAqICAg
LSBkb2Vzbid0IGluY2x1ZGUgc3BlY2lhbCBbMF0gdm9pZCB0eXBlOwoJICogICAtIGZvciBzcGxp
dCBCVEYgY291bnRzIG51bWJlciBvZiB0eXBlcyBhZGRlZCBvbiB0b3Agb2YgYmFzZSBCVEYuCgkg
Ki8KCV9fdTMyIG5yX3R5cGVzOwoJLyogaWYgbm90IE5VTEwsIHBvaW50cyB0byB0aGUgYmFzZSBC
VEYgb24gdG9wIG9mIHdoaWNoIHRoZSBjdXJyZW50CgkgKiBzcGxpdCBCVEYgaXMgYmFzZWQKCSAq
LwoJc3RydWN0IGJ0ZiAqYmFzZV9idGY7CgkvKiBCVEYgdHlwZSBJRCBvZiB0aGUgZmlyc3QgdHlw
ZSBpbiB0aGlzIEJURiBpbnN0YW5jZToKCSAqICAgLSBmb3IgYmFzZSBCVEYgaXQncyBlcXVhbCB0
byAxOwoJICogICAtIGZvciBzcGxpdCBCVEYgaXQncyBlcXVhbCB0byBiaWdnZXN0IHR5cGUgSUQg
b2YgYmFzZSBCVEYgcGx1cyAxLgoJICovCglpbnQgc3RhcnRfaWQ7CgkvKiBsb2dpY2FsIHN0cmlu
ZyBvZmZzZXQgb2YgdGhpcyBCVEYgaW5zdGFuY2U6CgkgKiAgIC0gZm9yIGJhc2UgQlRGIGl0J3Mg
ZXF1YWwgdG8gMDsKCSAqICAgLSBmb3Igc3BsaXQgQlRGIGl0J3MgZXF1YWwgdG8gdG90YWwgc2l6
ZSBvZiBiYXNlIEJURidzIHN0cmluZyBzZWN0aW9uIHNpemUuCgkgKi8KCWludCBzdGFydF9zdHJf
b2ZmOwoKCS8qIG9ubHkgb25lIG9mIHN0cnNfZGF0YSBvciBzdHJzX3NldCBjYW4gYmUgbm9uLU5V
TEwsIGRlcGVuZGluZyBvbgoJICogd2hldGhlciBCVEYgaXMgaW4gYSBtb2RpZmlhYmxlIHN0YXRl
IChzdHJzX3NldCBpcyB1c2VkKSBvciBub3QKCSAqIChzdHJzX2RhdGEgcG9pbnRzIGluc2lkZSBy
YXdfZGF0YSkKCSAqLwoJdm9pZCAqc3Ryc19kYXRhOwoJLyogYSBzZXQgb2YgdW5pcXVlIHN0cmlu
Z3MgKi8KCXN0cnVjdCBzdHJzZXQgKnN0cnNfc2V0OwoJLyogd2hldGhlciBzdHJpbmdzIGFyZSBh
bHJlYWR5IGRlZHVwbGljYXRlZCAqLwoJYm9vbCBzdHJzX2RlZHVwZWQ7CgoJLyogd2hldGhlciBi
YXNlX2J0ZiBzaG91bGQgYmUgZnJlZWQgaW4gYnRmX2ZyZWUgZm9yIHRoaXMgaW5zdGFuY2UgKi8K
CWJvb2wgb3duc19iYXNlOwoKCS8qIEJURiBvYmplY3QgRkQsIGlmIGxvYWRlZCBpbnRvIGtlcm5l
bCAqLwoJaW50IGZkOwoKCS8qIFBvaW50ZXIgc2l6ZSAoaW4gYnl0ZXMpIGZvciBhIHRhcmdldCBh
cmNoaXRlY3R1cmUgb2YgdGhpcyBCVEYgKi8KCWludCBwdHJfc3o7Cn07CgpzdGF0aWMgaW5saW5l
IF9fdTY0IHB0cl90b191NjQoY29uc3Qgdm9pZCAqcHRyKQp7CglyZXR1cm4gKF9fdTY0KSAodW5z
aWduZWQgbG9uZykgcHRyOwp9CgovKiBFbnN1cmUgZ2l2ZW4gZHluYW1pY2FsbHkgYWxsb2NhdGVk
IG1lbW9yeSByZWdpb24gcG9pbnRlZCB0byBieSAqZGF0YSogd2l0aAogKiBjYXBhY2l0eSBvZiAq
Y2FwX2NudCogZWxlbWVudHMgZWFjaCB0YWtpbmcgKmVsZW1fc3oqIGJ5dGVzIGhhcyBlbm91Z2gK
ICogbWVtb3J5IHRvIGFjY29tbW9kYXRlICphZGRfY250KiBuZXcgZWxlbWVudHMsIGFzc3VtaW5n
ICpjdXJfY250KiBlbGVtZW50cwogKiBhcmUgYWxyZWFkeSB1c2VkLiBBdCBtb3N0ICptYXhfY250
KiBlbGVtZW50cyBjYW4gYmUgZXZlciBhbGxvY2F0ZWQuCiAqIElmIG5lY2Vzc2FyeSwgbWVtb3J5
IGlzIHJlYWxsb2NhdGVkIGFuZCBhbGwgZXhpc3RpbmcgZGF0YSBpcyBjb3BpZWQgb3ZlciwKICog
bmV3IHBvaW50ZXIgdG8gdGhlIG1lbW9yeSByZWdpb24gaXMgc3RvcmVkIGF0ICpkYXRhLCBuZXcg
bWVtb3J5IHJlZ2lvbgogKiBjYXBhY2l0eSAoaW4gbnVtYmVyIG9mIGVsZW1lbnRzKSBpcyBzdG9y
ZWQgaW4gKmNhcC4KICogT24gc3VjY2VzcywgbWVtb3J5IHBvaW50ZXIgdG8gdGhlIGJlZ2lubmlu
ZyBvZiB1bnVzZWQgbWVtb3J5IGlzIHJldHVybmVkLgogKiBPbiBlcnJvciwgTlVMTCBpcyByZXR1
cm5lZC4KICovCnZvaWQgKmxpYmJwZl9hZGRfbWVtKHZvaWQgKipkYXRhLCBzaXplX3QgKmNhcF9j
bnQsIHNpemVfdCBlbGVtX3N6LAoJCSAgICAgc2l6ZV90IGN1cl9jbnQsIHNpemVfdCBtYXhfY250
LCBzaXplX3QgYWRkX2NudCkKewoJc2l6ZV90IG5ld19jbnQ7Cgl2b2lkICpuZXdfZGF0YTsKCglp
ZiAoY3VyX2NudCArIGFkZF9jbnQgPD0gKmNhcF9jbnQpCgkJcmV0dXJuICpkYXRhICsgY3VyX2Nu
dCAqIGVsZW1fc3o7CgoJLyogcmVxdWVzdGVkIG1vcmUgdGhhbiB0aGUgc2V0IGxpbWl0ICovCglp
ZiAoY3VyX2NudCArIGFkZF9jbnQgPiBtYXhfY250KQoJCXJldHVybiBOVUxMOwoKCW5ld19jbnQg
PSAqY2FwX2NudDsKCW5ld19jbnQgKz0gbmV3X2NudCAvIDQ7CQkgIC8qIGV4cGFuZCBieSAyNSUg
Ki8KCWlmIChuZXdfY250IDwgMTYpCQkgIC8qIGJ1dCBhdCBsZWFzdCAxNiBlbGVtZW50cyAqLwoJ
CW5ld19jbnQgPSAxNjsKCWlmIChuZXdfY250ID4gbWF4X2NudCkJCSAgLyogYnV0IG5vdCBleGNl
ZWRpbmcgYSBzZXQgbGltaXQgKi8KCQluZXdfY250ID0gbWF4X2NudDsKCWlmIChuZXdfY250IDwg
Y3VyX2NudCArIGFkZF9jbnQpICAvKiBhbHNvIGVuc3VyZSB3ZSBoYXZlIGVub3VnaCBtZW1vcnkg
Ki8KCQluZXdfY250ID0gY3VyX2NudCArIGFkZF9jbnQ7CgoJbmV3X2RhdGEgPSBsaWJicGZfcmVh
bGxvY2FycmF5KCpkYXRhLCBuZXdfY250LCBlbGVtX3N6KTsKCWlmICghbmV3X2RhdGEpCgkJcmV0
dXJuIE5VTEw7CgoJLyogemVybyBvdXQgbmV3bHkgYWxsb2NhdGVkIHBvcnRpb24gb2YgbWVtb3J5
ICovCgltZW1zZXQobmV3X2RhdGEgKyAoKmNhcF9jbnQpICogZWxlbV9zeiwgMCwgKG5ld19jbnQg
LSAqY2FwX2NudCkgKiBlbGVtX3N6KTsKCgkqZGF0YSA9IG5ld19kYXRhOwoJKmNhcF9jbnQgPSBu
ZXdfY250OwoJcmV0dXJuIG5ld19kYXRhICsgY3VyX2NudCAqIGVsZW1fc3o7Cn0KCi8qIEVuc3Vy
ZSBnaXZlbiBkeW5hbWljYWxseSBhbGxvY2F0ZWQgbWVtb3J5IHJlZ2lvbiBoYXMgZW5vdWdoIGFs
bG9jYXRlZCBzcGFjZQogKiB0byBhY2NvbW1vZGF0ZSAqbmVlZF9jbnQqIGVsZW1lbnRzIG9mIHNp
emUgKmVsZW1fc3oqIGJ5dGVzIGVhY2gKICovCmludCBsaWJicGZfZW5zdXJlX21lbSh2b2lkICoq
ZGF0YSwgc2l6ZV90ICpjYXBfY250LCBzaXplX3QgZWxlbV9zeiwgc2l6ZV90IG5lZWRfY250KQp7
Cgl2b2lkICpwOwoKCWlmIChuZWVkX2NudCA8PSAqY2FwX2NudCkKCQlyZXR1cm4gMDsKCglwID0g
bGliYnBmX2FkZF9tZW0oZGF0YSwgY2FwX2NudCwgZWxlbV9zeiwgKmNhcF9jbnQsIFNJWkVfTUFY
LCBuZWVkX2NudCAtICpjYXBfY250KTsKCWlmICghcCkKCQlyZXR1cm4gLUVOT01FTTsKCglyZXR1
cm4gMDsKfQoKc3RhdGljIHZvaWQgKmJ0Zl9hZGRfdHlwZV9vZmZzX21lbShzdHJ1Y3QgYnRmICpi
dGYsIHNpemVfdCBhZGRfY250KQp7CglyZXR1cm4gbGliYnBmX2FkZF9tZW0oKHZvaWQgKiopJmJ0
Zi0+dHlwZV9vZmZzLCAmYnRmLT50eXBlX29mZnNfY2FwLCBzaXplb2YoX191MzIpLAoJCQkgICAg
ICBidGYtPm5yX3R5cGVzLCBCVEZfTUFYX05SX1RZUEVTLCBhZGRfY250KTsKfQoKc3RhdGljIGlu
dCBidGZfYWRkX3R5cGVfaWR4X2VudHJ5KHN0cnVjdCBidGYgKmJ0ZiwgX191MzIgdHlwZV9vZmYp
CnsKCV9fdTMyICpwOwoKCXAgPSBidGZfYWRkX3R5cGVfb2Zmc19tZW0oYnRmLCAxKTsKCWlmICgh
cCkKCQlyZXR1cm4gLUVOT01FTTsKCgkqcCA9IHR5cGVfb2ZmOwoJcmV0dXJuIDA7Cn0KCnN0YXRp
YyB2b2lkIGJ0Zl9ic3dhcF9oZHIoc3RydWN0IGJ0Zl9oZWFkZXIgKmgpCnsKCWgtPm1hZ2ljID0g
YnN3YXBfMTYoaC0+bWFnaWMpOwoJaC0+aGRyX2xlbiA9IGJzd2FwXzMyKGgtPmhkcl9sZW4pOwoJ
aC0+dHlwZV9vZmYgPSBic3dhcF8zMihoLT50eXBlX29mZik7CgloLT50eXBlX2xlbiA9IGJzd2Fw
XzMyKGgtPnR5cGVfbGVuKTsKCWgtPnN0cl9vZmYgPSBic3dhcF8zMihoLT5zdHJfb2ZmKTsKCWgt
PnN0cl9sZW4gPSBic3dhcF8zMihoLT5zdHJfbGVuKTsKfQoKc3RhdGljIGludCBidGZfcGFyc2Vf
aGRyKHN0cnVjdCBidGYgKmJ0ZikKewoJc3RydWN0IGJ0Zl9oZWFkZXIgKmhkciA9IGJ0Zi0+aGRy
OwoJX191MzIgbWV0YV9sZWZ0OwoKCWlmIChidGYtPnJhd19zaXplIDwgc2l6ZW9mKHN0cnVjdCBi
dGZfaGVhZGVyKSkgewoJCXByX2RlYnVnKCJCVEYgaGVhZGVyIG5vdCBmb3VuZFxuIik7CgkJcmV0
dXJuIC1FSU5WQUw7Cgl9CgoJaWYgKGhkci0+bWFnaWMgPT0gYnN3YXBfMTYoQlRGX01BR0lDKSkg
ewoJCWJ0Zi0+c3dhcHBlZF9lbmRpYW4gPSB0cnVlOwoJCWlmIChic3dhcF8zMihoZHItPmhkcl9s
ZW4pICE9IHNpemVvZihzdHJ1Y3QgYnRmX2hlYWRlcikpIHsKCQkJcHJfd2FybigiQ2FuJ3QgbG9h
ZCBCVEYgd2l0aCBub24tbmF0aXZlIGVuZGlhbm5lc3MgZHVlIHRvIHVuc3VwcG9ydGVkIGhlYWRl
ciBsZW5ndGggJXVcbiIsCgkJCQlic3dhcF8zMihoZHItPmhkcl9sZW4pKTsKCQkJcmV0dXJuIC1F
Tk9UU1VQOwoJCX0KCQlidGZfYnN3YXBfaGRyKGhkcik7Cgl9IGVsc2UgaWYgKGhkci0+bWFnaWMg
IT0gQlRGX01BR0lDKSB7CgkJcHJfZGVidWcoIkludmFsaWQgQlRGIG1hZ2ljOiAleFxuIiwgaGRy
LT5tYWdpYyk7CgkJcmV0dXJuIC1FSU5WQUw7Cgl9CgoJaWYgKGJ0Zi0+cmF3X3NpemUgPCBoZHIt
Pmhkcl9sZW4pIHsKCQlwcl9kZWJ1ZygiQlRGIGhlYWRlciBsZW4gJXUgbGFyZ2VyIHRoYW4gZGF0
YSBzaXplICV1XG4iLAoJCQkgaGRyLT5oZHJfbGVuLCBidGYtPnJhd19zaXplKTsKCQlyZXR1cm4g
LUVJTlZBTDsKCX0KCgltZXRhX2xlZnQgPSBidGYtPnJhd19zaXplIC0gaGRyLT5oZHJfbGVuOwoJ
aWYgKG1ldGFfbGVmdCA8IChsb25nIGxvbmcpaGRyLT5zdHJfb2ZmICsgaGRyLT5zdHJfbGVuKSB7
CgkJcHJfZGVidWcoIkludmFsaWQgQlRGIHRvdGFsIHNpemU6ICV1XG4iLCBidGYtPnJhd19zaXpl
KTsKCQlyZXR1cm4gLUVJTlZBTDsKCX0KCglpZiAoKGxvbmcgbG9uZyloZHItPnR5cGVfb2ZmICsg
aGRyLT50eXBlX2xlbiA+IGhkci0+c3RyX29mZikgewoJCXByX2RlYnVnKCJJbnZhbGlkIEJURiBk
YXRhIHNlY3Rpb25zIGxheW91dDogdHlwZSBkYXRhIGF0ICV1ICsgJXUsIHN0cmluZ3MgZGF0YSBh
dCAldSArICV1XG4iLAoJCQkgaGRyLT50eXBlX29mZiwgaGRyLT50eXBlX2xlbiwgaGRyLT5zdHJf
b2ZmLCBoZHItPnN0cl9sZW4pOwoJCXJldHVybiAtRUlOVkFMOwoJfQoKCWlmIChoZHItPnR5cGVf
b2ZmICUgNCkgewoJCXByX2RlYnVnKCJCVEYgdHlwZSBzZWN0aW9uIGlzIG5vdCBhbGlnbmVkIHRv
IDQgYnl0ZXNcbiIpOwoJCXJldHVybiAtRUlOVkFMOwoJfQoKCXJldHVybiAwOwp9CgpzdGF0aWMg
aW50IGJ0Zl9wYXJzZV9zdHJfc2VjKHN0cnVjdCBidGYgKmJ0ZikKewoJY29uc3Qgc3RydWN0IGJ0
Zl9oZWFkZXIgKmhkciA9IGJ0Zi0+aGRyOwoJY29uc3QgY2hhciAqc3RhcnQgPSBidGYtPnN0cnNf
ZGF0YTsKCWNvbnN0IGNoYXIgKmVuZCA9IHN0YXJ0ICsgYnRmLT5oZHItPnN0cl9sZW47CgoJaWYg
KGJ0Zi0+YmFzZV9idGYgJiYgaGRyLT5zdHJfbGVuID09IDApCgkJcmV0dXJuIDA7CglpZiAoIWhk
ci0+c3RyX2xlbiB8fCBoZHItPnN0cl9sZW4gLSAxID4gQlRGX01BWF9TVFJfT0ZGU0VUIHx8IGVu
ZFstMV0pIHsKCQlwcl9kZWJ1ZygiSW52YWxpZCBCVEYgc3RyaW5nIHNlY3Rpb25cbiIpOwoJCXJl
dHVybiAtRUlOVkFMOwoJfQoJaWYgKCFidGYtPmJhc2VfYnRmICYmIHN0YXJ0WzBdKSB7CgkJcHJf
ZGVidWcoIk1hbGZvcm1lZCBCVEYgc3RyaW5nIHNlY3Rpb24sIGRpZCB5b3UgZm9yZ2V0IHRvIHBy
b3ZpZGUgYmFzZSBCVEY/XG4iKTsKCQlyZXR1cm4gLUVJTlZBTDsKCX0KCXJldHVybiAwOwp9Cgpz
dGF0aWMgaW50IGJ0Zl90eXBlX3NpemUoY29uc3Qgc3RydWN0IGJ0Zl90eXBlICp0KQp7Cgljb25z
dCBpbnQgYmFzZV9zaXplID0gc2l6ZW9mKHN0cnVjdCBidGZfdHlwZSk7CglfX3UxNiB2bGVuID0g
YnRmX3ZsZW4odCk7CgoJc3dpdGNoIChidGZfa2luZCh0KSkgewoJY2FzZSBCVEZfS0lORF9GV0Q6
CgljYXNlIEJURl9LSU5EX0NPTlNUOgoJY2FzZSBCVEZfS0lORF9WT0xBVElMRToKCWNhc2UgQlRG
X0tJTkRfUkVTVFJJQ1Q6CgljYXNlIEJURl9LSU5EX1BUUjoKCWNhc2UgQlRGX0tJTkRfVFlQRURF
RjoKCWNhc2UgQlRGX0tJTkRfRlVOQzoKCWNhc2UgQlRGX0tJTkRfRkxPQVQ6CgljYXNlIEJURl9L
SU5EX1RZUEVfVEFHOgoJCXJldHVybiBiYXNlX3NpemU7CgljYXNlIEJURl9LSU5EX0lOVDoKCQly
ZXR1cm4gYmFzZV9zaXplICsgc2l6ZW9mKF9fdTMyKTsKCWNhc2UgQlRGX0tJTkRfRU5VTToKCQly
ZXR1cm4gYmFzZV9zaXplICsgdmxlbiAqIHNpemVvZihzdHJ1Y3QgYnRmX2VudW0pOwoJY2FzZSBC
VEZfS0lORF9FTlVNNjQ6CgkJcmV0dXJuIGJhc2Vfc2l6ZSArIHZsZW4gKiBzaXplb2Yoc3RydWN0
IGJ0Zl9lbnVtNjQpOwoJY2FzZSBCVEZfS0lORF9BUlJBWToKCQlyZXR1cm4gYmFzZV9zaXplICsg
c2l6ZW9mKHN0cnVjdCBidGZfYXJyYXkpOwoJY2FzZSBCVEZfS0lORF9TVFJVQ1Q6CgljYXNlIEJU
Rl9LSU5EX1VOSU9OOgoJCXJldHVybiBiYXNlX3NpemUgKyB2bGVuICogc2l6ZW9mKHN0cnVjdCBi
dGZfbWVtYmVyKTsKCWNhc2UgQlRGX0tJTkRfRlVOQ19QUk9UTzoKCQlyZXR1cm4gYmFzZV9zaXpl
ICsgdmxlbiAqIHNpemVvZihzdHJ1Y3QgYnRmX3BhcmFtKTsKCWNhc2UgQlRGX0tJTkRfVkFSOgoJ
CXJldHVybiBiYXNlX3NpemUgKyBzaXplb2Yoc3RydWN0IGJ0Zl92YXIpOwoJY2FzZSBCVEZfS0lO
RF9EQVRBU0VDOgoJCXJldHVybiBiYXNlX3NpemUgKyB2bGVuICogc2l6ZW9mKHN0cnVjdCBidGZf
dmFyX3NlY2luZm8pOwoJY2FzZSBCVEZfS0lORF9ERUNMX1RBRzoKCQlyZXR1cm4gYmFzZV9zaXpl
ICsgc2l6ZW9mKHN0cnVjdCBidGZfZGVjbF90YWcpOwoJZGVmYXVsdDoKCQlwcl9kZWJ1ZygiVW5z
dXBwb3J0ZWQgQlRGX0tJTkQ6JXVcbiIsIGJ0Zl9raW5kKHQpKTsKCQlyZXR1cm4gLUVJTlZBTDsK
CX0KfQoKc3RhdGljIHZvaWQgYnRmX2Jzd2FwX3R5cGVfYmFzZShzdHJ1Y3QgYnRmX3R5cGUgKnQp
CnsKCXQtPm5hbWVfb2ZmID0gYnN3YXBfMzIodC0+bmFtZV9vZmYpOwoJdC0+aW5mbyA9IGJzd2Fw
XzMyKHQtPmluZm8pOwoJdC0+dHlwZSA9IGJzd2FwXzMyKHQtPnR5cGUpOwp9CgpzdGF0aWMgaW50
IGJ0Zl9ic3dhcF90eXBlX3Jlc3Qoc3RydWN0IGJ0Zl90eXBlICp0KQp7CglzdHJ1Y3QgYnRmX3Zh
cl9zZWNpbmZvICp2OwoJc3RydWN0IGJ0Zl9lbnVtNjQgKmU2NDsKCXN0cnVjdCBidGZfbWVtYmVy
ICptOwoJc3RydWN0IGJ0Zl9hcnJheSAqYTsKCXN0cnVjdCBidGZfcGFyYW0gKnA7CglzdHJ1Y3Qg
YnRmX2VudW0gKmU7CglfX3UxNiB2bGVuID0gYnRmX3ZsZW4odCk7CglpbnQgaTsKCglzd2l0Y2gg
KGJ0Zl9raW5kKHQpKSB7CgljYXNlIEJURl9LSU5EX0ZXRDoKCWNhc2UgQlRGX0tJTkRfQ09OU1Q6
CgljYXNlIEJURl9LSU5EX1ZPTEFUSUxFOgoJY2FzZSBCVEZfS0lORF9SRVNUUklDVDoKCWNhc2Ug
QlRGX0tJTkRfUFRSOgoJY2FzZSBCVEZfS0lORF9UWVBFREVGOgoJY2FzZSBCVEZfS0lORF9GVU5D
OgoJY2FzZSBCVEZfS0lORF9GTE9BVDoKCWNhc2UgQlRGX0tJTkRfVFlQRV9UQUc6CgkJcmV0dXJu
IDA7CgljYXNlIEJURl9LSU5EX0lOVDoKCQkqKF9fdTMyICopKHQgKyAxKSA9IGJzd2FwXzMyKCoo
X191MzIgKikodCArIDEpKTsKCQlyZXR1cm4gMDsKCWNhc2UgQlRGX0tJTkRfRU5VTToKCQlmb3Ig
KGkgPSAwLCBlID0gYnRmX2VudW0odCk7IGkgPCB2bGVuOyBpKyssIGUrKykgewoJCQllLT5uYW1l
X29mZiA9IGJzd2FwXzMyKGUtPm5hbWVfb2ZmKTsKCQkJZS0+dmFsID0gYnN3YXBfMzIoZS0+dmFs
KTsKCQl9CgkJcmV0dXJuIDA7CgljYXNlIEJURl9LSU5EX0VOVU02NDoKCQlmb3IgKGkgPSAwLCBl
NjQgPSBidGZfZW51bTY0KHQpOyBpIDwgdmxlbjsgaSsrLCBlNjQrKykgewoJCQllNjQtPm5hbWVf
b2ZmID0gYnN3YXBfMzIoZTY0LT5uYW1lX29mZik7CgkJCWU2NC0+dmFsX2xvMzIgPSBic3dhcF8z
MihlNjQtPnZhbF9sbzMyKTsKCQkJZTY0LT52YWxfaGkzMiA9IGJzd2FwXzMyKGU2NC0+dmFsX2hp
MzIpOwoJCX0KCQlyZXR1cm4gMDsKCWNhc2UgQlRGX0tJTkRfQVJSQVk6CgkJYSA9IGJ0Zl9hcnJh
eSh0KTsKCQlhLT50eXBlID0gYnN3YXBfMzIoYS0+dHlwZSk7CgkJYS0+aW5kZXhfdHlwZSA9IGJz
d2FwXzMyKGEtPmluZGV4X3R5cGUpOwoJCWEtPm5lbGVtcyA9IGJzd2FwXzMyKGEtPm5lbGVtcyk7
CgkJcmV0dXJuIDA7CgljYXNlIEJURl9LSU5EX1NUUlVDVDoKCWNhc2UgQlRGX0tJTkRfVU5JT046
CgkJZm9yIChpID0gMCwgbSA9IGJ0Zl9tZW1iZXJzKHQpOyBpIDwgdmxlbjsgaSsrLCBtKyspIHsK
CQkJbS0+bmFtZV9vZmYgPSBic3dhcF8zMihtLT5uYW1lX29mZik7CgkJCW0tPnR5cGUgPSBic3dh
cF8zMihtLT50eXBlKTsKCQkJbS0+b2Zmc2V0ID0gYnN3YXBfMzIobS0+b2Zmc2V0KTsKCQl9CgkJ
cmV0dXJuIDA7CgljYXNlIEJURl9LSU5EX0ZVTkNfUFJPVE86CgkJZm9yIChpID0gMCwgcCA9IGJ0
Zl9wYXJhbXModCk7IGkgPCB2bGVuOyBpKyssIHArKykgewoJCQlwLT5uYW1lX29mZiA9IGJzd2Fw
XzMyKHAtPm5hbWVfb2ZmKTsKCQkJcC0+dHlwZSA9IGJzd2FwXzMyKHAtPnR5cGUpOwoJCX0KCQly
ZXR1cm4gMDsKCWNhc2UgQlRGX0tJTkRfVkFSOgoJCWJ0Zl92YXIodCktPmxpbmthZ2UgPSBic3dh
cF8zMihidGZfdmFyKHQpLT5saW5rYWdlKTsKCQlyZXR1cm4gMDsKCWNhc2UgQlRGX0tJTkRfREFU
QVNFQzoKCQlmb3IgKGkgPSAwLCB2ID0gYnRmX3Zhcl9zZWNpbmZvcyh0KTsgaSA8IHZsZW47IGkr
KywgdisrKSB7CgkJCXYtPnR5cGUgPSBic3dhcF8zMih2LT50eXBlKTsKCQkJdi0+b2Zmc2V0ID0g
YnN3YXBfMzIodi0+b2Zmc2V0KTsKCQkJdi0+c2l6ZSA9IGJzd2FwXzMyKHYtPnNpemUpOwoJCX0K
CQlyZXR1cm4gMDsKCWNhc2UgQlRGX0tJTkRfREVDTF9UQUc6CgkJYnRmX2RlY2xfdGFnKHQpLT5j
b21wb25lbnRfaWR4ID0gYnN3YXBfMzIoYnRmX2RlY2xfdGFnKHQpLT5jb21wb25lbnRfaWR4KTsK
CQlyZXR1cm4gMDsKCWRlZmF1bHQ6CgkJcHJfZGVidWcoIlVuc3VwcG9ydGVkIEJURl9LSU5EOiV1
XG4iLCBidGZfa2luZCh0KSk7CgkJcmV0dXJuIC1FSU5WQUw7Cgl9Cn0KCnN0YXRpYyBpbnQgYnRm
X3BhcnNlX3R5cGVfc2VjKHN0cnVjdCBidGYgKmJ0ZikKewoJc3RydWN0IGJ0Zl9oZWFkZXIgKmhk
ciA9IGJ0Zi0+aGRyOwoJdm9pZCAqbmV4dF90eXBlID0gYnRmLT50eXBlc19kYXRhOwoJdm9pZCAq
ZW5kX3R5cGUgPSBuZXh0X3R5cGUgKyBoZHItPnR5cGVfbGVuOwoJaW50IGVyciwgdHlwZV9zaXpl
OwoKCXdoaWxlIChuZXh0X3R5cGUgKyBzaXplb2Yoc3RydWN0IGJ0Zl90eXBlKSA8PSBlbmRfdHlw
ZSkgewoJCWlmIChidGYtPnN3YXBwZWRfZW5kaWFuKQoJCQlidGZfYnN3YXBfdHlwZV9iYXNlKG5l
eHRfdHlwZSk7CgoJCXR5cGVfc2l6ZSA9IGJ0Zl90eXBlX3NpemUobmV4dF90eXBlKTsKCQlpZiAo
dHlwZV9zaXplIDwgMCkKCQkJcmV0dXJuIHR5cGVfc2l6ZTsKCQlpZiAobmV4dF90eXBlICsgdHlw
ZV9zaXplID4gZW5kX3R5cGUpIHsKCQkJcHJfd2FybigiQlRGIHR5cGUgWyVkXSBpcyBtYWxmb3Jt
ZWRcbiIsIGJ0Zi0+c3RhcnRfaWQgKyBidGYtPm5yX3R5cGVzKTsKCQkJcmV0dXJuIC1FSU5WQUw7
CgkJfQoKCQlpZiAoYnRmLT5zd2FwcGVkX2VuZGlhbiAmJiBidGZfYnN3YXBfdHlwZV9yZXN0KG5l
eHRfdHlwZSkpCgkJCXJldHVybiAtRUlOVkFMOwoKCQllcnIgPSBidGZfYWRkX3R5cGVfaWR4X2Vu
dHJ5KGJ0ZiwgbmV4dF90eXBlIC0gYnRmLT50eXBlc19kYXRhKTsKCQlpZiAoZXJyKQoJCQlyZXR1
cm4gZXJyOwoKCQluZXh0X3R5cGUgKz0gdHlwZV9zaXplOwoJCWJ0Zi0+bnJfdHlwZXMrKzsKCX0K
CglpZiAobmV4dF90eXBlICE9IGVuZF90eXBlKSB7CgkJcHJfd2FybigiQlRGIHR5cGVzIGRhdGEg
aXMgbWFsZm9ybWVkXG4iKTsKCQlyZXR1cm4gLUVJTlZBTDsKCX0KCglyZXR1cm4gMDsKfQoKc3Rh
dGljIGludCBidGZfdmFsaWRhdGVfc3RyKGNvbnN0IHN0cnVjdCBidGYgKmJ0ZiwgX191MzIgc3Ry
X29mZiwgY29uc3QgY2hhciAqd2hhdCwgX191MzIgdHlwZV9pZCkKewoJY29uc3QgY2hhciAqczsK
CglzID0gYnRmX19zdHJfYnlfb2Zmc2V0KGJ0Ziwgc3RyX29mZik7CglpZiAoIXMpIHsKCQlwcl93
YXJuKCJidGY6IHR5cGUgWyV1XTogaW52YWxpZCAlcyAoc3RyaW5nIG9mZnNldCAldSlcbiIsIHR5
cGVfaWQsIHdoYXQsIHN0cl9vZmYpOwoJCXJldHVybiAtRUlOVkFMOwoJfQoKCXJldHVybiAwOwp9
CgpzdGF0aWMgaW50IGJ0Zl92YWxpZGF0ZV9pZChjb25zdCBzdHJ1Y3QgYnRmICpidGYsIF9fdTMy
IGlkLCBfX3UzMiBjdHhfaWQpCnsKCWNvbnN0IHN0cnVjdCBidGZfdHlwZSAqdDsKCgl0ID0gYnRm
X190eXBlX2J5X2lkKGJ0ZiwgaWQpOwoJaWYgKCF0KSB7CgkJcHJfd2FybigiYnRmOiB0eXBlIFsl
dV06IGludmFsaWQgcmVmZXJlbmNlZCB0eXBlIElEICV1XG4iLCBjdHhfaWQsIGlkKTsKCQlyZXR1
cm4gLUVJTlZBTDsKCX0KCglyZXR1cm4gMDsKfQoKc3RhdGljIGludCBidGZfdmFsaWRhdGVfdHlw
ZShjb25zdCBzdHJ1Y3QgYnRmICpidGYsIGNvbnN0IHN0cnVjdCBidGZfdHlwZSAqdCwgX191MzIg
aWQpCnsKCV9fdTMyIGtpbmQgPSBidGZfa2luZCh0KTsKCWludCBlcnIsIGksIG47CgoJZXJyID0g
YnRmX3ZhbGlkYXRlX3N0cihidGYsIHQtPm5hbWVfb2ZmLCAidHlwZSBuYW1lIiwgaWQpOwoJaWYg
KGVycikKCQlyZXR1cm4gZXJyOwoKCXN3aXRjaCAoa2luZCkgewoJY2FzZSBCVEZfS0lORF9VTktO
OgoJY2FzZSBCVEZfS0lORF9JTlQ6CgljYXNlIEJURl9LSU5EX0ZXRDoKCWNhc2UgQlRGX0tJTkRf
RkxPQVQ6CgkJYnJlYWs7CgljYXNlIEJURl9LSU5EX1BUUjoKCWNhc2UgQlRGX0tJTkRfVFlQRURF
RjoKCWNhc2UgQlRGX0tJTkRfVk9MQVRJTEU6CgljYXNlIEJURl9LSU5EX0NPTlNUOgoJY2FzZSBC
VEZfS0lORF9SRVNUUklDVDoKCWNhc2UgQlRGX0tJTkRfVkFSOgoJY2FzZSBCVEZfS0lORF9ERUNM
X1RBRzoKCWNhc2UgQlRGX0tJTkRfVFlQRV9UQUc6CgkJZXJyID0gYnRmX3ZhbGlkYXRlX2lkKGJ0
ZiwgdC0+dHlwZSwgaWQpOwoJCWlmIChlcnIpCgkJCXJldHVybiBlcnI7CgkJYnJlYWs7CgljYXNl
IEJURl9LSU5EX0FSUkFZOiB7CgkJY29uc3Qgc3RydWN0IGJ0Zl9hcnJheSAqYSA9IGJ0Zl9hcnJh
eSh0KTsKCgkJZXJyID0gYnRmX3ZhbGlkYXRlX2lkKGJ0ZiwgYS0+dHlwZSwgaWQpOwoJCWVyciA9
IGVyciA/OiBidGZfdmFsaWRhdGVfaWQoYnRmLCBhLT5pbmRleF90eXBlLCBpZCk7CgkJaWYgKGVy
cikKCQkJcmV0dXJuIGVycjsKCQlicmVhazsKCX0KCWNhc2UgQlRGX0tJTkRfU1RSVUNUOgoJY2Fz
ZSBCVEZfS0lORF9VTklPTjogewoJCWNvbnN0IHN0cnVjdCBidGZfbWVtYmVyICptID0gYnRmX21l
bWJlcnModCk7CgoJCW4gPSBidGZfdmxlbih0KTsKCQlmb3IgKGkgPSAwOyBpIDwgbjsgaSsrLCBt
KyspIHsKCQkJZXJyID0gYnRmX3ZhbGlkYXRlX3N0cihidGYsIG0tPm5hbWVfb2ZmLCAiZmllbGQg
bmFtZSIsIGlkKTsKCQkJZXJyID0gZXJyID86IGJ0Zl92YWxpZGF0ZV9pZChidGYsIG0tPnR5cGUs
IGlkKTsKCQkJaWYgKGVycikKCQkJCXJldHVybiBlcnI7CgkJfQoJCWJyZWFrOwoJfQoJY2FzZSBC
VEZfS0lORF9FTlVNOiB7CgkJY29uc3Qgc3RydWN0IGJ0Zl9lbnVtICptID0gYnRmX2VudW0odCk7
CgoJCW4gPSBidGZfdmxlbih0KTsKCQlmb3IgKGkgPSAwOyBpIDwgbjsgaSsrLCBtKyspIHsKCQkJ
ZXJyID0gYnRmX3ZhbGlkYXRlX3N0cihidGYsIG0tPm5hbWVfb2ZmLCAiZW51bSBuYW1lIiwgaWQp
OwoJCQlpZiAoZXJyKQoJCQkJcmV0dXJuIGVycjsKCQl9CgkJYnJlYWs7Cgl9CgljYXNlIEJURl9L
SU5EX0VOVU02NDogewoJCWNvbnN0IHN0cnVjdCBidGZfZW51bTY0ICptID0gYnRmX2VudW02NCh0
KTsKCgkJbiA9IGJ0Zl92bGVuKHQpOwoJCWZvciAoaSA9IDA7IGkgPCBuOyBpKyssIG0rKykgewoJ
CQllcnIgPSBidGZfdmFsaWRhdGVfc3RyKGJ0ZiwgbS0+bmFtZV9vZmYsICJlbnVtIG5hbWUiLCBp
ZCk7CgkJCWlmIChlcnIpCgkJCQlyZXR1cm4gZXJyOwoJCX0KCQlicmVhazsKCX0KCWNhc2UgQlRG
X0tJTkRfRlVOQzogewoJCWNvbnN0IHN0cnVjdCBidGZfdHlwZSAqZnQ7CgoJCWVyciA9IGJ0Zl92
YWxpZGF0ZV9pZChidGYsIHQtPnR5cGUsIGlkKTsKCQlpZiAoZXJyKQoJCQlyZXR1cm4gZXJyOwoJ
CWZ0ID0gYnRmX190eXBlX2J5X2lkKGJ0ZiwgdC0+dHlwZSk7CgkJaWYgKGJ0Zl9raW5kKGZ0KSAh
PSBCVEZfS0lORF9GVU5DX1BST1RPKSB7CgkJCXByX3dhcm4oImJ0ZjogdHlwZSBbJXVdOiByZWZl
cmVuY2VkIHR5cGUgWyV1XSBpcyBub3QgRlVOQ19QUk9UT1xuIiwgaWQsIHQtPnR5cGUpOwoJCQly
ZXR1cm4gLUVJTlZBTDsKCQl9CgkJYnJlYWs7Cgl9CgljYXNlIEJURl9LSU5EX0ZVTkNfUFJPVE86
IHsKCQljb25zdCBzdHJ1Y3QgYnRmX3BhcmFtICptID0gYnRmX3BhcmFtcyh0KTsKCgkJbiA9IGJ0
Zl92bGVuKHQpOwoJCWZvciAoaSA9IDA7IGkgPCBuOyBpKyssIG0rKykgewoJCQllcnIgPSBidGZf
dmFsaWRhdGVfc3RyKGJ0ZiwgbS0+bmFtZV9vZmYsICJwYXJhbSBuYW1lIiwgaWQpOwoJCQllcnIg
PSBlcnIgPzogYnRmX3ZhbGlkYXRlX2lkKGJ0ZiwgbS0+dHlwZSwgaWQpOwoJCQlpZiAoZXJyKQoJ
CQkJcmV0dXJuIGVycjsKCQl9CgkJYnJlYWs7Cgl9CgljYXNlIEJURl9LSU5EX0RBVEFTRUM6IHsK
CQljb25zdCBzdHJ1Y3QgYnRmX3Zhcl9zZWNpbmZvICptID0gYnRmX3Zhcl9zZWNpbmZvcyh0KTsK
CgkJbiA9IGJ0Zl92bGVuKHQpOwoJCWZvciAoaSA9IDA7IGkgPCBuOyBpKyssIG0rKykgewoJCQll
cnIgPSBidGZfdmFsaWRhdGVfaWQoYnRmLCBtLT50eXBlLCBpZCk7CgkJCWlmIChlcnIpCgkJCQly
ZXR1cm4gZXJyOwoJCX0KCQlicmVhazsKCX0KCWRlZmF1bHQ6CgkJcHJfd2FybigiYnRmOiB0eXBl
IFsldV06IHVucmVjb2duaXplZCBraW5kICV1XG4iLCBpZCwga2luZCk7CgkJcmV0dXJuIC1FSU5W
QUw7Cgl9CglyZXR1cm4gMDsKfQoKLyogVmFsaWRhdGUgYmFzaWMgc2FuaXR5IG9mIEJURi4gSXQn
cyBpbnRlbnRpb25hbGx5IGxlc3MgdGhvcm91Z2ggdGhhbgogKiBrZXJuZWwncyB2YWxpZGF0aW9u
IGFuZCB2YWxpZGF0ZXMgb25seSBwcm9wZXJ0aWVzIG9mIEJURiB0aGF0IGxpYmJwZiByZWxpZXMK
ICogb24gdG8gYmUgY29ycmVjdCAoZS5nLiwgdmFsaWQgdHlwZSBJRHMsIHZhbGlkIHN0cmluZyBv
ZmZzZXRzLCBldGMpCiAqLwpzdGF0aWMgaW50IGJ0Zl9zYW5pdHlfY2hlY2soY29uc3Qgc3RydWN0
IGJ0ZiAqYnRmKQp7Cgljb25zdCBzdHJ1Y3QgYnRmX3R5cGUgKnQ7CglfX3UzMiBpLCBuID0gYnRm
X190eXBlX2NudChidGYpOwoJaW50IGVycjsKCglmb3IgKGkgPSBidGYtPnN0YXJ0X2lkOyBpIDwg
bjsgaSsrKSB7CgkJdCA9IGJ0Zl90eXBlX2J5X2lkKGJ0ZiwgaSk7CgkJZXJyID0gYnRmX3ZhbGlk
YXRlX3R5cGUoYnRmLCB0LCBpKTsKCQlpZiAoZXJyKQoJCQlyZXR1cm4gZXJyOwoJfQoJcmV0dXJu
IDA7Cn0KCl9fdTMyIGJ0Zl9fdHlwZV9jbnQoY29uc3Qgc3RydWN0IGJ0ZiAqYnRmKQp7CglyZXR1
cm4gYnRmLT5zdGFydF9pZCArIGJ0Zi0+bnJfdHlwZXM7Cn0KCmNvbnN0IHN0cnVjdCBidGYgKmJ0
Zl9fYmFzZV9idGYoY29uc3Qgc3RydWN0IGJ0ZiAqYnRmKQp7CglyZXR1cm4gYnRmLT5iYXNlX2J0
ZjsKfQoKLyogaW50ZXJuYWwgaGVscGVyIHJldHVybmluZyBub24tY29uc3QgcG9pbnRlciB0byBh
IHR5cGUgKi8Kc3RydWN0IGJ0Zl90eXBlICpidGZfdHlwZV9ieV9pZChjb25zdCBzdHJ1Y3QgYnRm
ICpidGYsIF9fdTMyIHR5cGVfaWQpCnsKCWlmICh0eXBlX2lkID09IDApCgkJcmV0dXJuICZidGZf
dm9pZDsKCWlmICh0eXBlX2lkIDwgYnRmLT5zdGFydF9pZCkKCQlyZXR1cm4gYnRmX3R5cGVfYnlf
aWQoYnRmLT5iYXNlX2J0ZiwgdHlwZV9pZCk7CglyZXR1cm4gYnRmLT50eXBlc19kYXRhICsgYnRm
LT50eXBlX29mZnNbdHlwZV9pZCAtIGJ0Zi0+c3RhcnRfaWRdOwp9Cgpjb25zdCBzdHJ1Y3QgYnRm
X3R5cGUgKmJ0Zl9fdHlwZV9ieV9pZChjb25zdCBzdHJ1Y3QgYnRmICpidGYsIF9fdTMyIHR5cGVf
aWQpCnsKCWlmICh0eXBlX2lkID49IGJ0Zi0+c3RhcnRfaWQgKyBidGYtPm5yX3R5cGVzKQoJCXJl
dHVybiBlcnJubyA9IEVJTlZBTCwgTlVMTDsKCXJldHVybiBidGZfdHlwZV9ieV9pZCgoc3RydWN0
IGJ0ZiAqKWJ0ZiwgdHlwZV9pZCk7Cn0KCnN0YXRpYyBpbnQgZGV0ZXJtaW5lX3B0cl9zaXplKGNv
bnN0IHN0cnVjdCBidGYgKmJ0ZikKewoJc3RhdGljIGNvbnN0IGNoYXIgKiBjb25zdCBsb25nX2Fs
aWFzZXNbXSA9IHsKCQkibG9uZyIsCgkJImxvbmcgaW50IiwKCQkiaW50IGxvbmciLAoJCSJ1bnNp
Z25lZCBsb25nIiwKCQkibG9uZyB1bnNpZ25lZCIsCgkJInVuc2lnbmVkIGxvbmcgaW50IiwKCQki
dW5zaWduZWQgaW50IGxvbmciLAoJCSJsb25nIHVuc2lnbmVkIGludCIsCgkJImxvbmcgaW50IHVu
c2lnbmVkIiwKCQkiaW50IHVuc2lnbmVkIGxvbmciLAoJCSJpbnQgbG9uZyB1bnNpZ25lZCIsCgl9
OwoJY29uc3Qgc3RydWN0IGJ0Zl90eXBlICp0OwoJY29uc3QgY2hhciAqbmFtZTsKCWludCBpLCBq
LCBuOwoKCWlmIChidGYtPmJhc2VfYnRmICYmIGJ0Zi0+YmFzZV9idGYtPnB0cl9zeiA+IDApCgkJ
cmV0dXJuIGJ0Zi0+YmFzZV9idGYtPnB0cl9zejsKCgluID0gYnRmX190eXBlX2NudChidGYpOwoJ
Zm9yIChpID0gMTsgaSA8IG47IGkrKykgewoJCXQgPSBidGZfX3R5cGVfYnlfaWQoYnRmLCBpKTsK
CQlpZiAoIWJ0Zl9pc19pbnQodCkpCgkJCWNvbnRpbnVlOwoKCQlpZiAodC0+c2l6ZSAhPSA0ICYm
IHQtPnNpemUgIT0gOCkKCQkJY29udGludWU7CgoJCW5hbWUgPSBidGZfX25hbWVfYnlfb2Zmc2V0
KGJ0ZiwgdC0+bmFtZV9vZmYpOwoJCWlmICghbmFtZSkKCQkJY29udGludWU7CgoJCWZvciAoaiA9
IDA7IGogPCBBUlJBWV9TSVpFKGxvbmdfYWxpYXNlcyk7IGorKykgewoJCQlpZiAoc3RyY21wKG5h
bWUsIGxvbmdfYWxpYXNlc1tqXSkgPT0gMCkKCQkJCXJldHVybiB0LT5zaXplOwoJCX0KCX0KCgly
ZXR1cm4gLTE7Cn0KCnN0YXRpYyBzaXplX3QgYnRmX3B0cl9zeihjb25zdCBzdHJ1Y3QgYnRmICpi
dGYpCnsKCWlmICghYnRmLT5wdHJfc3opCgkJKChzdHJ1Y3QgYnRmICopYnRmKS0+cHRyX3N6ID0g
ZGV0ZXJtaW5lX3B0cl9zaXplKGJ0Zik7CglyZXR1cm4gYnRmLT5wdHJfc3ogPCAwID8gc2l6ZW9m
KHZvaWQgKikgOiBidGYtPnB0cl9zejsKfQoKLyogUmV0dXJuIHBvaW50ZXIgc2l6ZSB0aGlzIEJU
RiBpbnN0YW5jZSBhc3N1bWVzLiBUaGUgc2l6ZSBpcyBoZXVyaXN0aWNhbGx5CiAqIGRldGVybWlu
ZWQgYnkgbG9va2luZyBmb3IgJ2xvbmcnIG9yICd1bnNpZ25lZCBsb25nJyBpbnRlZ2VyIHR5cGUg
YW5kCiAqIHJlY29yZGluZyBpdHMgc2l6ZSBpbiBieXRlcy4gSWYgQlRGIHR5cGUgaW5mb3JtYXRp
b24gZG9lc24ndCBoYXZlIGFueSBzdWNoCiAqIHR5cGUsIHRoaXMgZnVuY3Rpb24gcmV0dXJucyAw
LiBJbiB0aGUgbGF0dGVyIGNhc2UsIG5hdGl2ZSBhcmNoaXRlY3R1cmUncwogKiBwb2ludGVyIHNp
emUgaXMgYXNzdW1lZCwgc28gd2lsbCBiZSBlaXRoZXIgNCBvciA4LCBkZXBlbmRpbmcgb24KICog
YXJjaGl0ZWN0dXJlIHRoYXQgbGliYnBmIHdhcyBjb21waWxlZCBmb3IuIEl0J3MgcG9zc2libGUg
dG8gb3ZlcnJpZGUKICogZ3Vlc3NlZCB2YWx1ZSBieSB1c2luZyBidGZfX3NldF9wb2ludGVyX3Np
emUoKSBBUEkuCiAqLwpzaXplX3QgYnRmX19wb2ludGVyX3NpemUoY29uc3Qgc3RydWN0IGJ0ZiAq
YnRmKQp7CglpZiAoIWJ0Zi0+cHRyX3N6KQoJCSgoc3RydWN0IGJ0ZiAqKWJ0ZiktPnB0cl9zeiA9
IGRldGVybWluZV9wdHJfc2l6ZShidGYpOwoKCWlmIChidGYtPnB0cl9zeiA8IDApCgkJLyogbm90
IGVub3VnaCBCVEYgdHlwZSBpbmZvIHRvIGd1ZXNzICovCgkJcmV0dXJuIDA7CgoJcmV0dXJuIGJ0
Zi0+cHRyX3N6Owp9CgovKiBPdmVycmlkZSBvciBzZXQgcG9pbnRlciBzaXplIGluIGJ5dGVzLiBP
bmx5IHZhbHVlcyBvZiA0IGFuZCA4IGFyZQogKiBzdXBwb3J0ZWQuCiAqLwppbnQgYnRmX19zZXRf
cG9pbnRlcl9zaXplKHN0cnVjdCBidGYgKmJ0Ziwgc2l6ZV90IHB0cl9zeikKewoJaWYgKHB0cl9z
eiAhPSA0ICYmIHB0cl9zeiAhPSA4KQoJCXJldHVybiBsaWJicGZfZXJyKC1FSU5WQUwpOwoJYnRm
LT5wdHJfc3ogPSBwdHJfc3o7CglyZXR1cm4gMDsKfQoKc3RhdGljIGJvb2wgaXNfaG9zdF9iaWdf
ZW5kaWFuKHZvaWQpCnsKI2lmIF9fQllURV9PUkRFUl9fID09IF9fT1JERVJfTElUVExFX0VORElB
Tl9fCglyZXR1cm4gZmFsc2U7CiNlbGlmIF9fQllURV9PUkRFUl9fID09IF9fT1JERVJfQklHX0VO
RElBTl9fCglyZXR1cm4gdHJ1ZTsKI2Vsc2UKIyBlcnJvciAiVW5yZWNvZ25pemVkIF9fQllURV9P
UkRFUl9fIgojZW5kaWYKfQoKZW51bSBidGZfZW5kaWFubmVzcyBidGZfX2VuZGlhbm5lc3MoY29u
c3Qgc3RydWN0IGJ0ZiAqYnRmKQp7CglpZiAoaXNfaG9zdF9iaWdfZW5kaWFuKCkpCgkJcmV0dXJu
IGJ0Zi0+c3dhcHBlZF9lbmRpYW4gPyBCVEZfTElUVExFX0VORElBTiA6IEJURl9CSUdfRU5ESUFO
OwoJZWxzZQoJCXJldHVybiBidGYtPnN3YXBwZWRfZW5kaWFuID8gQlRGX0JJR19FTkRJQU4gOiBC
VEZfTElUVExFX0VORElBTjsKfQoKaW50IGJ0Zl9fc2V0X2VuZGlhbm5lc3Moc3RydWN0IGJ0ZiAq
YnRmLCBlbnVtIGJ0Zl9lbmRpYW5uZXNzIGVuZGlhbikKewoJaWYgKGVuZGlhbiAhPSBCVEZfTElU
VExFX0VORElBTiAmJiBlbmRpYW4gIT0gQlRGX0JJR19FTkRJQU4pCgkJcmV0dXJuIGxpYmJwZl9l
cnIoLUVJTlZBTCk7CgoJYnRmLT5zd2FwcGVkX2VuZGlhbiA9IGlzX2hvc3RfYmlnX2VuZGlhbigp
ICE9IChlbmRpYW4gPT0gQlRGX0JJR19FTkRJQU4pOwoJaWYgKCFidGYtPnN3YXBwZWRfZW5kaWFu
KSB7CgkJZnJlZShidGYtPnJhd19kYXRhX3N3YXBwZWQpOwoJCWJ0Zi0+cmF3X2RhdGFfc3dhcHBl
ZCA9IE5VTEw7Cgl9CglyZXR1cm4gMDsKfQoKc3RhdGljIGJvb2wgYnRmX3R5cGVfaXNfdm9pZChj
b25zdCBzdHJ1Y3QgYnRmX3R5cGUgKnQpCnsKCXJldHVybiB0ID09ICZidGZfdm9pZCB8fCBidGZf
aXNfZndkKHQpOwp9CgpzdGF0aWMgYm9vbCBidGZfdHlwZV9pc192b2lkX29yX251bGwoY29uc3Qg
c3RydWN0IGJ0Zl90eXBlICp0KQp7CglyZXR1cm4gIXQgfHwgYnRmX3R5cGVfaXNfdm9pZCh0KTsK
fQoKI2RlZmluZSBNQVhfUkVTT0xWRV9ERVBUSCAzMgoKX19zNjQgYnRmX19yZXNvbHZlX3NpemUo
Y29uc3Qgc3RydWN0IGJ0ZiAqYnRmLCBfX3UzMiB0eXBlX2lkKQp7Cgljb25zdCBzdHJ1Y3QgYnRm
X2FycmF5ICphcnJheTsKCWNvbnN0IHN0cnVjdCBidGZfdHlwZSAqdDsKCV9fdTMyIG5lbGVtcyA9
IDE7CglfX3M2NCBzaXplID0gLTE7CglpbnQgaTsKCgl0ID0gYnRmX190eXBlX2J5X2lkKGJ0Ziwg
dHlwZV9pZCk7Cglmb3IgKGkgPSAwOyBpIDwgTUFYX1JFU09MVkVfREVQVEggJiYgIWJ0Zl90eXBl
X2lzX3ZvaWRfb3JfbnVsbCh0KTsgaSsrKSB7CgkJc3dpdGNoIChidGZfa2luZCh0KSkgewoJCWNh
c2UgQlRGX0tJTkRfSU5UOgoJCWNhc2UgQlRGX0tJTkRfU1RSVUNUOgoJCWNhc2UgQlRGX0tJTkRf
VU5JT046CgkJY2FzZSBCVEZfS0lORF9FTlVNOgoJCWNhc2UgQlRGX0tJTkRfRU5VTTY0OgoJCWNh
c2UgQlRGX0tJTkRfREFUQVNFQzoKCQljYXNlIEJURl9LSU5EX0ZMT0FUOgoJCQlzaXplID0gdC0+
c2l6ZTsKCQkJZ290byBkb25lOwoJCWNhc2UgQlRGX0tJTkRfUFRSOgoJCQlzaXplID0gYnRmX3B0
cl9zeihidGYpOwoJCQlnb3RvIGRvbmU7CgkJY2FzZSBCVEZfS0lORF9UWVBFREVGOgoJCWNhc2Ug
QlRGX0tJTkRfVk9MQVRJTEU6CgkJY2FzZSBCVEZfS0lORF9DT05TVDoKCQljYXNlIEJURl9LSU5E
X1JFU1RSSUNUOgoJCWNhc2UgQlRGX0tJTkRfVkFSOgoJCWNhc2UgQlRGX0tJTkRfREVDTF9UQUc6
CgkJY2FzZSBCVEZfS0lORF9UWVBFX1RBRzoKCQkJdHlwZV9pZCA9IHQtPnR5cGU7CgkJCWJyZWFr
OwoJCWNhc2UgQlRGX0tJTkRfQVJSQVk6CgkJCWFycmF5ID0gYnRmX2FycmF5KHQpOwoJCQlpZiAo
bmVsZW1zICYmIGFycmF5LT5uZWxlbXMgPiBVSU5UMzJfTUFYIC8gbmVsZW1zKQoJCQkJcmV0dXJu
IGxpYmJwZl9lcnIoLUUyQklHKTsKCQkJbmVsZW1zICo9IGFycmF5LT5uZWxlbXM7CgkJCXR5cGVf
aWQgPSBhcnJheS0+dHlwZTsKCQkJYnJlYWs7CgkJZGVmYXVsdDoKCQkJcmV0dXJuIGxpYmJwZl9l
cnIoLUVJTlZBTCk7CgkJfQoKCQl0ID0gYnRmX190eXBlX2J5X2lkKGJ0ZiwgdHlwZV9pZCk7Cgl9
Cgpkb25lOgoJaWYgKHNpemUgPCAwKQoJCXJldHVybiBsaWJicGZfZXJyKC1FSU5WQUwpOwoJaWYg
KG5lbGVtcyAmJiBzaXplID4gVUlOVDMyX01BWCAvIG5lbGVtcykKCQlyZXR1cm4gbGliYnBmX2Vy
cigtRTJCSUcpOwoKCXJldHVybiBuZWxlbXMgKiBzaXplOwp9CgppbnQgYnRmX19hbGlnbl9vZihj
b25zdCBzdHJ1Y3QgYnRmICpidGYsIF9fdTMyIGlkKQp7Cgljb25zdCBzdHJ1Y3QgYnRmX3R5cGUg
KnQgPSBidGZfX3R5cGVfYnlfaWQoYnRmLCBpZCk7CglfX3UxNiBraW5kID0gYnRmX2tpbmQodCk7
CgoJc3dpdGNoIChraW5kKSB7CgljYXNlIEJURl9LSU5EX0lOVDoKCWNhc2UgQlRGX0tJTkRfRU5V
TToKCWNhc2UgQlRGX0tJTkRfRU5VTTY0OgoJY2FzZSBCVEZfS0lORF9GTE9BVDoKCQlyZXR1cm4g
bWluKGJ0Zl9wdHJfc3ooYnRmKSwgKHNpemVfdCl0LT5zaXplKTsKCWNhc2UgQlRGX0tJTkRfUFRS
OgoJCXJldHVybiBidGZfcHRyX3N6KGJ0Zik7CgljYXNlIEJURl9LSU5EX1RZUEVERUY6CgljYXNl
IEJURl9LSU5EX1ZPTEFUSUxFOgoJY2FzZSBCVEZfS0lORF9DT05TVDoKCWNhc2UgQlRGX0tJTkRf
UkVTVFJJQ1Q6CgljYXNlIEJURl9LSU5EX1RZUEVfVEFHOgoJCXJldHVybiBidGZfX2FsaWduX29m
KGJ0ZiwgdC0+dHlwZSk7CgljYXNlIEJURl9LSU5EX0FSUkFZOgoJCXJldHVybiBidGZfX2FsaWdu
X29mKGJ0ZiwgYnRmX2FycmF5KHQpLT50eXBlKTsKCWNhc2UgQlRGX0tJTkRfU1RSVUNUOgoJY2Fz
ZSBCVEZfS0lORF9VTklPTjogewoJCWNvbnN0IHN0cnVjdCBidGZfbWVtYmVyICptID0gYnRmX21l
bWJlcnModCk7CgkJX191MTYgdmxlbiA9IGJ0Zl92bGVuKHQpOwoJCWludCBpLCBtYXhfYWxpZ24g
PSAxLCBhbGlnbjsKCgkJZm9yIChpID0gMDsgaSA8IHZsZW47IGkrKywgbSsrKSB7CgkJCWFsaWdu
ID0gYnRmX19hbGlnbl9vZihidGYsIG0tPnR5cGUpOwoJCQlpZiAoYWxpZ24gPD0gMCkKCQkJCXJl
dHVybiBsaWJicGZfZXJyKGFsaWduKTsKCQkJbWF4X2FsaWduID0gbWF4KG1heF9hbGlnbiwgYWxp
Z24pOwoKCQkJLyogaWYgZmllbGQgb2Zmc2V0IGlzbid0IGFsaWduZWQgYWNjb3JkaW5nIHRvIGZp
ZWxkCgkJCSAqIHR5cGUncyBhbGlnbm1lbnQsIHRoZW4gc3RydWN0IG11c3QgYmUgcGFja2VkCgkJ
CSAqLwoJCQlpZiAoYnRmX21lbWJlcl9iaXRmaWVsZF9zaXplKHQsIGkpID09IDAgJiYKCQkJICAg
IChtLT5vZmZzZXQgJSAoOCAqIGFsaWduKSkgIT0gMCkKCQkJCXJldHVybiAxOwoJCX0KCgkJLyog
aWYgc3RydWN0L3VuaW9uIHNpemUgaXNuJ3QgYSBtdWx0aXBsZSBvZiBpdHMgYWxpZ25tZW50LAoJ
CSAqIHRoZW4gc3RydWN0IG11c3QgYmUgcGFja2VkCgkJICovCgkJaWYgKCh0LT5zaXplICUgbWF4
X2FsaWduKSAhPSAwKQoJCQlyZXR1cm4gMTsKCgkJcmV0dXJuIG1heF9hbGlnbjsKCX0KCWRlZmF1
bHQ6CgkJcHJfd2FybigidW5zdXBwb3J0ZWQgQlRGX0tJTkQ6JXVcbiIsIGJ0Zl9raW5kKHQpKTsK
CQlyZXR1cm4gZXJybm8gPSBFSU5WQUwsIDA7Cgl9Cn0KCmludCBidGZfX3Jlc29sdmVfdHlwZShj
b25zdCBzdHJ1Y3QgYnRmICpidGYsIF9fdTMyIHR5cGVfaWQpCnsKCWNvbnN0IHN0cnVjdCBidGZf
dHlwZSAqdDsKCWludCBkZXB0aCA9IDA7CgoJdCA9IGJ0Zl9fdHlwZV9ieV9pZChidGYsIHR5cGVf
aWQpOwoJd2hpbGUgKGRlcHRoIDwgTUFYX1JFU09MVkVfREVQVEggJiYKCSAgICAgICAhYnRmX3R5
cGVfaXNfdm9pZF9vcl9udWxsKHQpICYmCgkgICAgICAgKGJ0Zl9pc19tb2QodCkgfHwgYnRmX2lz
X3R5cGVkZWYodCkgfHwgYnRmX2lzX3Zhcih0KSkpIHsKCQl0eXBlX2lkID0gdC0+dHlwZTsKCQl0
ID0gYnRmX190eXBlX2J5X2lkKGJ0ZiwgdHlwZV9pZCk7CgkJZGVwdGgrKzsKCX0KCglpZiAoZGVw
dGggPT0gTUFYX1JFU09MVkVfREVQVEggfHwgYnRmX3R5cGVfaXNfdm9pZF9vcl9udWxsKHQpKQoJ
CXJldHVybiBsaWJicGZfZXJyKC1FSU5WQUwpOwoKCXJldHVybiB0eXBlX2lkOwp9CgpfX3MzMiBi
dGZfX2ZpbmRfYnlfbmFtZShjb25zdCBzdHJ1Y3QgYnRmICpidGYsIGNvbnN0IGNoYXIgKnR5cGVf
bmFtZSkKewoJX191MzIgaSwgbnJfdHlwZXMgPSBidGZfX3R5cGVfY250KGJ0Zik7CgoJaWYgKCFz
dHJjbXAodHlwZV9uYW1lLCAidm9pZCIpKQoJCXJldHVybiAwOwoKCWZvciAoaSA9IDE7IGkgPCBu
cl90eXBlczsgaSsrKSB7CgkJY29uc3Qgc3RydWN0IGJ0Zl90eXBlICp0ID0gYnRmX190eXBlX2J5
X2lkKGJ0ZiwgaSk7CgkJY29uc3QgY2hhciAqbmFtZSA9IGJ0Zl9fbmFtZV9ieV9vZmZzZXQoYnRm
LCB0LT5uYW1lX29mZik7CgoJCWlmIChuYW1lICYmICFzdHJjbXAodHlwZV9uYW1lLCBuYW1lKSkK
CQkJcmV0dXJuIGk7Cgl9CgoJcmV0dXJuIGxpYmJwZl9lcnIoLUVOT0VOVCk7Cn0KCnN0YXRpYyBf
X3MzMiBidGZfZmluZF9ieV9uYW1lX2tpbmQoY29uc3Qgc3RydWN0IGJ0ZiAqYnRmLCBpbnQgc3Rh
cnRfaWQsCgkJCQkgICBjb25zdCBjaGFyICp0eXBlX25hbWUsIF9fdTMyIGtpbmQpCnsKCV9fdTMy
IGksIG5yX3R5cGVzID0gYnRmX190eXBlX2NudChidGYpOwoKCWlmIChraW5kID09IEJURl9LSU5E
X1VOS04gfHwgIXN0cmNtcCh0eXBlX25hbWUsICJ2b2lkIikpCgkJcmV0dXJuIDA7CgoJZm9yIChp
ID0gc3RhcnRfaWQ7IGkgPCBucl90eXBlczsgaSsrKSB7CgkJY29uc3Qgc3RydWN0IGJ0Zl90eXBl
ICp0ID0gYnRmX190eXBlX2J5X2lkKGJ0ZiwgaSk7CgkJY29uc3QgY2hhciAqbmFtZTsKCgkJaWYg
KGJ0Zl9raW5kKHQpICE9IGtpbmQpCgkJCWNvbnRpbnVlOwoJCW5hbWUgPSBidGZfX25hbWVfYnlf
b2Zmc2V0KGJ0ZiwgdC0+bmFtZV9vZmYpOwoJCWlmIChuYW1lICYmICFzdHJjbXAodHlwZV9uYW1l
LCBuYW1lKSkKCQkJcmV0dXJuIGk7Cgl9CgoJcmV0dXJuIGxpYmJwZl9lcnIoLUVOT0VOVCk7Cn0K
Cl9fczMyIGJ0Zl9fZmluZF9ieV9uYW1lX2tpbmRfb3duKGNvbnN0IHN0cnVjdCBidGYgKmJ0Ziwg
Y29uc3QgY2hhciAqdHlwZV9uYW1lLAoJCQkJIF9fdTMyIGtpbmQpCnsKCXJldHVybiBidGZfZmlu
ZF9ieV9uYW1lX2tpbmQoYnRmLCBidGYtPnN0YXJ0X2lkLCB0eXBlX25hbWUsIGtpbmQpOwp9Cgpf
X3MzMiBidGZfX2ZpbmRfYnlfbmFtZV9raW5kKGNvbnN0IHN0cnVjdCBidGYgKmJ0ZiwgY29uc3Qg
Y2hhciAqdHlwZV9uYW1lLAoJCQkgICAgIF9fdTMyIGtpbmQpCnsKCXJldHVybiBidGZfZmluZF9i
eV9uYW1lX2tpbmQoYnRmLCAxLCB0eXBlX25hbWUsIGtpbmQpOwp9CgpzdGF0aWMgYm9vbCBidGZf
aXNfbW9kaWZpYWJsZShjb25zdCBzdHJ1Y3QgYnRmICpidGYpCnsKCXJldHVybiAodm9pZCAqKWJ0
Zi0+aGRyICE9IGJ0Zi0+cmF3X2RhdGE7Cn0KCnZvaWQgYnRmX19mcmVlKHN0cnVjdCBidGYgKmJ0
ZikKewoJaWYgKElTX0VSUl9PUl9OVUxMKGJ0ZikpCgkJcmV0dXJuOwoKCWlmIChidGYtPmZkID49
IDApCgkJY2xvc2UoYnRmLT5mZCk7CgoJaWYgKGJ0Zl9pc19tb2RpZmlhYmxlKGJ0ZikpIHsKCQkv
KiBpZiBCVEYgd2FzIG1vZGlmaWVkIGFmdGVyIGxvYWRpbmcsIGl0IHdpbGwgaGF2ZSBhIHNwbGl0
CgkJICogaW4tbWVtb3J5IHJlcHJlc2VudGF0aW9uIGZvciBoZWFkZXIsIHR5cGVzLCBhbmQgc3Ry
aW5ncwoJCSAqIHNlY3Rpb25zLCBzbyB3ZSBuZWVkIHRvIGZyZWUgYWxsIG9mIHRoZW0gaW5kaXZp
ZHVhbGx5LiBJdAoJCSAqIG1pZ2h0IHN0aWxsIGhhdmUgYSBjYWNoZWQgY29udGlndW91cyByYXcg
ZGF0YSBwcmVzZW50LAoJCSAqIHdoaWNoIHdpbGwgYmUgdW5jb25kaXRpb25hbGx5IGZyZWVkIGJl
bG93LgoJCSAqLwoJCWZyZWUoYnRmLT5oZHIpOwoJCWZyZWUoYnRmLT50eXBlc19kYXRhKTsKCQlz
dHJzZXRfX2ZyZWUoYnRmLT5zdHJzX3NldCk7Cgl9CglmcmVlKGJ0Zi0+cmF3X2RhdGEpOwoJZnJl
ZShidGYtPnJhd19kYXRhX3N3YXBwZWQpOwoJZnJlZShidGYtPnR5cGVfb2Zmcyk7CglpZiAoYnRm
LT5vd25zX2Jhc2UpCgkJYnRmX19mcmVlKGJ0Zi0+YmFzZV9idGYpOwoJZnJlZShidGYpOwp9Cgpz
dGF0aWMgc3RydWN0IGJ0ZiAqYnRmX25ld19lbXB0eShzdHJ1Y3QgYnRmICpiYXNlX2J0ZikKewoJ
c3RydWN0IGJ0ZiAqYnRmOwoKCWJ0ZiA9IGNhbGxvYygxLCBzaXplb2YoKmJ0ZikpOwoJaWYgKCFi
dGYpCgkJcmV0dXJuIEVSUl9QVFIoLUVOT01FTSk7CgoJYnRmLT5ucl90eXBlcyA9IDA7CglidGYt
PnN0YXJ0X2lkID0gMTsKCWJ0Zi0+c3RhcnRfc3RyX29mZiA9IDA7CglidGYtPmZkID0gLTE7Cgli
dGYtPnB0cl9zeiA9IHNpemVvZih2b2lkICopOwoJYnRmLT5zd2FwcGVkX2VuZGlhbiA9IGZhbHNl
OwoKCWlmIChiYXNlX2J0ZikgewoJCWJ0Zi0+YmFzZV9idGYgPSBiYXNlX2J0ZjsKCQlidGYtPnN0
YXJ0X2lkID0gYnRmX190eXBlX2NudChiYXNlX2J0Zik7CgkJYnRmLT5zdGFydF9zdHJfb2ZmID0g
YmFzZV9idGYtPmhkci0+c3RyX2xlbjsKCQlidGYtPnN3YXBwZWRfZW5kaWFuID0gYmFzZV9idGYt
PnN3YXBwZWRfZW5kaWFuOwoJfQoKCS8qICsxIGZvciBlbXB0eSBzdHJpbmcgYXQgb2Zmc2V0IDAg
Ki8KCWJ0Zi0+cmF3X3NpemUgPSBzaXplb2Yoc3RydWN0IGJ0Zl9oZWFkZXIpICsgKGJhc2VfYnRm
ID8gMCA6IDEpOwoJYnRmLT5yYXdfZGF0YSA9IGNhbGxvYygxLCBidGYtPnJhd19zaXplKTsKCWlm
ICghYnRmLT5yYXdfZGF0YSkgewoJCWZyZWUoYnRmKTsKCQlyZXR1cm4gRVJSX1BUUigtRU5PTUVN
KTsKCX0KCglidGYtPmhkciA9IGJ0Zi0+cmF3X2RhdGE7CglidGYtPmhkci0+aGRyX2xlbiA9IHNp
emVvZihzdHJ1Y3QgYnRmX2hlYWRlcik7CglidGYtPmhkci0+bWFnaWMgPSBCVEZfTUFHSUM7Cgli
dGYtPmhkci0+dmVyc2lvbiA9IEJURl9WRVJTSU9OOwoKCWJ0Zi0+dHlwZXNfZGF0YSA9IGJ0Zi0+
cmF3X2RhdGEgKyBidGYtPmhkci0+aGRyX2xlbjsKCWJ0Zi0+c3Ryc19kYXRhID0gYnRmLT5yYXdf
ZGF0YSArIGJ0Zi0+aGRyLT5oZHJfbGVuOwoJYnRmLT5oZHItPnN0cl9sZW4gPSBiYXNlX2J0ZiA/
IDAgOiAxOyAvKiBlbXB0eSBzdHJpbmcgYXQgb2Zmc2V0IDAgKi8KCglyZXR1cm4gYnRmOwp9Cgpz
dHJ1Y3QgYnRmICpidGZfX25ld19lbXB0eSh2b2lkKQp7CglyZXR1cm4gbGliYnBmX3B0cihidGZf
bmV3X2VtcHR5KE5VTEwpKTsKfQoKc3RydWN0IGJ0ZiAqYnRmX19uZXdfZW1wdHlfc3BsaXQoc3Ry
dWN0IGJ0ZiAqYmFzZV9idGYpCnsKCXJldHVybiBsaWJicGZfcHRyKGJ0Zl9uZXdfZW1wdHkoYmFz
ZV9idGYpKTsKfQoKc3RhdGljIHN0cnVjdCBidGYgKmJ0Zl9uZXcoY29uc3Qgdm9pZCAqZGF0YSwg
X191MzIgc2l6ZSwgc3RydWN0IGJ0ZiAqYmFzZV9idGYpCnsKCXN0cnVjdCBidGYgKmJ0ZjsKCWlu
dCBlcnI7CgoJYnRmID0gY2FsbG9jKDEsIHNpemVvZihzdHJ1Y3QgYnRmKSk7CglpZiAoIWJ0ZikK
CQlyZXR1cm4gRVJSX1BUUigtRU5PTUVNKTsKCglidGYtPm5yX3R5cGVzID0gMDsKCWJ0Zi0+c3Rh
cnRfaWQgPSAxOwoJYnRmLT5zdGFydF9zdHJfb2ZmID0gMDsKCWJ0Zi0+ZmQgPSAtMTsKCglpZiAo
YmFzZV9idGYpIHsKCQlidGYtPmJhc2VfYnRmID0gYmFzZV9idGY7CgkJYnRmLT5zdGFydF9pZCA9
IGJ0Zl9fdHlwZV9jbnQoYmFzZV9idGYpOwoJCWJ0Zi0+c3RhcnRfc3RyX29mZiA9IGJhc2VfYnRm
LT5oZHItPnN0cl9sZW47Cgl9CgoJYnRmLT5yYXdfZGF0YSA9IG1hbGxvYyhzaXplKTsKCWlmICgh
YnRmLT5yYXdfZGF0YSkgewoJCWVyciA9IC1FTk9NRU07CgkJZ290byBkb25lOwoJfQoJbWVtY3B5
KGJ0Zi0+cmF3X2RhdGEsIGRhdGEsIHNpemUpOwoJYnRmLT5yYXdfc2l6ZSA9IHNpemU7CgoJYnRm
LT5oZHIgPSBidGYtPnJhd19kYXRhOwoJZXJyID0gYnRmX3BhcnNlX2hkcihidGYpOwoJaWYgKGVy
cikKCQlnb3RvIGRvbmU7CgoJYnRmLT5zdHJzX2RhdGEgPSBidGYtPnJhd19kYXRhICsgYnRmLT5o
ZHItPmhkcl9sZW4gKyBidGYtPmhkci0+c3RyX29mZjsKCWJ0Zi0+dHlwZXNfZGF0YSA9IGJ0Zi0+
cmF3X2RhdGEgKyBidGYtPmhkci0+aGRyX2xlbiArIGJ0Zi0+aGRyLT50eXBlX29mZjsKCgllcnIg
PSBidGZfcGFyc2Vfc3RyX3NlYyhidGYpOwoJZXJyID0gZXJyID86IGJ0Zl9wYXJzZV90eXBlX3Nl
YyhidGYpOwoJZXJyID0gZXJyID86IGJ0Zl9zYW5pdHlfY2hlY2soYnRmKTsKCWlmIChlcnIpCgkJ
Z290byBkb25lOwoKZG9uZToKCWlmIChlcnIpIHsKCQlidGZfX2ZyZWUoYnRmKTsKCQlyZXR1cm4g
RVJSX1BUUihlcnIpOwoJfQoKCXJldHVybiBidGY7Cn0KCnN0cnVjdCBidGYgKmJ0Zl9fbmV3KGNv
bnN0IHZvaWQgKmRhdGEsIF9fdTMyIHNpemUpCnsKCXJldHVybiBsaWJicGZfcHRyKGJ0Zl9uZXco
ZGF0YSwgc2l6ZSwgTlVMTCkpOwp9CgpzdHJ1Y3QgYnRmICpidGZfX25ld19zcGxpdChjb25zdCB2
b2lkICpkYXRhLCBfX3UzMiBzaXplLCBzdHJ1Y3QgYnRmICpiYXNlX2J0ZikKewoJcmV0dXJuIGxp
YmJwZl9wdHIoYnRmX25ldyhkYXRhLCBzaXplLCBiYXNlX2J0ZikpOwp9CgpzdHJ1Y3QgYnRmX2Vs
Zl9zZWNzIHsKCUVsZl9EYXRhICpidGZfZGF0YTsKCUVsZl9EYXRhICpidGZfZXh0X2RhdGE7CglF
bGZfRGF0YSAqYnRmX2Jhc2VfZGF0YTsKfTsKCnN0YXRpYyBpbnQgYnRmX2ZpbmRfZWxmX3NlY3Rp
b25zKEVsZiAqZWxmLCBjb25zdCBjaGFyICpwYXRoLCBzdHJ1Y3QgYnRmX2VsZl9zZWNzICpzZWNz
KQp7CglFbGZfU2NuICpzY24gPSBOVUxMOwoJRWxmX0RhdGEgKmRhdGE7CglHRWxmX0VoZHIgZWhk
cjsKCXNpemVfdCBzaHN0cm5keDsKCWludCBpZHggPSAwOwoKCWlmICghZ2VsZl9nZXRlaGRyKGVs
ZiwgJmVoZHIpKSB7CgkJcHJfd2FybigiZmFpbGVkIHRvIGdldCBFSERSIGZyb20gJXNcbiIsIHBh
dGgpOwoJCWdvdG8gZXJyOwoJfQoKCWlmIChlbGZfZ2V0c2hkcnN0cm5keChlbGYsICZzaHN0cm5k
eCkpIHsKCQlwcl93YXJuKCJmYWlsZWQgdG8gZ2V0IHNlY3Rpb24gbmFtZXMgc2VjdGlvbiBpbmRl
eCBmb3IgJXNcbiIsCgkJCXBhdGgpOwoJCWdvdG8gZXJyOwoJfQoKCWlmICghZWxmX3Jhd2RhdGEo
ZWxmX2dldHNjbihlbGYsIHNoc3RybmR4KSwgTlVMTCkpIHsKCQlwcl93YXJuKCJmYWlsZWQgdG8g
Z2V0IGVfc2hzdHJuZHggZnJvbSAlc1xuIiwgcGF0aCk7CgkJZ290byBlcnI7Cgl9CgoJd2hpbGUg
KChzY24gPSBlbGZfbmV4dHNjbihlbGYsIHNjbikpICE9IE5VTEwpIHsKCQlFbGZfRGF0YSAqKmZp
ZWxkOwoJCUdFbGZfU2hkciBzaDsKCQljaGFyICpuYW1lOwoKCQlpZHgrKzsKCQlpZiAoZ2VsZl9n
ZXRzaGRyKHNjbiwgJnNoKSAhPSAmc2gpIHsKCQkJcHJfd2FybigiZmFpbGVkIHRvIGdldCBzZWN0
aW9uKCVkKSBoZWFkZXIgZnJvbSAlc1xuIiwKCQkJCWlkeCwgcGF0aCk7CgkJCWdvdG8gZXJyOwoJ
CX0KCQluYW1lID0gZWxmX3N0cnB0cihlbGYsIHNoc3RybmR4LCBzaC5zaF9uYW1lKTsKCQlpZiAo
IW5hbWUpIHsKCQkJcHJfd2FybigiZmFpbGVkIHRvIGdldCBzZWN0aW9uKCVkKSBuYW1lIGZyb20g
JXNcbiIsCgkJCQlpZHgsIHBhdGgpOwoJCQlnb3RvIGVycjsKCQl9CgoJCWlmIChzdHJjbXAobmFt
ZSwgQlRGX0VMRl9TRUMpID09IDApCgkJCWZpZWxkID0gJnNlY3MtPmJ0Zl9kYXRhOwoJCWVsc2Ug
aWYgKHN0cmNtcChuYW1lLCBCVEZfRVhUX0VMRl9TRUMpID09IDApCgkJCWZpZWxkID0gJnNlY3Mt
PmJ0Zl9leHRfZGF0YTsKCQllbHNlIGlmIChzdHJjbXAobmFtZSwgQlRGX0JBU0VfRUxGX1NFQykg
PT0gMCkKCQkJZmllbGQgPSAmc2Vjcy0+YnRmX2Jhc2VfZGF0YTsKCQllbHNlCgkJCWNvbnRpbnVl
OwoKCQlkYXRhID0gZWxmX2dldGRhdGEoc2NuLCAwKTsKCQlpZiAoIWRhdGEpIHsKCQkJcHJfd2Fy
bigiZmFpbGVkIHRvIGdldCBzZWN0aW9uKCVkLCAlcykgZGF0YSBmcm9tICVzXG4iLAoJCQkJaWR4
LCBuYW1lLCBwYXRoKTsKCQkJZ290byBlcnI7CgkJfQoJCSpmaWVsZCA9IGRhdGE7Cgl9CgoJcmV0
dXJuIDA7CgplcnI6CglyZXR1cm4gLUxJQkJQRl9FUlJOT19fRk9STUFUOwp9CgpzdGF0aWMgc3Ry
dWN0IGJ0ZiAqYnRmX3BhcnNlX2VsZihjb25zdCBjaGFyICpwYXRoLCBzdHJ1Y3QgYnRmICpiYXNl
X2J0ZiwKCQkJCSBzdHJ1Y3QgYnRmX2V4dCAqKmJ0Zl9leHQpCnsKCXN0cnVjdCBidGZfZWxmX3Nl
Y3Mgc2VjcyA9IHt9OwoJc3RydWN0IGJ0ZiAqZGlzdF9iYXNlX2J0ZiA9IE5VTEw7CglzdHJ1Y3Qg
YnRmICpidGYgPSBOVUxMOwoJaW50IGVyciA9IDAsIGZkID0gLTE7CglFbGYgKmVsZiA9IE5VTEw7
CgoJaWYgKGVsZl92ZXJzaW9uKEVWX0NVUlJFTlQpID09IEVWX05PTkUpIHsKCQlwcl93YXJuKCJm
YWlsZWQgdG8gaW5pdCBsaWJlbGYgZm9yICVzXG4iLCBwYXRoKTsKCQlyZXR1cm4gRVJSX1BUUigt
TElCQlBGX0VSUk5PX19MSUJFTEYpOwoJfQoKCWZkID0gb3BlbihwYXRoLCBPX1JET05MWSB8IE9f
Q0xPRVhFQyk7CglpZiAoZmQgPCAwKSB7CgkJZXJyID0gLWVycm5vOwoJCXByX3dhcm4oImZhaWxl
ZCB0byBvcGVuICVzOiAlc1xuIiwgcGF0aCwgZXJyc3RyKGVycikpOwoJCXJldHVybiBFUlJfUFRS
KGVycik7Cgl9CgoJZWxmID0gZWxmX2JlZ2luKGZkLCBFTEZfQ19SRUFELCBOVUxMKTsKCWlmICgh
ZWxmKSB7CgkJZXJyID0gLUxJQkJQRl9FUlJOT19fRk9STUFUOwoJCXByX3dhcm4oImZhaWxlZCB0
byBvcGVuICVzIGFzIEVMRiBmaWxlXG4iLCBwYXRoKTsKCQlnb3RvIGRvbmU7Cgl9CgoJZXJyID0g
YnRmX2ZpbmRfZWxmX3NlY3Rpb25zKGVsZiwgcGF0aCwgJnNlY3MpOwoJaWYgKGVycikKCQlnb3Rv
IGRvbmU7CgoJaWYgKCFzZWNzLmJ0Zl9kYXRhKSB7CgkJcHJfd2FybigiZmFpbGVkIHRvIGZpbmQg
JyVzJyBFTEYgc2VjdGlvbiBpbiAlc1xuIiwgQlRGX0VMRl9TRUMsIHBhdGgpOwoJCWVyciA9IC1F
Tk9EQVRBOwoJCWdvdG8gZG9uZTsKCX0KCglpZiAoc2Vjcy5idGZfYmFzZV9kYXRhKSB7CgkJZGlz
dF9iYXNlX2J0ZiA9IGJ0Zl9uZXcoc2Vjcy5idGZfYmFzZV9kYXRhLT5kX2J1Ziwgc2Vjcy5idGZf
YmFzZV9kYXRhLT5kX3NpemUsCgkJCQkJTlVMTCk7CgkJaWYgKElTX0VSUihkaXN0X2Jhc2VfYnRm
KSkgewoJCQllcnIgPSBQVFJfRVJSKGRpc3RfYmFzZV9idGYpOwoJCQlkaXN0X2Jhc2VfYnRmID0g
TlVMTDsKCQkJZ290byBkb25lOwoJCX0KCX0KCglidGYgPSBidGZfbmV3KHNlY3MuYnRmX2RhdGEt
PmRfYnVmLCBzZWNzLmJ0Zl9kYXRhLT5kX3NpemUsCgkJICAgICAgZGlzdF9iYXNlX2J0ZiA/OiBi
YXNlX2J0Zik7CglpZiAoSVNfRVJSKGJ0ZikpIHsKCQllcnIgPSBQVFJfRVJSKGJ0Zik7CgkJZ290
byBkb25lOwoJfQoJaWYgKGRpc3RfYmFzZV9idGYgJiYgYmFzZV9idGYpIHsKCQllcnIgPSBidGZf
X3JlbG9jYXRlKGJ0ZiwgYmFzZV9idGYpOwoJCWlmIChlcnIpCgkJCWdvdG8gZG9uZTsKCQlidGZf
X2ZyZWUoZGlzdF9iYXNlX2J0Zik7CgkJZGlzdF9iYXNlX2J0ZiA9IE5VTEw7Cgl9CgoJaWYgKGRp
c3RfYmFzZV9idGYpCgkJYnRmLT5vd25zX2Jhc2UgPSB0cnVlOwoKCXN3aXRjaCAoZ2VsZl9nZXRj
bGFzcyhlbGYpKSB7CgljYXNlIEVMRkNMQVNTMzI6CgkJYnRmX19zZXRfcG9pbnRlcl9zaXplKGJ0
ZiwgNCk7CgkJYnJlYWs7CgljYXNlIEVMRkNMQVNTNjQ6CgkJYnRmX19zZXRfcG9pbnRlcl9zaXpl
KGJ0ZiwgOCk7CgkJYnJlYWs7CglkZWZhdWx0OgoJCXByX3dhcm4oImZhaWxlZCB0byBnZXQgRUxG
IGNsYXNzIChiaXRuZXNzKSBmb3IgJXNcbiIsIHBhdGgpOwoJCWJyZWFrOwoJfQoKCWlmIChidGZf
ZXh0ICYmIHNlY3MuYnRmX2V4dF9kYXRhKSB7CgkJKmJ0Zl9leHQgPSBidGZfZXh0X19uZXcoc2Vj
cy5idGZfZXh0X2RhdGEtPmRfYnVmLCBzZWNzLmJ0Zl9leHRfZGF0YS0+ZF9zaXplKTsKCQlpZiAo
SVNfRVJSKCpidGZfZXh0KSkgewoJCQllcnIgPSBQVFJfRVJSKCpidGZfZXh0KTsKCQkJZ290byBk
b25lOwoJCX0KCX0gZWxzZSBpZiAoYnRmX2V4dCkgewoJCSpidGZfZXh0ID0gTlVMTDsKCX0KZG9u
ZToKCWlmIChlbGYpCgkJZWxmX2VuZChlbGYpOwoJY2xvc2UoZmQpOwoKCWlmICghZXJyKQoJCXJl
dHVybiBidGY7CgoJaWYgKGJ0Zl9leHQpCgkJYnRmX2V4dF9fZnJlZSgqYnRmX2V4dCk7CglidGZf
X2ZyZWUoZGlzdF9iYXNlX2J0Zik7CglidGZfX2ZyZWUoYnRmKTsKCglyZXR1cm4gRVJSX1BUUihl
cnIpOwp9CgpzdHJ1Y3QgYnRmICpidGZfX3BhcnNlX2VsZihjb25zdCBjaGFyICpwYXRoLCBzdHJ1
Y3QgYnRmX2V4dCAqKmJ0Zl9leHQpCnsKCXJldHVybiBsaWJicGZfcHRyKGJ0Zl9wYXJzZV9lbGYo
cGF0aCwgTlVMTCwgYnRmX2V4dCkpOwp9CgpzdHJ1Y3QgYnRmICpidGZfX3BhcnNlX2VsZl9zcGxp
dChjb25zdCBjaGFyICpwYXRoLCBzdHJ1Y3QgYnRmICpiYXNlX2J0ZikKewoJcmV0dXJuIGxpYmJw
Zl9wdHIoYnRmX3BhcnNlX2VsZihwYXRoLCBiYXNlX2J0ZiwgTlVMTCkpOwp9CgpzdGF0aWMgc3Ry
dWN0IGJ0ZiAqYnRmX3BhcnNlX3Jhdyhjb25zdCBjaGFyICpwYXRoLCBzdHJ1Y3QgYnRmICpiYXNl
X2J0ZikKewoJc3RydWN0IGJ0ZiAqYnRmID0gTlVMTDsKCXZvaWQgKmRhdGEgPSBOVUxMOwoJRklM
RSAqZiA9IE5VTEw7CglfX3UxNiBtYWdpYzsKCWludCBlcnIgPSAwOwoJbG9uZyBzejsKCglmID0g
Zm9wZW4ocGF0aCwgInJiZSIpOwoJaWYgKCFmKSB7CgkJZXJyID0gLWVycm5vOwoJCWdvdG8gZXJy
X291dDsKCX0KCgkvKiBjaGVjayBCVEYgbWFnaWMgKi8KCWlmIChmcmVhZCgmbWFnaWMsIDEsIHNp
emVvZihtYWdpYyksIGYpIDwgc2l6ZW9mKG1hZ2ljKSkgewoJCWVyciA9IC1FSU87CgkJZ290byBl
cnJfb3V0OwoJfQoJaWYgKG1hZ2ljICE9IEJURl9NQUdJQyAmJiBtYWdpYyAhPSBic3dhcF8xNihC
VEZfTUFHSUMpKSB7CgkJLyogZGVmaW5pdGVseSBub3QgYSByYXcgQlRGICovCgkJZXJyID0gLUVQ
Uk9UTzsKCQlnb3RvIGVycl9vdXQ7Cgl9CgoJLyogZ2V0IGZpbGUgc2l6ZSAqLwoJaWYgKGZzZWVr
KGYsIDAsIFNFRUtfRU5EKSkgewoJCWVyciA9IC1lcnJubzsKCQlnb3RvIGVycl9vdXQ7Cgl9Cglz
eiA9IGZ0ZWxsKGYpOwoJaWYgKHN6IDwgMCkgewoJCWVyciA9IC1lcnJubzsKCQlnb3RvIGVycl9v
dXQ7Cgl9CgkvKiByZXdpbmQgdG8gdGhlIHN0YXJ0ICovCglpZiAoZnNlZWsoZiwgMCwgU0VFS19T
RVQpKSB7CgkJZXJyID0gLWVycm5vOwoJCWdvdG8gZXJyX291dDsKCX0KCgkvKiBwcmUtYWxsb2Mg
bWVtb3J5IGFuZCByZWFkIGFsbCBvZiBCVEYgZGF0YSAqLwoJZGF0YSA9IG1hbGxvYyhzeik7Cglp
ZiAoIWRhdGEpIHsKCQllcnIgPSAtRU5PTUVNOwoJCWdvdG8gZXJyX291dDsKCX0KCWlmIChmcmVh
ZChkYXRhLCAxLCBzeiwgZikgPCBzeikgewoJCWVyciA9IC1FSU87CgkJZ290byBlcnJfb3V0OwoJ
fQoKCS8qIGZpbmFsbHkgcGFyc2UgQlRGIGRhdGEgKi8KCWJ0ZiA9IGJ0Zl9uZXcoZGF0YSwgc3os
IGJhc2VfYnRmKTsKCmVycl9vdXQ6CglmcmVlKGRhdGEpOwoJaWYgKGYpCgkJZmNsb3NlKGYpOwoJ
cmV0dXJuIGVyciA/IEVSUl9QVFIoZXJyKSA6IGJ0ZjsKfQoKc3RydWN0IGJ0ZiAqYnRmX19wYXJz
ZV9yYXcoY29uc3QgY2hhciAqcGF0aCkKewoJcmV0dXJuIGxpYmJwZl9wdHIoYnRmX3BhcnNlX3Jh
dyhwYXRoLCBOVUxMKSk7Cn0KCnN0cnVjdCBidGYgKmJ0Zl9fcGFyc2VfcmF3X3NwbGl0KGNvbnN0
IGNoYXIgKnBhdGgsIHN0cnVjdCBidGYgKmJhc2VfYnRmKQp7CglyZXR1cm4gbGliYnBmX3B0cihi
dGZfcGFyc2VfcmF3KHBhdGgsIGJhc2VfYnRmKSk7Cn0KCnN0YXRpYyBzdHJ1Y3QgYnRmICpidGZf
cGFyc2UoY29uc3QgY2hhciAqcGF0aCwgc3RydWN0IGJ0ZiAqYmFzZV9idGYsIHN0cnVjdCBidGZf
ZXh0ICoqYnRmX2V4dCkKewoJc3RydWN0IGJ0ZiAqYnRmOwoJaW50IGVycjsKCglpZiAoYnRmX2V4
dCkKCQkqYnRmX2V4dCA9IE5VTEw7CgoJYnRmID0gYnRmX3BhcnNlX3JhdyhwYXRoLCBiYXNlX2J0
Zik7CgllcnIgPSBsaWJicGZfZ2V0X2Vycm9yKGJ0Zik7CglpZiAoIWVycikKCQlyZXR1cm4gYnRm
OwoJaWYgKGVyciAhPSAtRVBST1RPKQoJCXJldHVybiBFUlJfUFRSKGVycik7CglyZXR1cm4gYnRm
X3BhcnNlX2VsZihwYXRoLCBiYXNlX2J0ZiwgYnRmX2V4dCk7Cn0KCnN0cnVjdCBidGYgKmJ0Zl9f
cGFyc2UoY29uc3QgY2hhciAqcGF0aCwgc3RydWN0IGJ0Zl9leHQgKipidGZfZXh0KQp7CglyZXR1
cm4gbGliYnBmX3B0cihidGZfcGFyc2UocGF0aCwgTlVMTCwgYnRmX2V4dCkpOwp9CgpzdHJ1Y3Qg
YnRmICpidGZfX3BhcnNlX3NwbGl0KGNvbnN0IGNoYXIgKnBhdGgsIHN0cnVjdCBidGYgKmJhc2Vf
YnRmKQp7CglyZXR1cm4gbGliYnBmX3B0cihidGZfcGFyc2UocGF0aCwgYmFzZV9idGYsIE5VTEwp
KTsKfQoKc3RhdGljIHZvaWQgKmJ0Zl9nZXRfcmF3X2RhdGEoY29uc3Qgc3RydWN0IGJ0ZiAqYnRm
LCBfX3UzMiAqc2l6ZSwgYm9vbCBzd2FwX2VuZGlhbik7CgppbnQgYnRmX2xvYWRfaW50b19rZXJu
ZWwoc3RydWN0IGJ0ZiAqYnRmLAoJCQkgY2hhciAqbG9nX2J1Ziwgc2l6ZV90IGxvZ19zeiwgX191
MzIgbG9nX2xldmVsLAoJCQkgaW50IHRva2VuX2ZkKQp7CglMSUJCUEZfT1BUUyhicGZfYnRmX2xv
YWRfb3B0cywgb3B0cyk7CglfX3UzMiBidWZfc3ogPSAwLCByYXdfc2l6ZTsKCWNoYXIgKmJ1ZiA9
IE5VTEwsICp0bXA7Cgl2b2lkICpyYXdfZGF0YTsKCWludCBlcnIgPSAwOwoKCWlmIChidGYtPmZk
ID49IDApCgkJcmV0dXJuIGxpYmJwZl9lcnIoLUVFWElTVCk7CglpZiAobG9nX3N6ICYmICFsb2df
YnVmKQoJCXJldHVybiBsaWJicGZfZXJyKC1FSU5WQUwpOwoKCS8qIGNhY2hlIG5hdGl2ZSByYXcg
ZGF0YSByZXByZXNlbnRhdGlvbiAqLwoJcmF3X2RhdGEgPSBidGZfZ2V0X3Jhd19kYXRhKGJ0Ziwg
JnJhd19zaXplLCBmYWxzZSk7CglpZiAoIXJhd19kYXRhKSB7CgkJZXJyID0gLUVOT01FTTsKCQln
b3RvIGRvbmU7Cgl9CglidGYtPnJhd19zaXplID0gcmF3X3NpemU7CglidGYtPnJhd19kYXRhID0g
cmF3X2RhdGE7CgpyZXRyeV9sb2FkOgoJLyogaWYgbG9nX2xldmVsIGlzIDAsIHdlIHdvbid0IHBy
b3ZpZGUgbG9nX2J1Zi9sb2dfc2l6ZSB0byB0aGUga2VybmVsLAoJICogaW5pdGlhbGx5LiBPbmx5
IGlmIEJURiBsb2FkaW5nIGZhaWxzLCB3ZSBidW1wIGxvZ19sZXZlbCB0byAxIGFuZAoJICogcmV0
cnksIHVzaW5nIGVpdGhlciBhdXRvLWFsbG9jYXRlZCBvciBjdXN0b20gbG9nX2J1Zi4gVGhpcyB3
YXkKCSAqIG5vbi1OVUxMIGN1c3RvbSBsb2dfYnVmIHByb3ZpZGVzIGEgYnVmZmVyIGp1c3QgaW4g
Y2FzZSwgYnV0IGhvcGVzCgkgKiBmb3Igc3VjY2Vzc2Z1bCBsb2FkIGFuZCBubyBuZWVkIGZvciBs
b2dfYnVmLgoJICovCglpZiAobG9nX2xldmVsKSB7CgkJLyogaWYgY2FsbGVyIGRpZG4ndCBwcm92
aWRlIGN1c3RvbSBsb2dfYnVmLCB3ZSdsbCBrZWVwCgkJICogYWxsb2NhdGluZyBvdXIgb3duIHBy
b2dyZXNzaXZlbHkgYmlnZ2VyIGJ1ZmZlcnMgZm9yIEJURgoJCSAqIHZlcmlmaWNhdGlvbiBsb2cK
CQkgKi8KCQlpZiAoIWxvZ19idWYpIHsKCQkJYnVmX3N6ID0gbWF4KChfX3UzMilCUEZfTE9HX0JV
Rl9TSVpFLCBidWZfc3ogKiAyKTsKCQkJdG1wID0gcmVhbGxvYyhidWYsIGJ1Zl9zeik7CgkJCWlm
ICghdG1wKSB7CgkJCQllcnIgPSAtRU5PTUVNOwoJCQkJZ290byBkb25lOwoJCQl9CgkJCWJ1ZiA9
IHRtcDsKCQkJYnVmWzBdID0gJ1wwJzsKCQl9CgoJCW9wdHMubG9nX2J1ZiA9IGxvZ19idWYgPyBs
b2dfYnVmIDogYnVmOwoJCW9wdHMubG9nX3NpemUgPSBsb2dfYnVmID8gbG9nX3N6IDogYnVmX3N6
OwoJCW9wdHMubG9nX2xldmVsID0gbG9nX2xldmVsOwoJfQoKCW9wdHMudG9rZW5fZmQgPSB0b2tl
bl9mZDsKCWlmICh0b2tlbl9mZCkKCQlvcHRzLmJ0Zl9mbGFncyB8PSBCUEZfRl9UT0tFTl9GRDsK
CglidGYtPmZkID0gYnBmX2J0Zl9sb2FkKHJhd19kYXRhLCByYXdfc2l6ZSwgJm9wdHMpOwoJaWYg
KGJ0Zi0+ZmQgPCAwKSB7CgkJLyogdGltZSB0byB0dXJuIG9uIHZlcmJvc2UgbW9kZSBhbmQgdHJ5
IGFnYWluICovCgkJaWYgKGxvZ19sZXZlbCA9PSAwKSB7CgkJCWxvZ19sZXZlbCA9IDE7CgkJCWdv
dG8gcmV0cnlfbG9hZDsKCQl9CgkJLyogb25seSByZXRyeSBpZiBjYWxsZXIgZGlkbid0IHByb3Zp
ZGUgY3VzdG9tIGxvZ19idWYsIGJ1dAoJCSAqIG1ha2Ugc3VyZSB3ZSBjYW4gbmV2ZXIgb3ZlcmZs
b3cgYnVmX3N6CgkJICovCgkJaWYgKCFsb2dfYnVmICYmIGVycm5vID09IEVOT1NQQyAmJiBidWZf
c3ogPD0gVUlOVF9NQVggLyAyKQoJCQlnb3RvIHJldHJ5X2xvYWQ7CgoJCWVyciA9IC1lcnJubzsK
CQlwcl93YXJuKCJCVEYgbG9hZGluZyBlcnJvcjogJXNcbiIsIGVycnN0cihlcnIpKTsKCQkvKiBk
b24ndCBwcmludCBvdXQgY29udGVudHMgb2YgY3VzdG9tIGxvZ19idWYgKi8KCQlpZiAoIWxvZ19i
dWYgJiYgYnVmWzBdKQoJCQlwcl93YXJuKCItLSBCRUdJTiBCVEYgTE9BRCBMT0cgLS0tXG4lc1xu
LS0gRU5EIEJURiBMT0FEIExPRyAtLVxuIiwgYnVmKTsKCX0KCmRvbmU6CglmcmVlKGJ1Zik7Cgly
ZXR1cm4gbGliYnBmX2VycihlcnIpOwp9CgppbnQgYnRmX19sb2FkX2ludG9fa2VybmVsKHN0cnVj
dCBidGYgKmJ0ZikKewoJcmV0dXJuIGJ0Zl9sb2FkX2ludG9fa2VybmVsKGJ0ZiwgTlVMTCwgMCwg
MCwgMCk7Cn0KCmludCBidGZfX2ZkKGNvbnN0IHN0cnVjdCBidGYgKmJ0ZikKewoJcmV0dXJuIGJ0
Zi0+ZmQ7Cn0KCnZvaWQgYnRmX19zZXRfZmQoc3RydWN0IGJ0ZiAqYnRmLCBpbnQgZmQpCnsKCWJ0
Zi0+ZmQgPSBmZDsKfQoKc3RhdGljIGNvbnN0IHZvaWQgKmJ0Zl9zdHJzX2RhdGEoY29uc3Qgc3Ry
dWN0IGJ0ZiAqYnRmKQp7CglyZXR1cm4gYnRmLT5zdHJzX2RhdGEgPyBidGYtPnN0cnNfZGF0YSA6
IHN0cnNldF9fZGF0YShidGYtPnN0cnNfc2V0KTsKfQoKc3RhdGljIHZvaWQgKmJ0Zl9nZXRfcmF3
X2RhdGEoY29uc3Qgc3RydWN0IGJ0ZiAqYnRmLCBfX3UzMiAqc2l6ZSwgYm9vbCBzd2FwX2VuZGlh
bikKewoJc3RydWN0IGJ0Zl9oZWFkZXIgKmhkciA9IGJ0Zi0+aGRyOwoJc3RydWN0IGJ0Zl90eXBl
ICp0OwoJdm9pZCAqZGF0YSwgKnA7CglfX3UzMiBkYXRhX3N6OwoJaW50IGk7CgoJZGF0YSA9IHN3
YXBfZW5kaWFuID8gYnRmLT5yYXdfZGF0YV9zd2FwcGVkIDogYnRmLT5yYXdfZGF0YTsKCWlmIChk
YXRhKSB7CgkJKnNpemUgPSBidGYtPnJhd19zaXplOwoJCXJldHVybiBkYXRhOwoJfQoKCWRhdGFf
c3ogPSBoZHItPmhkcl9sZW4gKyBoZHItPnR5cGVfbGVuICsgaGRyLT5zdHJfbGVuOwoJZGF0YSA9
IGNhbGxvYygxLCBkYXRhX3N6KTsKCWlmICghZGF0YSkKCQlyZXR1cm4gTlVMTDsKCXAgPSBkYXRh
OwoKCW1lbWNweShwLCBoZHIsIGhkci0+aGRyX2xlbik7CglpZiAoc3dhcF9lbmRpYW4pCgkJYnRm
X2Jzd2FwX2hkcihwKTsKCXAgKz0gaGRyLT5oZHJfbGVuOwoKCW1lbWNweShwLCBidGYtPnR5cGVz
X2RhdGEsIGhkci0+dHlwZV9sZW4pOwoJaWYgKHN3YXBfZW5kaWFuKSB7CgkJZm9yIChpID0gMDsg
aSA8IGJ0Zi0+bnJfdHlwZXM7IGkrKykgewoJCQl0ID0gcCArIGJ0Zi0+dHlwZV9vZmZzW2ldOwoJ
CQkvKiBidGZfYnN3YXBfdHlwZV9yZXN0KCkgcmVsaWVzIG9uIG5hdGl2ZSB0LT5pbmZvLCBzbwoJ
CQkgKiB3ZSBzd2FwIGJhc2UgdHlwZSBpbmZvIGFmdGVyIHdlIHN3YXBwZWQgYWxsIHRoZQoJCQkg
KiBhZGRpdGlvbmFsIGluZm9ybWF0aW9uCgkJCSAqLwoJCQlpZiAoYnRmX2Jzd2FwX3R5cGVfcmVz
dCh0KSkKCQkJCWdvdG8gZXJyX291dDsKCQkJYnRmX2Jzd2FwX3R5cGVfYmFzZSh0KTsKCQl9Cgl9
CglwICs9IGhkci0+dHlwZV9sZW47CgoJbWVtY3B5KHAsIGJ0Zl9zdHJzX2RhdGEoYnRmKSwgaGRy
LT5zdHJfbGVuKTsKCXAgKz0gaGRyLT5zdHJfbGVuOwoKCSpzaXplID0gZGF0YV9zejsKCXJldHVy
biBkYXRhOwplcnJfb3V0OgoJZnJlZShkYXRhKTsKCXJldHVybiBOVUxMOwp9Cgpjb25zdCB2b2lk
ICpidGZfX3Jhd19kYXRhKGNvbnN0IHN0cnVjdCBidGYgKmJ0Zl9ybywgX191MzIgKnNpemUpCnsK
CXN0cnVjdCBidGYgKmJ0ZiA9IChzdHJ1Y3QgYnRmICopYnRmX3JvOwoJX191MzIgZGF0YV9zejsK
CXZvaWQgKmRhdGE7CgoJZGF0YSA9IGJ0Zl9nZXRfcmF3X2RhdGEoYnRmLCAmZGF0YV9zeiwgYnRm
LT5zd2FwcGVkX2VuZGlhbik7CglpZiAoIWRhdGEpCgkJcmV0dXJuIGVycm5vID0gRU5PTUVNLCBO
VUxMOwoKCWJ0Zi0+cmF3X3NpemUgPSBkYXRhX3N6OwoJaWYgKGJ0Zi0+c3dhcHBlZF9lbmRpYW4p
CgkJYnRmLT5yYXdfZGF0YV9zd2FwcGVkID0gZGF0YTsKCWVsc2UKCQlidGYtPnJhd19kYXRhID0g
ZGF0YTsKCSpzaXplID0gZGF0YV9zejsKCXJldHVybiBkYXRhOwp9CgpfX2F0dHJpYnV0ZV9fKChh
bGlhcygiYnRmX19yYXdfZGF0YSIpKSkKY29uc3Qgdm9pZCAqYnRmX19nZXRfcmF3X2RhdGEoY29u
c3Qgc3RydWN0IGJ0ZiAqYnRmLCBfX3UzMiAqc2l6ZSk7Cgpjb25zdCBjaGFyICpidGZfX3N0cl9i
eV9vZmZzZXQoY29uc3Qgc3RydWN0IGJ0ZiAqYnRmLCBfX3UzMiBvZmZzZXQpCnsKCWlmIChvZmZz
ZXQgPCBidGYtPnN0YXJ0X3N0cl9vZmYpCgkJcmV0dXJuIGJ0Zl9fc3RyX2J5X29mZnNldChidGYt
PmJhc2VfYnRmLCBvZmZzZXQpOwoJZWxzZSBpZiAob2Zmc2V0IC0gYnRmLT5zdGFydF9zdHJfb2Zm
IDwgYnRmLT5oZHItPnN0cl9sZW4pCgkJcmV0dXJuIGJ0Zl9zdHJzX2RhdGEoYnRmKSArIChvZmZz
ZXQgLSBidGYtPnN0YXJ0X3N0cl9vZmYpOwoJZWxzZQoJCXJldHVybiBlcnJubyA9IEVJTlZBTCwg
TlVMTDsKfQoKY29uc3QgY2hhciAqYnRmX19uYW1lX2J5X29mZnNldChjb25zdCBzdHJ1Y3QgYnRm
ICpidGYsIF9fdTMyIG9mZnNldCkKewoJcmV0dXJuIGJ0Zl9fc3RyX2J5X29mZnNldChidGYsIG9m
ZnNldCk7Cn0KCnN0cnVjdCBidGYgKmJ0Zl9nZXRfZnJvbV9mZChpbnQgYnRmX2ZkLCBzdHJ1Y3Qg
YnRmICpiYXNlX2J0ZikKewoJc3RydWN0IGJwZl9idGZfaW5mbyBidGZfaW5mbzsKCV9fdTMyIGxl
biA9IHNpemVvZihidGZfaW5mbyk7CglfX3UzMiBsYXN0X3NpemU7CglzdHJ1Y3QgYnRmICpidGY7
Cgl2b2lkICpwdHI7CglpbnQgZXJyOwoKCS8qIHdlIHdvbid0IGtub3cgYnRmX3NpemUgdW50aWwg
d2UgY2FsbCBicGZfYnRmX2dldF9pbmZvX2J5X2ZkKCkuIHNvCgkgKiBsZXQncyBzdGFydCB3aXRo
IGEgc2FuZSBkZWZhdWx0IC0gNEtpQiBoZXJlIC0gYW5kIHJlc2l6ZSBpdCBvbmx5IGlmCgkgKiBi
cGZfYnRmX2dldF9pbmZvX2J5X2ZkKCkgbmVlZHMgYSBiaWdnZXIgYnVmZmVyLgoJICovCglsYXN0
X3NpemUgPSA0MDk2OwoJcHRyID0gbWFsbG9jKGxhc3Rfc2l6ZSk7CglpZiAoIXB0cikKCQlyZXR1
cm4gRVJSX1BUUigtRU5PTUVNKTsKCgltZW1zZXQoJmJ0Zl9pbmZvLCAwLCBzaXplb2YoYnRmX2lu
Zm8pKTsKCWJ0Zl9pbmZvLmJ0ZiA9IHB0cl90b191NjQocHRyKTsKCWJ0Zl9pbmZvLmJ0Zl9zaXpl
ID0gbGFzdF9zaXplOwoJZXJyID0gYnBmX2J0Zl9nZXRfaW5mb19ieV9mZChidGZfZmQsICZidGZf
aW5mbywgJmxlbik7CgoJaWYgKCFlcnIgJiYgYnRmX2luZm8uYnRmX3NpemUgPiBsYXN0X3NpemUp
IHsKCQl2b2lkICp0ZW1wX3B0cjsKCgkJbGFzdF9zaXplID0gYnRmX2luZm8uYnRmX3NpemU7CgkJ
dGVtcF9wdHIgPSByZWFsbG9jKHB0ciwgbGFzdF9zaXplKTsKCQlpZiAoIXRlbXBfcHRyKSB7CgkJ
CWJ0ZiA9IEVSUl9QVFIoLUVOT01FTSk7CgkJCWdvdG8gZXhpdF9mcmVlOwoJCX0KCQlwdHIgPSB0
ZW1wX3B0cjsKCgkJbGVuID0gc2l6ZW9mKGJ0Zl9pbmZvKTsKCQltZW1zZXQoJmJ0Zl9pbmZvLCAw
LCBzaXplb2YoYnRmX2luZm8pKTsKCQlidGZfaW5mby5idGYgPSBwdHJfdG9fdTY0KHB0cik7CgkJ
YnRmX2luZm8uYnRmX3NpemUgPSBsYXN0X3NpemU7CgoJCWVyciA9IGJwZl9idGZfZ2V0X2luZm9f
YnlfZmQoYnRmX2ZkLCAmYnRmX2luZm8sICZsZW4pOwoJfQoKCWlmIChlcnIgfHwgYnRmX2luZm8u
YnRmX3NpemUgPiBsYXN0X3NpemUpIHsKCQlidGYgPSBlcnIgPyBFUlJfUFRSKC1lcnJubykgOiBF
UlJfUFRSKC1FMkJJRyk7CgkJZ290byBleGl0X2ZyZWU7Cgl9CgoJYnRmID0gYnRmX25ldyhwdHIs
IGJ0Zl9pbmZvLmJ0Zl9zaXplLCBiYXNlX2J0Zik7CgpleGl0X2ZyZWU6CglmcmVlKHB0cik7Cgly
ZXR1cm4gYnRmOwp9CgpzdHJ1Y3QgYnRmICpidGZfX2xvYWRfZnJvbV9rZXJuZWxfYnlfaWRfc3Bs
aXQoX191MzIgaWQsIHN0cnVjdCBidGYgKmJhc2VfYnRmKQp7CglzdHJ1Y3QgYnRmICpidGY7Cglp
bnQgYnRmX2ZkOwoKCWJ0Zl9mZCA9IGJwZl9idGZfZ2V0X2ZkX2J5X2lkKGlkKTsKCWlmIChidGZf
ZmQgPCAwKQoJCXJldHVybiBsaWJicGZfZXJyX3B0cigtZXJybm8pOwoKCWJ0ZiA9IGJ0Zl9nZXRf
ZnJvbV9mZChidGZfZmQsIGJhc2VfYnRmKTsKCWNsb3NlKGJ0Zl9mZCk7CgoJcmV0dXJuIGxpYmJw
Zl9wdHIoYnRmKTsKfQoKc3RydWN0IGJ0ZiAqYnRmX19sb2FkX2Zyb21fa2VybmVsX2J5X2lkKF9f
dTMyIGlkKQp7CglyZXR1cm4gYnRmX19sb2FkX2Zyb21fa2VybmVsX2J5X2lkX3NwbGl0KGlkLCBO
VUxMKTsKfQoKc3RhdGljIHZvaWQgYnRmX2ludmFsaWRhdGVfcmF3X2RhdGEoc3RydWN0IGJ0ZiAq
YnRmKQp7CglpZiAoYnRmLT5yYXdfZGF0YSkgewoJCWZyZWUoYnRmLT5yYXdfZGF0YSk7CgkJYnRm
LT5yYXdfZGF0YSA9IE5VTEw7Cgl9CglpZiAoYnRmLT5yYXdfZGF0YV9zd2FwcGVkKSB7CgkJZnJl
ZShidGYtPnJhd19kYXRhX3N3YXBwZWQpOwoJCWJ0Zi0+cmF3X2RhdGFfc3dhcHBlZCA9IE5VTEw7
Cgl9Cn0KCi8qIEVuc3VyZSBCVEYgaXMgcmVhZHkgdG8gYmUgbW9kaWZpZWQgKGJ5IHNwbGl0dGlu
ZyBpbnRvIGEgdGhyZWUgbWVtb3J5CiAqIHJlZ2lvbnMgZm9yIGhlYWRlciwgdHlwZXMsIGFuZCBz
dHJpbmdzKS4gQWxzbyBpbnZhbGlkYXRlIGNhY2hlZAogKiByYXdfZGF0YSwgaWYgYW55LgogKi8K
c3RhdGljIGludCBidGZfZW5zdXJlX21vZGlmaWFibGUoc3RydWN0IGJ0ZiAqYnRmKQp7Cgl2b2lk
ICpoZHIsICp0eXBlczsKCXN0cnVjdCBzdHJzZXQgKnNldCA9IE5VTEw7CglpbnQgZXJyID0gLUVO
T01FTTsKCglpZiAoYnRmX2lzX21vZGlmaWFibGUoYnRmKSkgewoJCS8qIGFueSBCVEYgbW9kaWZp
Y2F0aW9uIGludmFsaWRhdGVzIHJhd19kYXRhICovCgkJYnRmX2ludmFsaWRhdGVfcmF3X2RhdGEo
YnRmKTsKCQlyZXR1cm4gMDsKCX0KCgkvKiBzcGxpdCByYXcgZGF0YSBpbnRvIHRocmVlIG1lbW9y
eSByZWdpb25zICovCgloZHIgPSBtYWxsb2MoYnRmLT5oZHItPmhkcl9sZW4pOwoJdHlwZXMgPSBt
YWxsb2MoYnRmLT5oZHItPnR5cGVfbGVuKTsKCWlmICghaGRyIHx8ICF0eXBlcykKCQlnb3RvIGVy
cl9vdXQ7CgoJbWVtY3B5KGhkciwgYnRmLT5oZHIsIGJ0Zi0+aGRyLT5oZHJfbGVuKTsKCW1lbWNw
eSh0eXBlcywgYnRmLT50eXBlc19kYXRhLCBidGYtPmhkci0+dHlwZV9sZW4pOwoKCS8qIGJ1aWxk
IGxvb2t1cCBpbmRleCBmb3IgYWxsIHN0cmluZ3MgKi8KCXNldCA9IHN0cnNldF9fbmV3KEJURl9N
QVhfU1RSX09GRlNFVCwgYnRmLT5zdHJzX2RhdGEsIGJ0Zi0+aGRyLT5zdHJfbGVuKTsKCWlmIChJ
U19FUlIoc2V0KSkgewoJCWVyciA9IFBUUl9FUlIoc2V0KTsKCQlnb3RvIGVycl9vdXQ7Cgl9CgoJ
Lyogb25seSB3aGVuIGV2ZXJ5dGhpbmcgd2FzIHN1Y2Nlc3NmdWwsIHVwZGF0ZSBpbnRlcm5hbCBz
dGF0ZSAqLwoJYnRmLT5oZHIgPSBoZHI7CglidGYtPnR5cGVzX2RhdGEgPSB0eXBlczsKCWJ0Zi0+
dHlwZXNfZGF0YV9jYXAgPSBidGYtPmhkci0+dHlwZV9sZW47CglidGYtPnN0cnNfZGF0YSA9IE5V
TEw7CglidGYtPnN0cnNfc2V0ID0gc2V0OwoJLyogaWYgQlRGIHdhcyBjcmVhdGVkIGZyb20gc2Ny
YXRjaCwgYWxsIHN0cmluZ3MgYXJlIGd1YXJhbnRlZWQgdG8gYmUKCSAqIHVuaXF1ZSBhbmQgZGVk
dXBsaWNhdGVkCgkgKi8KCWlmIChidGYtPmhkci0+c3RyX2xlbiA9PSAwKQoJCWJ0Zi0+c3Ryc19k
ZWR1cGVkID0gdHJ1ZTsKCWlmICghYnRmLT5iYXNlX2J0ZiAmJiBidGYtPmhkci0+c3RyX2xlbiA9
PSAxKQoJCWJ0Zi0+c3Ryc19kZWR1cGVkID0gdHJ1ZTsKCgkvKiBpbnZhbGlkYXRlIHJhd19kYXRh
IHJlcHJlc2VudGF0aW9uICovCglidGZfaW52YWxpZGF0ZV9yYXdfZGF0YShidGYpOwoKCXJldHVy
biAwOwoKZXJyX291dDoKCXN0cnNldF9fZnJlZShzZXQpOwoJZnJlZShoZHIpOwoJZnJlZSh0eXBl
cyk7CglyZXR1cm4gZXJyOwp9CgovKiBGaW5kIGFuIG9mZnNldCBpbiBCVEYgc3RyaW5nIHNlY3Rp
b24gdGhhdCBjb3JyZXNwb25kcyB0byBhIGdpdmVuIHN0cmluZyAqcyouCiAqIFJldHVybnM6CiAq
ICAgLSA+MCBvZmZzZXQgaW50byBzdHJpbmcgc2VjdGlvbiwgaWYgc3RyaW5nIGlzIGZvdW5kOwog
KiAgIC0gLUVOT0VOVCwgaWYgc3RyaW5nIGlzIG5vdCBpbiB0aGUgc3RyaW5nIHNlY3Rpb247CiAq
ICAgLSA8MCwgb24gYW55IG90aGVyIGVycm9yLgogKi8KaW50IGJ0Zl9fZmluZF9zdHIoc3RydWN0
IGJ0ZiAqYnRmLCBjb25zdCBjaGFyICpzKQp7CglpbnQgb2ZmOwoKCWlmIChidGYtPmJhc2VfYnRm
KSB7CgkJb2ZmID0gYnRmX19maW5kX3N0cihidGYtPmJhc2VfYnRmLCBzKTsKCQlpZiAob2ZmICE9
IC1FTk9FTlQpCgkJCXJldHVybiBvZmY7Cgl9CgoJLyogQlRGIG5lZWRzIHRvIGJlIGluIGEgbW9k
aWZpYWJsZSBzdGF0ZSB0byBidWlsZCBzdHJpbmcgbG9va3VwIGluZGV4ICovCglpZiAoYnRmX2Vu
c3VyZV9tb2RpZmlhYmxlKGJ0ZikpCgkJcmV0dXJuIGxpYmJwZl9lcnIoLUVOT01FTSk7CgoJb2Zm
ID0gc3Ryc2V0X19maW5kX3N0cihidGYtPnN0cnNfc2V0LCBzKTsKCWlmIChvZmYgPCAwKQoJCXJl
dHVybiBsaWJicGZfZXJyKG9mZik7CgoJcmV0dXJuIGJ0Zi0+c3RhcnRfc3RyX29mZiArIG9mZjsK
fQoKLyogQWRkIGEgc3RyaW5nIHMgdG8gdGhlIEJURiBzdHJpbmcgc2VjdGlvbi4KICogUmV0dXJu
czoKICogICAtID4gMCBvZmZzZXQgaW50byBzdHJpbmcgc2VjdGlvbiwgb24gc3VjY2VzczsKICog
ICAtIDwgMCwgb24gZXJyb3IuCiAqLwppbnQgYnRmX19hZGRfc3RyKHN0cnVjdCBidGYgKmJ0Ziwg
Y29uc3QgY2hhciAqcykKewoJaW50IG9mZjsKCglpZiAoYnRmLT5iYXNlX2J0ZikgewoJCW9mZiA9
IGJ0Zl9fZmluZF9zdHIoYnRmLT5iYXNlX2J0Ziwgcyk7CgkJaWYgKG9mZiAhPSAtRU5PRU5UKQoJ
CQlyZXR1cm4gb2ZmOwoJfQoKCWlmIChidGZfZW5zdXJlX21vZGlmaWFibGUoYnRmKSkKCQlyZXR1
cm4gbGliYnBmX2VycigtRU5PTUVNKTsKCglvZmYgPSBzdHJzZXRfX2FkZF9zdHIoYnRmLT5zdHJz
X3NldCwgcyk7CglpZiAob2ZmIDwgMCkKCQlyZXR1cm4gbGliYnBmX2VycihvZmYpOwoKCWJ0Zi0+
aGRyLT5zdHJfbGVuID0gc3Ryc2V0X19kYXRhX3NpemUoYnRmLT5zdHJzX3NldCk7CgoJcmV0dXJu
IGJ0Zi0+c3RhcnRfc3RyX29mZiArIG9mZjsKfQoKc3RhdGljIHZvaWQgKmJ0Zl9hZGRfdHlwZV9t
ZW0oc3RydWN0IGJ0ZiAqYnRmLCBzaXplX3QgYWRkX3N6KQp7CglyZXR1cm4gbGliYnBmX2FkZF9t
ZW0oJmJ0Zi0+dHlwZXNfZGF0YSwgJmJ0Zi0+dHlwZXNfZGF0YV9jYXAsIDEsCgkJCSAgICAgIGJ0
Zi0+aGRyLT50eXBlX2xlbiwgVUlOVF9NQVgsIGFkZF9zeik7Cn0KCnN0YXRpYyB2b2lkIGJ0Zl90
eXBlX2luY192bGVuKHN0cnVjdCBidGZfdHlwZSAqdCkKewoJdC0+aW5mbyA9IGJ0Zl90eXBlX2lu
Zm8oYnRmX2tpbmQodCksIGJ0Zl92bGVuKHQpICsgMSwgYnRmX2tmbGFnKHQpKTsKfQoKc3RhdGlj
IGludCBidGZfY29tbWl0X3R5cGUoc3RydWN0IGJ0ZiAqYnRmLCBpbnQgZGF0YV9zeikKewoJaW50
IGVycjsKCgllcnIgPSBidGZfYWRkX3R5cGVfaWR4X2VudHJ5KGJ0ZiwgYnRmLT5oZHItPnR5cGVf
bGVuKTsKCWlmIChlcnIpCgkJcmV0dXJuIGxpYmJwZl9lcnIoZXJyKTsKCglidGYtPmhkci0+dHlw
ZV9sZW4gKz0gZGF0YV9zejsKCWJ0Zi0+aGRyLT5zdHJfb2ZmICs9IGRhdGFfc3o7CglidGYtPm5y
X3R5cGVzKys7CglyZXR1cm4gYnRmLT5zdGFydF9pZCArIGJ0Zi0+bnJfdHlwZXMgLSAxOwp9Cgpz
dHJ1Y3QgYnRmX3BpcGUgewoJY29uc3Qgc3RydWN0IGJ0ZiAqc3JjOwoJc3RydWN0IGJ0ZiAqZHN0
OwoJc3RydWN0IGhhc2htYXAgKnN0cl9vZmZfbWFwOyAvKiBtYXAgc3RyaW5nIG9mZnNldHMgZnJv
bSBzcmMgdG8gZHN0ICovCn07CgpzdGF0aWMgaW50IGJ0Zl9yZXdyaXRlX3N0cihzdHJ1Y3QgYnRm
X3BpcGUgKnAsIF9fdTMyICpzdHJfb2ZmKQp7Cglsb25nIG1hcHBlZF9vZmY7CglpbnQgb2ZmLCBl
cnI7CgoJaWYgKCEqc3RyX29mZikgLyogbm90aGluZyB0byBkbyBmb3IgZW1wdHkgc3RyaW5ncyAq
LwoJCXJldHVybiAwOwoKCWlmIChwLT5zdHJfb2ZmX21hcCAmJgoJICAgIGhhc2htYXBfX2ZpbmQo
cC0+c3RyX29mZl9tYXAsICpzdHJfb2ZmLCAmbWFwcGVkX29mZikpIHsKCQkqc3RyX29mZiA9IG1h
cHBlZF9vZmY7CgkJcmV0dXJuIDA7Cgl9CgoJb2ZmID0gYnRmX19hZGRfc3RyKHAtPmRzdCwgYnRm
X19zdHJfYnlfb2Zmc2V0KHAtPnNyYywgKnN0cl9vZmYpKTsKCWlmIChvZmYgPCAwKQoJCXJldHVy
biBvZmY7CgoJLyogUmVtZW1iZXIgc3RyaW5nIG1hcHBpbmcgZnJvbSBzcmMgdG8gZHN0LiAgSXQg
YXZvaWRzCgkgKiBwZXJmb3JtaW5nIGV4cGVuc2l2ZSBzdHJpbmcgY29tcGFyaXNvbnMuCgkgKi8K
CWlmIChwLT5zdHJfb2ZmX21hcCkgewoJCWVyciA9IGhhc2htYXBfX2FwcGVuZChwLT5zdHJfb2Zm
X21hcCwgKnN0cl9vZmYsIG9mZik7CgkJaWYgKGVycikKCQkJcmV0dXJuIGVycjsKCX0KCgkqc3Ry
X29mZiA9IG9mZjsKCXJldHVybiAwOwp9CgpzdGF0aWMgaW50IGJ0Zl9hZGRfdHlwZShzdHJ1Y3Qg
YnRmX3BpcGUgKnAsIGNvbnN0IHN0cnVjdCBidGZfdHlwZSAqc3JjX3R5cGUpCnsKCXN0cnVjdCBi
dGZfZmllbGRfaXRlciBpdDsKCXN0cnVjdCBidGZfdHlwZSAqdDsKCV9fdTMyICpzdHJfb2ZmOwoJ
aW50IHN6LCBlcnI7CgoJc3ogPSBidGZfdHlwZV9zaXplKHNyY190eXBlKTsKCWlmIChzeiA8IDAp
CgkJcmV0dXJuIGxpYmJwZl9lcnIoc3opOwoKCS8qIGRlY29uc3RydWN0IEJURiwgaWYgbmVjZXNz
YXJ5LCBhbmQgaW52YWxpZGF0ZSByYXdfZGF0YSAqLwoJaWYgKGJ0Zl9lbnN1cmVfbW9kaWZpYWJs
ZShwLT5kc3QpKQoJCXJldHVybiBsaWJicGZfZXJyKC1FTk9NRU0pOwoKCXQgPSBidGZfYWRkX3R5
cGVfbWVtKHAtPmRzdCwgc3opOwoJaWYgKCF0KQoJCXJldHVybiBsaWJicGZfZXJyKC1FTk9NRU0p
OwoKCW1lbWNweSh0LCBzcmNfdHlwZSwgc3opOwoKCWVyciA9IGJ0Zl9maWVsZF9pdGVyX2luaXQo
Jml0LCB0LCBCVEZfRklFTERfSVRFUl9TVFJTKTsKCWlmIChlcnIpCgkJcmV0dXJuIGxpYmJwZl9l
cnIoZXJyKTsKCgl3aGlsZSAoKHN0cl9vZmYgPSBidGZfZmllbGRfaXRlcl9uZXh0KCZpdCkpKSB7
CgkJZXJyID0gYnRmX3Jld3JpdGVfc3RyKHAsIHN0cl9vZmYpOwoJCWlmIChlcnIpCgkJCXJldHVy
biBsaWJicGZfZXJyKGVycik7Cgl9CgoJcmV0dXJuIGJ0Zl9jb21taXRfdHlwZShwLT5kc3QsIHN6
KTsKfQoKaW50IGJ0Zl9fYWRkX3R5cGUoc3RydWN0IGJ0ZiAqYnRmLCBjb25zdCBzdHJ1Y3QgYnRm
ICpzcmNfYnRmLCBjb25zdCBzdHJ1Y3QgYnRmX3R5cGUgKnNyY190eXBlKQp7CglzdHJ1Y3QgYnRm
X3BpcGUgcCA9IHsgLnNyYyA9IHNyY19idGYsIC5kc3QgPSBidGYgfTsKCglyZXR1cm4gYnRmX2Fk
ZF90eXBlKCZwLCBzcmNfdHlwZSk7Cn0KCnN0YXRpYyBzaXplX3QgYnRmX2RlZHVwX2lkZW50aXR5
X2hhc2hfZm4obG9uZyBrZXksIHZvaWQgKmN0eCk7CnN0YXRpYyBib29sIGJ0Zl9kZWR1cF9lcXVh
bF9mbihsb25nIGsxLCBsb25nIGsyLCB2b2lkICpjdHgpOwoKaW50IGJ0Zl9fYWRkX2J0ZihzdHJ1
Y3QgYnRmICpidGYsIGNvbnN0IHN0cnVjdCBidGYgKnNyY19idGYpCnsKCXN0cnVjdCBidGZfcGlw
ZSBwID0geyAuc3JjID0gc3JjX2J0ZiwgLmRzdCA9IGJ0ZiB9OwoJaW50IGRhdGFfc3osIHN6LCBj
bnQsIGksIGVyciwgb2xkX3N0cnNfbGVuOwoJX191MzIgKm9mZjsKCXZvaWQgKnQ7CgoJLyogYXBw
ZW5kaW5nIHNwbGl0IEJURiBpc24ndCBzdXBwb3J0ZWQgeWV0ICovCglpZiAoc3JjX2J0Zi0+YmFz
ZV9idGYpCgkJcmV0dXJuIGxpYmJwZl9lcnIoLUVOT1RTVVApOwoKCS8qIGRlY29uc3RydWN0IEJU
RiwgaWYgbmVjZXNzYXJ5LCBhbmQgaW52YWxpZGF0ZSByYXdfZGF0YSAqLwoJaWYgKGJ0Zl9lbnN1
cmVfbW9kaWZpYWJsZShidGYpKQoJCXJldHVybiBsaWJicGZfZXJyKC1FTk9NRU0pOwoKCS8qIHJl
bWVtYmVyIG9yaWdpbmFsIHN0cmluZ3Mgc2VjdGlvbiBzaXplIGlmIHdlIGhhdmUgdG8gcm9sbCBi
YWNrCgkgKiBwYXJ0aWFsIHN0cmluZ3Mgc2VjdGlvbiBjaGFuZ2VzCgkgKi8KCW9sZF9zdHJzX2xl
biA9IGJ0Zi0+aGRyLT5zdHJfbGVuOwoKCWRhdGFfc3ogPSBzcmNfYnRmLT5oZHItPnR5cGVfbGVu
OwoJY250ID0gYnRmX190eXBlX2NudChzcmNfYnRmKSAtIDE7CgoJLyogcHJlLWFsbG9jYXRlIGVu
b3VnaCBtZW1vcnkgZm9yIG5ldyB0eXBlcyAqLwoJdCA9IGJ0Zl9hZGRfdHlwZV9tZW0oYnRmLCBk
YXRhX3N6KTsKCWlmICghdCkKCQlyZXR1cm4gbGliYnBmX2VycigtRU5PTUVNKTsKCgkvKiBwcmUt
YWxsb2NhdGUgZW5vdWdoIG1lbW9yeSBmb3IgdHlwZSBvZmZzZXQgaW5kZXggZm9yIG5ldyB0eXBl
cyAqLwoJb2ZmID0gYnRmX2FkZF90eXBlX29mZnNfbWVtKGJ0ZiwgY250KTsKCWlmICghb2ZmKQoJ
CXJldHVybiBsaWJicGZfZXJyKC1FTk9NRU0pOwoKCS8qIE1hcCB0aGUgc3RyaW5nIG9mZnNldHMg
ZnJvbSBzcmNfYnRmIHRvIHRoZSBvZmZzZXRzIGZyb20gYnRmIHRvIGltcHJvdmUgcGVyZm9ybWFu
Y2UgKi8KCXAuc3RyX29mZl9tYXAgPSBoYXNobWFwX19uZXcoYnRmX2RlZHVwX2lkZW50aXR5X2hh
c2hfZm4sIGJ0Zl9kZWR1cF9lcXVhbF9mbiwgTlVMTCk7CglpZiAoSVNfRVJSKHAuc3RyX29mZl9t
YXApKQoJCXJldHVybiBsaWJicGZfZXJyKC1FTk9NRU0pOwoKCS8qIGJ1bGsgY29weSB0eXBlcyBk
YXRhIGZvciBhbGwgdHlwZXMgZnJvbSBzcmNfYnRmICovCgltZW1jcHkodCwgc3JjX2J0Zi0+dHlw
ZXNfZGF0YSwgZGF0YV9zeik7CgoJZm9yIChpID0gMDsgaSA8IGNudDsgaSsrKSB7CgkJc3RydWN0
IGJ0Zl9maWVsZF9pdGVyIGl0OwoJCV9fdTMyICp0eXBlX2lkLCAqc3RyX29mZjsKCgkJc3ogPSBi
dGZfdHlwZV9zaXplKHQpOwoJCWlmIChzeiA8IDApIHsKCQkJLyogdW5saWtlbHksIGhhcyB0byBi
ZSBjb3JydXB0ZWQgc3JjX2J0ZiAqLwoJCQllcnIgPSBzejsKCQkJZ290byBlcnJfb3V0OwoJCX0K
CgkJLyogZmlsbCBvdXQgdHlwZSBJRCB0byB0eXBlIG9mZnNldCBtYXBwaW5nIGZvciBsb29rdXBz
IGJ5IHR5cGUgSUQgKi8KCQkqb2ZmID0gdCAtIGJ0Zi0+dHlwZXNfZGF0YTsKCgkJLyogYWRkLCBk
ZWR1cCwgYW5kIHJlbWFwIHN0cmluZ3MgcmVmZXJlbmNlZCBieSB0aGlzIEJURiB0eXBlICovCgkJ
ZXJyID0gYnRmX2ZpZWxkX2l0ZXJfaW5pdCgmaXQsIHQsIEJURl9GSUVMRF9JVEVSX1NUUlMpOwoJ
CWlmIChlcnIpCgkJCWdvdG8gZXJyX291dDsKCQl3aGlsZSAoKHN0cl9vZmYgPSBidGZfZmllbGRf
aXRlcl9uZXh0KCZpdCkpKSB7CgkJCWVyciA9IGJ0Zl9yZXdyaXRlX3N0cigmcCwgc3RyX29mZik7
CgkJCWlmIChlcnIpCgkJCQlnb3RvIGVycl9vdXQ7CgkJfQoKCQkvKiByZW1hcCBhbGwgdHlwZSBJ
RHMgcmVmZXJlbmNlZCBmcm9tIHRoaXMgQlRGIHR5cGUgKi8KCQllcnIgPSBidGZfZmllbGRfaXRl
cl9pbml0KCZpdCwgdCwgQlRGX0ZJRUxEX0lURVJfSURTKTsKCQlpZiAoZXJyKQoJCQlnb3RvIGVy
cl9vdXQ7CgoJCXdoaWxlICgodHlwZV9pZCA9IGJ0Zl9maWVsZF9pdGVyX25leHQoJml0KSkpIHsK
CQkJaWYgKCEqdHlwZV9pZCkgLyogbm90aGluZyB0byBkbyBmb3IgVk9JRCByZWZlcmVuY2VzICov
CgkJCQljb250aW51ZTsKCgkJCS8qIHdlIGhhdmVuJ3QgdXBkYXRlZCBidGYncyB0eXBlIGNvdW50
IHlldCwgc28KCQkJICogYnRmLT5zdGFydF9pZCArIGJ0Zi0+bnJfdHlwZXMgLSAxIGlzIHRoZSB0
eXBlIElEIG9mZnNldCB3ZSBzaG91bGQKCQkJICogYWRkIHRvIGFsbCBuZXdseSBhZGRlZCBCVEYg
dHlwZXMKCQkJICovCgkJCSp0eXBlX2lkICs9IGJ0Zi0+c3RhcnRfaWQgKyBidGYtPm5yX3R5cGVz
IC0gMTsKCQl9CgoJCS8qIGdvIHRvIG5leHQgdHlwZSBkYXRhIGFuZCB0eXBlIG9mZnNldCBpbmRl
eCBlbnRyeSAqLwoJCXQgKz0gc3o7CgkJb2ZmKys7Cgl9CgoJLyogVXAgdW50aWwgbm93IGFueSBv
ZiB0aGUgY29waWVkIHR5cGUgZGF0YSB3YXMgZWZmZWN0aXZlbHkgaW52aXNpYmxlLAoJICogc28g
aWYgd2UgZXhpdGVkIGVhcmx5IGJlZm9yZSB0aGlzIHBvaW50IGR1ZSB0byBlcnJvciwgQlRGIHdv
dWxkIGJlCgkgKiBlZmZlY3RpdmVseSB1bm1vZGlmaWVkLiBUaGVyZSB3b3VsZCBiZSBleHRyYSBp
bnRlcm5hbCBtZW1vcnkKCSAqIHByZS1hbGxvY2F0ZWQsIGJ1dCBpdCB3b3VsZCBub3QgYmUgYXZh
aWxhYmxlIGZvciBxdWVyeWluZy4gIEJ1dCBub3cKCSAqIHRoYXQgd2UndmUgY29waWVkIGFuZCBy
ZXdyaXR0ZW4gYWxsIHRoZSBkYXRhIHN1Y2Nlc3NmdWxseSwgd2UgY2FuCgkgKiB1cGRhdGUgdHlw
ZSBjb3VudCBhbmQgdmFyaW91cyBpbnRlcm5hbCBvZmZzZXRzIGFuZCBzaXplcyB0bwoJICogImNv
bW1pdCIgdGhlIGNoYW5nZXMgYW5kIG1hZGUgdGhlbSB2aXNpYmxlIHRvIHRoZSBvdXRzaWRlIHdv
cmxkLgoJICovCglidGYtPmhkci0+dHlwZV9sZW4gKz0gZGF0YV9zejsKCWJ0Zi0+aGRyLT5zdHJf
b2ZmICs9IGRhdGFfc3o7CglidGYtPm5yX3R5cGVzICs9IGNudDsKCgloYXNobWFwX19mcmVlKHAu
c3RyX29mZl9tYXApOwoKCS8qIHJldHVybiB0eXBlIElEIG9mIHRoZSBmaXJzdCBhZGRlZCBCVEYg
dHlwZSAqLwoJcmV0dXJuIGJ0Zi0+c3RhcnRfaWQgKyBidGYtPm5yX3R5cGVzIC0gY250OwplcnJf
b3V0OgoJLyogemVybyBvdXQgcHJlYWxsb2NhdGVkIG1lbW9yeSBhcyBpZiBpdCB3YXMganVzdCBh
bGxvY2F0ZWQgd2l0aAoJICogbGliYnBmX2FkZF9tZW0oKQoJICovCgltZW1zZXQoYnRmLT50eXBl
c19kYXRhICsgYnRmLT5oZHItPnR5cGVfbGVuLCAwLCBkYXRhX3N6KTsKCW1lbXNldChidGYtPnN0
cnNfZGF0YSArIG9sZF9zdHJzX2xlbiwgMCwgYnRmLT5oZHItPnN0cl9sZW4gLSBvbGRfc3Ryc19s
ZW4pOwoKCS8qIGFuZCBub3cgcmVzdG9yZSBvcmlnaW5hbCBzdHJpbmdzIHNlY3Rpb24gc2l6ZTsg
dHlwZXMgZGF0YSBzaXplCgkgKiB3YXNuJ3QgbW9kaWZpZWQsIHNvIGRvZXNuJ3QgbmVlZCByZXN0
b3JpbmcsIHNlZSBiaWcgY29tbWVudCBhYm92ZQoJICovCglidGYtPmhkci0+c3RyX2xlbiA9IG9s
ZF9zdHJzX2xlbjsKCgloYXNobWFwX19mcmVlKHAuc3RyX29mZl9tYXApOwoKCXJldHVybiBsaWJi
cGZfZXJyKGVycik7Cn0KCi8qCiAqIEFwcGVuZCBuZXcgQlRGX0tJTkRfSU5UIHR5cGUgd2l0aDoK
ICogICAtICpuYW1lKiAtIG5vbi1lbXB0eSwgbm9uLU5VTEwgdHlwZSBuYW1lOwogKiAgIC0gKnN6
KiAtIHBvd2VyLW9mLTIgKDEsIDIsIDQsIC4uKSBzaXplIG9mIHRoZSB0eXBlLCBpbiBieXRlczsK
ICogICAtIGVuY29kaW5nIGlzIGEgY29tYmluYXRpb24gb2YgQlRGX0lOVF9TSUdORUQsIEJURl9J
TlRfQ0hBUiwgQlRGX0lOVF9CT09MLgogKiBSZXR1cm5zOgogKiAgIC0gPjAsIHR5cGUgSUQgb2Yg
bmV3bHkgYWRkZWQgQlRGIHR5cGU7CiAqICAgLSA8MCwgb24gZXJyb3IuCiAqLwppbnQgYnRmX19h
ZGRfaW50KHN0cnVjdCBidGYgKmJ0ZiwgY29uc3QgY2hhciAqbmFtZSwgc2l6ZV90IGJ5dGVfc3os
IGludCBlbmNvZGluZykKewoJc3RydWN0IGJ0Zl90eXBlICp0OwoJaW50IHN6LCBuYW1lX29mZjsK
CgkvKiBub24tZW1wdHkgbmFtZSAqLwoJaWYgKCFuYW1lIHx8ICFuYW1lWzBdKQoJCXJldHVybiBs
aWJicGZfZXJyKC1FSU5WQUwpOwoJLyogYnl0ZV9zeiBtdXN0IGJlIHBvd2VyIG9mIDIgKi8KCWlm
ICghYnl0ZV9zeiB8fCAoYnl0ZV9zeiAmIChieXRlX3N6IC0gMSkpIHx8IGJ5dGVfc3ogPiAxNikK
CQlyZXR1cm4gbGliYnBmX2VycigtRUlOVkFMKTsKCWlmIChlbmNvZGluZyAmIH4oQlRGX0lOVF9T
SUdORUQgfCBCVEZfSU5UX0NIQVIgfCBCVEZfSU5UX0JPT0wpKQoJCXJldHVybiBsaWJicGZfZXJy
KC1FSU5WQUwpOwoKCS8qIGRlY29uc3RydWN0IEJURiwgaWYgbmVjZXNzYXJ5LCBhbmQgaW52YWxp
ZGF0ZSByYXdfZGF0YSAqLwoJaWYgKGJ0Zl9lbnN1cmVfbW9kaWZpYWJsZShidGYpKQoJCXJldHVy
biBsaWJicGZfZXJyKC1FTk9NRU0pOwoKCXN6ID0gc2l6ZW9mKHN0cnVjdCBidGZfdHlwZSkgKyBz
aXplb2YoaW50KTsKCXQgPSBidGZfYWRkX3R5cGVfbWVtKGJ0Ziwgc3opOwoJaWYgKCF0KQoJCXJl
dHVybiBsaWJicGZfZXJyKC1FTk9NRU0pOwoKCS8qIGlmIHNvbWV0aGluZyBnb2VzIHdyb25nIGxh
dGVyLCB3ZSBtaWdodCBlbmQgdXAgd2l0aCBhbiBleHRyYSBzdHJpbmcsCgkgKiBidXQgdGhhdCBz
aG91bGRuJ3QgYmUgYSBwcm9ibGVtLCBiZWNhdXNlIEJURiBjYW4ndCBiZSBjb25zdHJ1Y3RlZAoJ
ICogY29tcGxldGVseSBhbnl3YXkgYW5kIHdpbGwgbW9zdCBwcm9iYWJseSBiZSBqdXN0IGRpc2Nh
cmRlZAoJICovCgluYW1lX29mZiA9IGJ0Zl9fYWRkX3N0cihidGYsIG5hbWUpOwoJaWYgKG5hbWVf
b2ZmIDwgMCkKCQlyZXR1cm4gbmFtZV9vZmY7CgoJdC0+bmFtZV9vZmYgPSBuYW1lX29mZjsKCXQt
PmluZm8gPSBidGZfdHlwZV9pbmZvKEJURl9LSU5EX0lOVCwgMCwgMCk7Cgl0LT5zaXplID0gYnl0
ZV9zejsKCS8qIHNldCBJTlQgaW5mbywgd2UgZG9uJ3QgYWxsb3cgc2V0dGluZyBsZWdhY3kgYml0
IG9mZnNldC9zaXplICovCgkqKF9fdTMyICopKHQgKyAxKSA9IChlbmNvZGluZyA8PCAyNCkgfCAo
Ynl0ZV9zeiAqIDgpOwoKCXJldHVybiBidGZfY29tbWl0X3R5cGUoYnRmLCBzeik7Cn0KCi8qCiAq
IEFwcGVuZCBuZXcgQlRGX0tJTkRfRkxPQVQgdHlwZSB3aXRoOgogKiAgIC0gKm5hbWUqIC0gbm9u
LWVtcHR5LCBub24tTlVMTCB0eXBlIG5hbWU7CiAqICAgLSAqc3oqIC0gc2l6ZSBvZiB0aGUgdHlw
ZSwgaW4gYnl0ZXM7CiAqIFJldHVybnM6CiAqICAgLSA+MCwgdHlwZSBJRCBvZiBuZXdseSBhZGRl
ZCBCVEYgdHlwZTsKICogICAtIDwwLCBvbiBlcnJvci4KICovCmludCBidGZfX2FkZF9mbG9hdChz
dHJ1Y3QgYnRmICpidGYsIGNvbnN0IGNoYXIgKm5hbWUsIHNpemVfdCBieXRlX3N6KQp7CglzdHJ1
Y3QgYnRmX3R5cGUgKnQ7CglpbnQgc3osIG5hbWVfb2ZmOwoKCS8qIG5vbi1lbXB0eSBuYW1lICov
CglpZiAoIW5hbWUgfHwgIW5hbWVbMF0pCgkJcmV0dXJuIGxpYmJwZl9lcnIoLUVJTlZBTCk7CgoJ
LyogYnl0ZV9zeiBtdXN0IGJlIG9uZSBvZiB0aGUgZXhwbGljaXRseSBhbGxvd2VkIHZhbHVlcyAq
LwoJaWYgKGJ5dGVfc3ogIT0gMiAmJiBieXRlX3N6ICE9IDQgJiYgYnl0ZV9zeiAhPSA4ICYmIGJ5
dGVfc3ogIT0gMTIgJiYKCSAgICBieXRlX3N6ICE9IDE2KQoJCXJldHVybiBsaWJicGZfZXJyKC1F
SU5WQUwpOwoKCWlmIChidGZfZW5zdXJlX21vZGlmaWFibGUoYnRmKSkKCQlyZXR1cm4gbGliYnBm
X2VycigtRU5PTUVNKTsKCglzeiA9IHNpemVvZihzdHJ1Y3QgYnRmX3R5cGUpOwoJdCA9IGJ0Zl9h
ZGRfdHlwZV9tZW0oYnRmLCBzeik7CglpZiAoIXQpCgkJcmV0dXJuIGxpYmJwZl9lcnIoLUVOT01F
TSk7CgoJbmFtZV9vZmYgPSBidGZfX2FkZF9zdHIoYnRmLCBuYW1lKTsKCWlmIChuYW1lX29mZiA8
IDApCgkJcmV0dXJuIG5hbWVfb2ZmOwoKCXQtPm5hbWVfb2ZmID0gbmFtZV9vZmY7Cgl0LT5pbmZv
ID0gYnRmX3R5cGVfaW5mbyhCVEZfS0lORF9GTE9BVCwgMCwgMCk7Cgl0LT5zaXplID0gYnl0ZV9z
ejsKCglyZXR1cm4gYnRmX2NvbW1pdF90eXBlKGJ0Ziwgc3opOwp9CgovKiBpdCdzIGNvbXBsZXRl
bHkgbGVnYWwgdG8gYXBwZW5kIEJURiB0eXBlcyB3aXRoIHR5cGUgSURzIHBvaW50aW5nIGZvcndh
cmQgdG8KICogdHlwZXMgdGhhdCBoYXZlbid0IGJlZW4gYXBwZW5kZWQgeWV0LCBzbyB3ZSBvbmx5
IG1ha2Ugc3VyZSB0aGF0IGlkIGxvb2tzCiAqIHNhbmUsIHdlIGNhbid0IGd1YXJhbnRlZSB0aGF0
IElEIHdpbGwgYWx3YXlzIGJlIHZhbGlkCiAqLwpzdGF0aWMgaW50IHZhbGlkYXRlX3R5cGVfaWQo
aW50IGlkKQp7CglpZiAoaWQgPCAwIHx8IGlkID4gQlRGX01BWF9OUl9UWVBFUykKCQlyZXR1cm4g
LUVJTlZBTDsKCXJldHVybiAwOwp9CgovKiBnZW5lcmljIGFwcGVuZCBmdW5jdGlvbiBmb3IgUFRS
LCBUWVBFREVGLCBDT05TVC9WT0xBVElMRS9SRVNUUklDVCAqLwpzdGF0aWMgaW50IGJ0Zl9hZGRf
cmVmX2tpbmQoc3RydWN0IGJ0ZiAqYnRmLCBpbnQga2luZCwgY29uc3QgY2hhciAqbmFtZSwgaW50
IHJlZl90eXBlX2lkKQp7CglzdHJ1Y3QgYnRmX3R5cGUgKnQ7CglpbnQgc3osIG5hbWVfb2ZmID0g
MDsKCglpZiAodmFsaWRhdGVfdHlwZV9pZChyZWZfdHlwZV9pZCkpCgkJcmV0dXJuIGxpYmJwZl9l
cnIoLUVJTlZBTCk7CgoJaWYgKGJ0Zl9lbnN1cmVfbW9kaWZpYWJsZShidGYpKQoJCXJldHVybiBs
aWJicGZfZXJyKC1FTk9NRU0pOwoKCXN6ID0gc2l6ZW9mKHN0cnVjdCBidGZfdHlwZSk7Cgl0ID0g
YnRmX2FkZF90eXBlX21lbShidGYsIHN6KTsKCWlmICghdCkKCQlyZXR1cm4gbGliYnBmX2Vycigt
RU5PTUVNKTsKCglpZiAobmFtZSAmJiBuYW1lWzBdKSB7CgkJbmFtZV9vZmYgPSBidGZfX2FkZF9z
dHIoYnRmLCBuYW1lKTsKCQlpZiAobmFtZV9vZmYgPCAwKQoJCQlyZXR1cm4gbmFtZV9vZmY7Cgl9
CgoJdC0+bmFtZV9vZmYgPSBuYW1lX29mZjsKCXQtPmluZm8gPSBidGZfdHlwZV9pbmZvKGtpbmQs
IDAsIDApOwoJdC0+dHlwZSA9IHJlZl90eXBlX2lkOwoKCXJldHVybiBidGZfY29tbWl0X3R5cGUo
YnRmLCBzeik7Cn0KCi8qCiAqIEFwcGVuZCBuZXcgQlRGX0tJTkRfUFRSIHR5cGUgd2l0aDoKICog
ICAtICpyZWZfdHlwZV9pZCogLSByZWZlcmVuY2VkIHR5cGUgSUQsIGl0IG1pZ2h0IG5vdCBleGlz
dCB5ZXQ7CiAqIFJldHVybnM6CiAqICAgLSA+MCwgdHlwZSBJRCBvZiBuZXdseSBhZGRlZCBCVEYg
dHlwZTsKICogICAtIDwwLCBvbiBlcnJvci4KICovCmludCBidGZfX2FkZF9wdHIoc3RydWN0IGJ0
ZiAqYnRmLCBpbnQgcmVmX3R5cGVfaWQpCnsKCXJldHVybiBidGZfYWRkX3JlZl9raW5kKGJ0Ziwg
QlRGX0tJTkRfUFRSLCBOVUxMLCByZWZfdHlwZV9pZCk7Cn0KCi8qCiAqIEFwcGVuZCBuZXcgQlRG
X0tJTkRfQVJSQVkgdHlwZSB3aXRoOgogKiAgIC0gKmluZGV4X3R5cGVfaWQqIC0gdHlwZSBJRCBv
ZiB0aGUgdHlwZSBkZXNjcmliaW5nIGFycmF5IGluZGV4OwogKiAgIC0gKmVsZW1fdHlwZV9pZCog
LSB0eXBlIElEIG9mIHRoZSB0eXBlIGRlc2NyaWJpbmcgYXJyYXkgZWxlbWVudDsKICogICAtICpu
cl9lbGVtcyogLSB0aGUgc2l6ZSBvZiB0aGUgYXJyYXk7CiAqIFJldHVybnM6CiAqICAgLSA+MCwg
dHlwZSBJRCBvZiBuZXdseSBhZGRlZCBCVEYgdHlwZTsKICogICAtIDwwLCBvbiBlcnJvci4KICov
CmludCBidGZfX2FkZF9hcnJheShzdHJ1Y3QgYnRmICpidGYsIGludCBpbmRleF90eXBlX2lkLCBp
bnQgZWxlbV90eXBlX2lkLCBfX3UzMiBucl9lbGVtcykKewoJc3RydWN0IGJ0Zl90eXBlICp0OwoJ
c3RydWN0IGJ0Zl9hcnJheSAqYTsKCWludCBzejsKCglpZiAodmFsaWRhdGVfdHlwZV9pZChpbmRl
eF90eXBlX2lkKSB8fCB2YWxpZGF0ZV90eXBlX2lkKGVsZW1fdHlwZV9pZCkpCgkJcmV0dXJuIGxp
YmJwZl9lcnIoLUVJTlZBTCk7CgoJaWYgKGJ0Zl9lbnN1cmVfbW9kaWZpYWJsZShidGYpKQoJCXJl
dHVybiBsaWJicGZfZXJyKC1FTk9NRU0pOwoKCXN6ID0gc2l6ZW9mKHN0cnVjdCBidGZfdHlwZSkg
KyBzaXplb2Yoc3RydWN0IGJ0Zl9hcnJheSk7Cgl0ID0gYnRmX2FkZF90eXBlX21lbShidGYsIHN6
KTsKCWlmICghdCkKCQlyZXR1cm4gbGliYnBmX2VycigtRU5PTUVNKTsKCgl0LT5uYW1lX29mZiA9
IDA7Cgl0LT5pbmZvID0gYnRmX3R5cGVfaW5mbyhCVEZfS0lORF9BUlJBWSwgMCwgMCk7Cgl0LT5z
aXplID0gMDsKCglhID0gYnRmX2FycmF5KHQpOwoJYS0+dHlwZSA9IGVsZW1fdHlwZV9pZDsKCWEt
PmluZGV4X3R5cGUgPSBpbmRleF90eXBlX2lkOwoJYS0+bmVsZW1zID0gbnJfZWxlbXM7CgoJcmV0
dXJuIGJ0Zl9jb21taXRfdHlwZShidGYsIHN6KTsKfQoKLyogZ2VuZXJpYyBTVFJVQ1QvVU5JT04g
YXBwZW5kIGZ1bmN0aW9uICovCnN0YXRpYyBpbnQgYnRmX2FkZF9jb21wb3NpdGUoc3RydWN0IGJ0
ZiAqYnRmLCBpbnQga2luZCwgY29uc3QgY2hhciAqbmFtZSwgX191MzIgYnl0ZXNfc3opCnsKCXN0
cnVjdCBidGZfdHlwZSAqdDsKCWludCBzeiwgbmFtZV9vZmYgPSAwOwoKCWlmIChidGZfZW5zdXJl
X21vZGlmaWFibGUoYnRmKSkKCQlyZXR1cm4gbGliYnBmX2VycigtRU5PTUVNKTsKCglzeiA9IHNp
emVvZihzdHJ1Y3QgYnRmX3R5cGUpOwoJdCA9IGJ0Zl9hZGRfdHlwZV9tZW0oYnRmLCBzeik7Cglp
ZiAoIXQpCgkJcmV0dXJuIGxpYmJwZl9lcnIoLUVOT01FTSk7CgoJaWYgKG5hbWUgJiYgbmFtZVsw
XSkgewoJCW5hbWVfb2ZmID0gYnRmX19hZGRfc3RyKGJ0ZiwgbmFtZSk7CgkJaWYgKG5hbWVfb2Zm
IDwgMCkKCQkJcmV0dXJuIG5hbWVfb2ZmOwoJfQoKCS8qIHN0YXJ0IG91dCB3aXRoIHZsZW49MCBh
bmQgbm8ga2ZsYWc7IHRoaXMgd2lsbCBiZSBhZGp1c3RlZCB3aGVuCgkgKiBhZGRpbmcgZWFjaCBt
ZW1iZXIKCSAqLwoJdC0+bmFtZV9vZmYgPSBuYW1lX29mZjsKCXQtPmluZm8gPSBidGZfdHlwZV9p
bmZvKGtpbmQsIDAsIDApOwoJdC0+c2l6ZSA9IGJ5dGVzX3N6OwoKCXJldHVybiBidGZfY29tbWl0
X3R5cGUoYnRmLCBzeik7Cn0KCi8qCiAqIEFwcGVuZCBuZXcgQlRGX0tJTkRfU1RSVUNUIHR5cGUg
d2l0aDoKICogICAtICpuYW1lKiAtIG5hbWUgb2YgdGhlIHN0cnVjdCwgY2FuIGJlIE5VTEwgb3Ig
ZW1wdHkgZm9yIGFub255bW91cyBzdHJ1Y3RzOwogKiAgIC0gKmJ5dGVfc3oqIC0gc2l6ZSBvZiB0
aGUgc3RydWN0LCBpbiBieXRlczsKICoKICogU3RydWN0IGluaXRpYWxseSBoYXMgbm8gZmllbGRz
IGluIGl0LiBGaWVsZHMgY2FuIGJlIGFkZGVkIGJ5CiAqIGJ0Zl9fYWRkX2ZpZWxkKCkgcmlnaHQg
YWZ0ZXIgYnRmX19hZGRfc3RydWN0KCkgc3VjY2VlZHMuCiAqCiAqIFJldHVybnM6CiAqICAgLSA+
MCwgdHlwZSBJRCBvZiBuZXdseSBhZGRlZCBCVEYgdHlwZTsKICogICAtIDwwLCBvbiBlcnJvci4K
ICovCmludCBidGZfX2FkZF9zdHJ1Y3Qoc3RydWN0IGJ0ZiAqYnRmLCBjb25zdCBjaGFyICpuYW1l
LCBfX3UzMiBieXRlX3N6KQp7CglyZXR1cm4gYnRmX2FkZF9jb21wb3NpdGUoYnRmLCBCVEZfS0lO
RF9TVFJVQ1QsIG5hbWUsIGJ5dGVfc3opOwp9CgovKgogKiBBcHBlbmQgbmV3IEJURl9LSU5EX1VO
SU9OIHR5cGUgd2l0aDoKICogICAtICpuYW1lKiAtIG5hbWUgb2YgdGhlIHVuaW9uLCBjYW4gYmUg
TlVMTCBvciBlbXB0eSBmb3IgYW5vbnltb3VzIHVuaW9uOwogKiAgIC0gKmJ5dGVfc3oqIC0gc2l6
ZSBvZiB0aGUgdW5pb24sIGluIGJ5dGVzOwogKgogKiBVbmlvbiBpbml0aWFsbHkgaGFzIG5vIGZp
ZWxkcyBpbiBpdC4gRmllbGRzIGNhbiBiZSBhZGRlZCBieQogKiBidGZfX2FkZF9maWVsZCgpIHJp
Z2h0IGFmdGVyIGJ0Zl9fYWRkX3VuaW9uKCkgc3VjY2VlZHMuIEFsbCBmaWVsZHMKICogc2hvdWxk
IGhhdmUgKmJpdF9vZmZzZXQqIG9mIDAuCiAqCiAqIFJldHVybnM6CiAqICAgLSA+MCwgdHlwZSBJ
RCBvZiBuZXdseSBhZGRlZCBCVEYgdHlwZTsKICogICAtIDwwLCBvbiBlcnJvci4KICovCmludCBi
dGZfX2FkZF91bmlvbihzdHJ1Y3QgYnRmICpidGYsIGNvbnN0IGNoYXIgKm5hbWUsIF9fdTMyIGJ5
dGVfc3opCnsKCXJldHVybiBidGZfYWRkX2NvbXBvc2l0ZShidGYsIEJURl9LSU5EX1VOSU9OLCBu
YW1lLCBieXRlX3N6KTsKfQoKc3RhdGljIHN0cnVjdCBidGZfdHlwZSAqYnRmX2xhc3RfdHlwZShz
dHJ1Y3QgYnRmICpidGYpCnsKCXJldHVybiBidGZfdHlwZV9ieV9pZChidGYsIGJ0Zl9fdHlwZV9j
bnQoYnRmKSAtIDEpOwp9CgovKgogKiBBcHBlbmQgbmV3IGZpZWxkIGZvciB0aGUgY3VycmVudCBT
VFJVQ1QvVU5JT04gdHlwZSB3aXRoOgogKiAgIC0gKm5hbWUqIC0gbmFtZSBvZiB0aGUgZmllbGQs
IGNhbiBiZSBOVUxMIG9yIGVtcHR5IGZvciBhbm9ueW1vdXMgZmllbGQ7CiAqICAgLSAqdHlwZV9p
ZCogLSB0eXBlIElEIGZvciB0aGUgdHlwZSBkZXNjcmliaW5nIGZpZWxkIHR5cGU7CiAqICAgLSAq
Yml0X29mZnNldCogLSBiaXQgb2Zmc2V0IG9mIHRoZSBzdGFydCBvZiB0aGUgZmllbGQgd2l0aGlu
IHN0cnVjdC91bmlvbjsKICogICAtICpiaXRfc2l6ZSogLSBiaXQgc2l6ZSBvZiBhIGJpdGZpZWxk
LCAwIGZvciBub24tYml0ZmllbGQgZmllbGRzOwogKiBSZXR1cm5zOgogKiAgIC0gIDAsIG9uIHN1
Y2Nlc3M7CiAqICAgLSA8MCwgb24gZXJyb3IuCiAqLwppbnQgYnRmX19hZGRfZmllbGQoc3RydWN0
IGJ0ZiAqYnRmLCBjb25zdCBjaGFyICpuYW1lLCBpbnQgdHlwZV9pZCwKCQkgICBfX3UzMiBiaXRf
b2Zmc2V0LCBfX3UzMiBiaXRfc2l6ZSkKewoJc3RydWN0IGJ0Zl90eXBlICp0OwoJc3RydWN0IGJ0
Zl9tZW1iZXIgKm07Cglib29sIGlzX2JpdGZpZWxkOwoJaW50IHN6LCBuYW1lX29mZiA9IDA7CgoJ
LyogbGFzdCB0eXBlIHNob3VsZCBiZSB1bmlvbi9zdHJ1Y3QgKi8KCWlmIChidGYtPm5yX3R5cGVz
ID09IDApCgkJcmV0dXJuIGxpYmJwZl9lcnIoLUVJTlZBTCk7Cgl0ID0gYnRmX2xhc3RfdHlwZShi
dGYpOwoJaWYgKCFidGZfaXNfY29tcG9zaXRlKHQpKQoJCXJldHVybiBsaWJicGZfZXJyKC1FSU5W
QUwpOwoKCWlmICh2YWxpZGF0ZV90eXBlX2lkKHR5cGVfaWQpKQoJCXJldHVybiBsaWJicGZfZXJy
KC1FSU5WQUwpOwoJLyogYmVzdC1lZmZvcnQgYml0IGZpZWxkIG9mZnNldC9zaXplIGVuZm9yY2Vt
ZW50ICovCglpc19iaXRmaWVsZCA9IGJpdF9zaXplIHx8IChiaXRfb2Zmc2V0ICUgOCAhPSAwKTsK
CWlmIChpc19iaXRmaWVsZCAmJiAoYml0X3NpemUgPT0gMCB8fCBiaXRfc2l6ZSA+IDI1NSB8fCBi
aXRfb2Zmc2V0ID4gMHhmZmZmZmYpKQoJCXJldHVybiBsaWJicGZfZXJyKC1FSU5WQUwpOwoKCS8q
IG9ubHkgb2Zmc2V0IDAgaXMgYWxsb3dlZCBmb3IgdW5pb25zICovCglpZiAoYnRmX2lzX3VuaW9u
KHQpICYmIGJpdF9vZmZzZXQpCgkJcmV0dXJuIGxpYmJwZl9lcnIoLUVJTlZBTCk7CgoJLyogZGVj
b21wb3NlIGFuZCBpbnZhbGlkYXRlIHJhdyBkYXRhICovCglpZiAoYnRmX2Vuc3VyZV9tb2RpZmlh
YmxlKGJ0ZikpCgkJcmV0dXJuIGxpYmJwZl9lcnIoLUVOT01FTSk7CgoJc3ogPSBzaXplb2Yoc3Ry
dWN0IGJ0Zl9tZW1iZXIpOwoJbSA9IGJ0Zl9hZGRfdHlwZV9tZW0oYnRmLCBzeik7CglpZiAoIW0p
CgkJcmV0dXJuIGxpYmJwZl9lcnIoLUVOT01FTSk7CgoJaWYgKG5hbWUgJiYgbmFtZVswXSkgewoJ
CW5hbWVfb2ZmID0gYnRmX19hZGRfc3RyKGJ0ZiwgbmFtZSk7CgkJaWYgKG5hbWVfb2ZmIDwgMCkK
CQkJcmV0dXJuIG5hbWVfb2ZmOwoJfQoKCW0tPm5hbWVfb2ZmID0gbmFtZV9vZmY7CgltLT50eXBl
ID0gdHlwZV9pZDsKCW0tPm9mZnNldCA9IGJpdF9vZmZzZXQgfCAoYml0X3NpemUgPDwgMjQpOwoK
CS8qIGJ0Zl9hZGRfdHlwZV9tZW0gY2FuIGludmFsaWRhdGUgdCBwb2ludGVyICovCgl0ID0gYnRm
X2xhc3RfdHlwZShidGYpOwoJLyogdXBkYXRlIHBhcmVudCB0eXBlJ3MgdmxlbiBhbmQga2ZsYWcg
Ki8KCXQtPmluZm8gPSBidGZfdHlwZV9pbmZvKGJ0Zl9raW5kKHQpLCBidGZfdmxlbih0KSArIDEs
IGlzX2JpdGZpZWxkIHx8IGJ0Zl9rZmxhZyh0KSk7CgoJYnRmLT5oZHItPnR5cGVfbGVuICs9IHN6
OwoJYnRmLT5oZHItPnN0cl9vZmYgKz0gc3o7CglyZXR1cm4gMDsKfQoKc3RhdGljIGludCBidGZf
YWRkX2VudW1fY29tbW9uKHN0cnVjdCBidGYgKmJ0ZiwgY29uc3QgY2hhciAqbmFtZSwgX191MzIg
Ynl0ZV9zeiwKCQkJICAgICAgIGJvb2wgaXNfc2lnbmVkLCBfX3U4IGtpbmQpCnsKCXN0cnVjdCBi
dGZfdHlwZSAqdDsKCWludCBzeiwgbmFtZV9vZmYgPSAwOwoKCS8qIGJ5dGVfc3ogbXVzdCBiZSBw
b3dlciBvZiAyICovCglpZiAoIWJ5dGVfc3ogfHwgKGJ5dGVfc3ogJiAoYnl0ZV9zeiAtIDEpKSB8
fCBieXRlX3N6ID4gOCkKCQlyZXR1cm4gbGliYnBmX2VycigtRUlOVkFMKTsKCglpZiAoYnRmX2Vu
c3VyZV9tb2RpZmlhYmxlKGJ0ZikpCgkJcmV0dXJuIGxpYmJwZl9lcnIoLUVOT01FTSk7CgoJc3og
PSBzaXplb2Yoc3RydWN0IGJ0Zl90eXBlKTsKCXQgPSBidGZfYWRkX3R5cGVfbWVtKGJ0Ziwgc3op
OwoJaWYgKCF0KQoJCXJldHVybiBsaWJicGZfZXJyKC1FTk9NRU0pOwoKCWlmIChuYW1lICYmIG5h
bWVbMF0pIHsKCQluYW1lX29mZiA9IGJ0Zl9fYWRkX3N0cihidGYsIG5hbWUpOwoJCWlmIChuYW1l
X29mZiA8IDApCgkJCXJldHVybiBuYW1lX29mZjsKCX0KCgkvKiBzdGFydCBvdXQgd2l0aCB2bGVu
PTA7IGl0IHdpbGwgYmUgYWRqdXN0ZWQgd2hlbiBhZGRpbmcgZW51bSB2YWx1ZXMgKi8KCXQtPm5h
bWVfb2ZmID0gbmFtZV9vZmY7Cgl0LT5pbmZvID0gYnRmX3R5cGVfaW5mbyhraW5kLCAwLCBpc19z
aWduZWQpOwoJdC0+c2l6ZSA9IGJ5dGVfc3o7CgoJcmV0dXJuIGJ0Zl9jb21taXRfdHlwZShidGYs
IHN6KTsKfQoKLyoKICogQXBwZW5kIG5ldyBCVEZfS0lORF9FTlVNIHR5cGUgd2l0aDoKICogICAt
ICpuYW1lKiAtIG5hbWUgb2YgdGhlIGVudW0sIGNhbiBiZSBOVUxMIG9yIGVtcHR5IGZvciBhbm9u
eW1vdXMgZW51bXM7CiAqICAgLSAqYnl0ZV9zeiogLSBzaXplIG9mIHRoZSBlbnVtLCBpbiBieXRl
cy4KICoKICogRW51bSBpbml0aWFsbHkgaGFzIG5vIGVudW0gdmFsdWVzIGluIGl0IChhbmQgY29y
cmVzcG9uZHMgdG8gZW51bSBmb3J3YXJkCiAqIGRlY2xhcmF0aW9uKS4gRW51bWVyYXRvciB2YWx1
ZXMgY2FuIGJlIGFkZGVkIGJ5IGJ0Zl9fYWRkX2VudW1fdmFsdWUoKQogKiBpbW1lZGlhdGVseSBh
ZnRlciBidGZfX2FkZF9lbnVtKCkgc3VjY2VlZHMuCiAqCiAqIFJldHVybnM6CiAqICAgLSA+MCwg
dHlwZSBJRCBvZiBuZXdseSBhZGRlZCBCVEYgdHlwZTsKICogICAtIDwwLCBvbiBlcnJvci4KICov
CmludCBidGZfX2FkZF9lbnVtKHN0cnVjdCBidGYgKmJ0ZiwgY29uc3QgY2hhciAqbmFtZSwgX191
MzIgYnl0ZV9zeikKewoJLyoKCSAqIHNldCB0aGUgc2lnbmVkbmVzcyB0byBiZSB1bnNpZ25lZCwg
aXQgd2lsbCBjaGFuZ2UgdG8gc2lnbmVkCgkgKiBpZiBhbnkgbGF0ZXIgZW51bWVyYXRvciBpcyBu
ZWdhdGl2ZS4KCSAqLwoJcmV0dXJuIGJ0Zl9hZGRfZW51bV9jb21tb24oYnRmLCBuYW1lLCBieXRl
X3N6LCBmYWxzZSwgQlRGX0tJTkRfRU5VTSk7Cn0KCi8qCiAqIEFwcGVuZCBuZXcgZW51bSB2YWx1
ZSBmb3IgdGhlIGN1cnJlbnQgRU5VTSB0eXBlIHdpdGg6CiAqICAgLSAqbmFtZSogLSBuYW1lIG9m
IHRoZSBlbnVtZXJhdG9yIHZhbHVlLCBjYW4ndCBiZSBOVUxMIG9yIGVtcHR5OwogKiAgIC0gKnZh
bHVlKiAtIGludGVnZXIgdmFsdWUgY29ycmVzcG9uZGluZyB0byBlbnVtIHZhbHVlICpuYW1lKjsK
ICogUmV0dXJuczoKICogICAtICAwLCBvbiBzdWNjZXNzOwogKiAgIC0gPDAsIG9uIGVycm9yLgog
Ki8KaW50IGJ0Zl9fYWRkX2VudW1fdmFsdWUoc3RydWN0IGJ0ZiAqYnRmLCBjb25zdCBjaGFyICpu
YW1lLCBfX3M2NCB2YWx1ZSkKewoJc3RydWN0IGJ0Zl90eXBlICp0OwoJc3RydWN0IGJ0Zl9lbnVt
ICp2OwoJaW50IHN6LCBuYW1lX29mZjsKCgkvKiBsYXN0IHR5cGUgc2hvdWxkIGJlIEJURl9LSU5E
X0VOVU0gKi8KCWlmIChidGYtPm5yX3R5cGVzID09IDApCgkJcmV0dXJuIGxpYmJwZl9lcnIoLUVJ
TlZBTCk7Cgl0ID0gYnRmX2xhc3RfdHlwZShidGYpOwoJaWYgKCFidGZfaXNfZW51bSh0KSkKCQly
ZXR1cm4gbGliYnBmX2VycigtRUlOVkFMKTsKCgkvKiBub24tZW1wdHkgbmFtZSAqLwoJaWYgKCFu
YW1lIHx8ICFuYW1lWzBdKQoJCXJldHVybiBsaWJicGZfZXJyKC1FSU5WQUwpOwoJaWYgKHZhbHVl
IDwgSU5UX01JTiB8fCB2YWx1ZSA+IFVJTlRfTUFYKQoJCXJldHVybiBsaWJicGZfZXJyKC1FMkJJ
Ryk7CgoJLyogZGVjb21wb3NlIGFuZCBpbnZhbGlkYXRlIHJhdyBkYXRhICovCglpZiAoYnRmX2Vu
c3VyZV9tb2RpZmlhYmxlKGJ0ZikpCgkJcmV0dXJuIGxpYmJwZl9lcnIoLUVOT01FTSk7CgoJc3og
PSBzaXplb2Yoc3RydWN0IGJ0Zl9lbnVtKTsKCXYgPSBidGZfYWRkX3R5cGVfbWVtKGJ0Ziwgc3op
OwoJaWYgKCF2KQoJCXJldHVybiBsaWJicGZfZXJyKC1FTk9NRU0pOwoKCW5hbWVfb2ZmID0gYnRm
X19hZGRfc3RyKGJ0ZiwgbmFtZSk7CglpZiAobmFtZV9vZmYgPCAwKQoJCXJldHVybiBuYW1lX29m
ZjsKCgl2LT5uYW1lX29mZiA9IG5hbWVfb2ZmOwoJdi0+dmFsID0gdmFsdWU7CgoJLyogdXBkYXRl
IHBhcmVudCB0eXBlJ3MgdmxlbiAqLwoJdCA9IGJ0Zl9sYXN0X3R5cGUoYnRmKTsKCWJ0Zl90eXBl
X2luY192bGVuKHQpOwoKCS8qIGlmIG5lZ2F0aXZlIHZhbHVlLCBzZXQgc2lnbmVkbmVzcyB0byBz
aWduZWQgKi8KCWlmICh2YWx1ZSA8IDApCgkJdC0+aW5mbyA9IGJ0Zl90eXBlX2luZm8oYnRmX2tp
bmQodCksIGJ0Zl92bGVuKHQpLCB0cnVlKTsKCglidGYtPmhkci0+dHlwZV9sZW4gKz0gc3o7Cgli
dGYtPmhkci0+c3RyX29mZiArPSBzejsKCXJldHVybiAwOwp9CgovKgogKiBBcHBlbmQgbmV3IEJU
Rl9LSU5EX0VOVU02NCB0eXBlIHdpdGg6CiAqICAgLSAqbmFtZSogLSBuYW1lIG9mIHRoZSBlbnVt
LCBjYW4gYmUgTlVMTCBvciBlbXB0eSBmb3IgYW5vbnltb3VzIGVudW1zOwogKiAgIC0gKmJ5dGVf
c3oqIC0gc2l6ZSBvZiB0aGUgZW51bSwgaW4gYnl0ZXMuCiAqICAgLSAqaXNfc2lnbmVkKiAtIHdo
ZXRoZXIgdGhlIGVudW0gdmFsdWVzIGFyZSBzaWduZWQgb3Igbm90OwogKgogKiBFbnVtIGluaXRp
YWxseSBoYXMgbm8gZW51bSB2YWx1ZXMgaW4gaXQgKGFuZCBjb3JyZXNwb25kcyB0byBlbnVtIGZv
cndhcmQKICogZGVjbGFyYXRpb24pLiBFbnVtZXJhdG9yIHZhbHVlcyBjYW4gYmUgYWRkZWQgYnkg
YnRmX19hZGRfZW51bTY0X3ZhbHVlKCkKICogaW1tZWRpYXRlbHkgYWZ0ZXIgYnRmX19hZGRfZW51
bTY0KCkgc3VjY2VlZHMuCiAqCiAqIFJldHVybnM6CiAqICAgLSA+MCwgdHlwZSBJRCBvZiBuZXds
eSBhZGRlZCBCVEYgdHlwZTsKICogICAtIDwwLCBvbiBlcnJvci4KICovCmludCBidGZfX2FkZF9l
bnVtNjQoc3RydWN0IGJ0ZiAqYnRmLCBjb25zdCBjaGFyICpuYW1lLCBfX3UzMiBieXRlX3N6LAoJ
CSAgICBib29sIGlzX3NpZ25lZCkKewoJcmV0dXJuIGJ0Zl9hZGRfZW51bV9jb21tb24oYnRmLCBu
YW1lLCBieXRlX3N6LCBpc19zaWduZWQsCgkJCQkgICBCVEZfS0lORF9FTlVNNjQpOwp9CgovKgog
KiBBcHBlbmQgbmV3IGVudW0gdmFsdWUgZm9yIHRoZSBjdXJyZW50IEVOVU02NCB0eXBlIHdpdGg6
CiAqICAgLSAqbmFtZSogLSBuYW1lIG9mIHRoZSBlbnVtZXJhdG9yIHZhbHVlLCBjYW4ndCBiZSBO
VUxMIG9yIGVtcHR5OwogKiAgIC0gKnZhbHVlKiAtIGludGVnZXIgdmFsdWUgY29ycmVzcG9uZGlu
ZyB0byBlbnVtIHZhbHVlICpuYW1lKjsKICogUmV0dXJuczoKICogICAtICAwLCBvbiBzdWNjZXNz
OwogKiAgIC0gPDAsIG9uIGVycm9yLgogKi8KaW50IGJ0Zl9fYWRkX2VudW02NF92YWx1ZShzdHJ1
Y3QgYnRmICpidGYsIGNvbnN0IGNoYXIgKm5hbWUsIF9fdTY0IHZhbHVlKQp7CglzdHJ1Y3QgYnRm
X2VudW02NCAqdjsKCXN0cnVjdCBidGZfdHlwZSAqdDsKCWludCBzeiwgbmFtZV9vZmY7CgoJLyog
bGFzdCB0eXBlIHNob3VsZCBiZSBCVEZfS0lORF9FTlVNNjQgKi8KCWlmIChidGYtPm5yX3R5cGVz
ID09IDApCgkJcmV0dXJuIGxpYmJwZl9lcnIoLUVJTlZBTCk7Cgl0ID0gYnRmX2xhc3RfdHlwZShi
dGYpOwoJaWYgKCFidGZfaXNfZW51bTY0KHQpKQoJCXJldHVybiBsaWJicGZfZXJyKC1FSU5WQUwp
OwoKCS8qIG5vbi1lbXB0eSBuYW1lICovCglpZiAoIW5hbWUgfHwgIW5hbWVbMF0pCgkJcmV0dXJu
IGxpYmJwZl9lcnIoLUVJTlZBTCk7CgoJLyogZGVjb21wb3NlIGFuZCBpbnZhbGlkYXRlIHJhdyBk
YXRhICovCglpZiAoYnRmX2Vuc3VyZV9tb2RpZmlhYmxlKGJ0ZikpCgkJcmV0dXJuIGxpYmJwZl9l
cnIoLUVOT01FTSk7CgoJc3ogPSBzaXplb2Yoc3RydWN0IGJ0Zl9lbnVtNjQpOwoJdiA9IGJ0Zl9h
ZGRfdHlwZV9tZW0oYnRmLCBzeik7CglpZiAoIXYpCgkJcmV0dXJuIGxpYmJwZl9lcnIoLUVOT01F
TSk7CgoJbmFtZV9vZmYgPSBidGZfX2FkZF9zdHIoYnRmLCBuYW1lKTsKCWlmIChuYW1lX29mZiA8
IDApCgkJcmV0dXJuIG5hbWVfb2ZmOwoKCXYtPm5hbWVfb2ZmID0gbmFtZV9vZmY7Cgl2LT52YWxf
bG8zMiA9IChfX3UzMil2YWx1ZTsKCXYtPnZhbF9oaTMyID0gdmFsdWUgPj4gMzI7CgoJLyogdXBk
YXRlIHBhcmVudCB0eXBlJ3MgdmxlbiAqLwoJdCA9IGJ0Zl9sYXN0X3R5cGUoYnRmKTsKCWJ0Zl90
eXBlX2luY192bGVuKHQpOwoKCWJ0Zi0+aGRyLT50eXBlX2xlbiArPSBzejsKCWJ0Zi0+aGRyLT5z
dHJfb2ZmICs9IHN6OwoJcmV0dXJuIDA7Cn0KCi8qCiAqIEFwcGVuZCBuZXcgQlRGX0tJTkRfRldE
IHR5cGUgd2l0aDoKICogICAtICpuYW1lKiwgbm9uLWVtcHR5L25vbi1OVUxMIG5hbWU7CiAqICAg
LSAqZndkX2tpbmQqLCBraW5kIG9mIGZvcndhcmQgZGVjbGFyYXRpb24sIG9uZSBvZiBCVEZfRldE
X1NUUlVDVCwKICogICAgIEJURl9GV0RfVU5JT04sIG9yIEJURl9GV0RfRU5VTTsKICogUmV0dXJu
czoKICogICAtID4wLCB0eXBlIElEIG9mIG5ld2x5IGFkZGVkIEJURiB0eXBlOwogKiAgIC0gPDAs
IG9uIGVycm9yLgogKi8KaW50IGJ0Zl9fYWRkX2Z3ZChzdHJ1Y3QgYnRmICpidGYsIGNvbnN0IGNo
YXIgKm5hbWUsIGVudW0gYnRmX2Z3ZF9raW5kIGZ3ZF9raW5kKQp7CglpZiAoIW5hbWUgfHwgIW5h
bWVbMF0pCgkJcmV0dXJuIGxpYmJwZl9lcnIoLUVJTlZBTCk7CgoJc3dpdGNoIChmd2Rfa2luZCkg
ewoJY2FzZSBCVEZfRldEX1NUUlVDVDoKCWNhc2UgQlRGX0ZXRF9VTklPTjogewoJCXN0cnVjdCBi
dGZfdHlwZSAqdDsKCQlpbnQgaWQ7CgoJCWlkID0gYnRmX2FkZF9yZWZfa2luZChidGYsIEJURl9L
SU5EX0ZXRCwgbmFtZSwgMCk7CgkJaWYgKGlkIDw9IDApCgkJCXJldHVybiBpZDsKCQl0ID0gYnRm
X3R5cGVfYnlfaWQoYnRmLCBpZCk7CgkJdC0+aW5mbyA9IGJ0Zl90eXBlX2luZm8oQlRGX0tJTkRf
RldELCAwLCBmd2Rfa2luZCA9PSBCVEZfRldEX1VOSU9OKTsKCQlyZXR1cm4gaWQ7Cgl9CgljYXNl
IEJURl9GV0RfRU5VTToKCQkvKiBlbnVtIGZvcndhcmQgaW4gQlRGIGN1cnJlbnRseSBpcyBqdXN0
IGFuIGVudW0gd2l0aCBubyBlbnVtCgkJICogdmFsdWVzOyB3ZSBhbHNvIGFzc3VtZSBhIHN0YW5k
YXJkIDQtYnl0ZSBzaXplIGZvciBpdAoJCSAqLwoJCXJldHVybiBidGZfX2FkZF9lbnVtKGJ0Ziwg
bmFtZSwgc2l6ZW9mKGludCkpOwoJZGVmYXVsdDoKCQlyZXR1cm4gbGliYnBmX2VycigtRUlOVkFM
KTsKCX0KfQoKLyoKICogQXBwZW5kIG5ldyBCVEZfS0lOR19UWVBFREVGIHR5cGUgd2l0aDoKICog
ICAtICpuYW1lKiwgbm9uLWVtcHR5L25vbi1OVUxMIG5hbWU7CiAqICAgLSAqcmVmX3R5cGVfaWQq
IC0gcmVmZXJlbmNlZCB0eXBlIElELCBpdCBtaWdodCBub3QgZXhpc3QgeWV0OwogKiBSZXR1cm5z
OgogKiAgIC0gPjAsIHR5cGUgSUQgb2YgbmV3bHkgYWRkZWQgQlRGIHR5cGU7CiAqICAgLSA8MCwg
b24gZXJyb3IuCiAqLwppbnQgYnRmX19hZGRfdHlwZWRlZihzdHJ1Y3QgYnRmICpidGYsIGNvbnN0
IGNoYXIgKm5hbWUsIGludCByZWZfdHlwZV9pZCkKewoJaWYgKCFuYW1lIHx8ICFuYW1lWzBdKQoJ
CXJldHVybiBsaWJicGZfZXJyKC1FSU5WQUwpOwoKCXJldHVybiBidGZfYWRkX3JlZl9raW5kKGJ0
ZiwgQlRGX0tJTkRfVFlQRURFRiwgbmFtZSwgcmVmX3R5cGVfaWQpOwp9CgovKgogKiBBcHBlbmQg
bmV3IEJURl9LSU5EX1ZPTEFUSUxFIHR5cGUgd2l0aDoKICogICAtICpyZWZfdHlwZV9pZCogLSBy
ZWZlcmVuY2VkIHR5cGUgSUQsIGl0IG1pZ2h0IG5vdCBleGlzdCB5ZXQ7CiAqIFJldHVybnM6CiAq
ICAgLSA+MCwgdHlwZSBJRCBvZiBuZXdseSBhZGRlZCBCVEYgdHlwZTsKICogICAtIDwwLCBvbiBl
cnJvci4KICovCmludCBidGZfX2FkZF92b2xhdGlsZShzdHJ1Y3QgYnRmICpidGYsIGludCByZWZf
dHlwZV9pZCkKewoJcmV0dXJuIGJ0Zl9hZGRfcmVmX2tpbmQoYnRmLCBCVEZfS0lORF9WT0xBVElM
RSwgTlVMTCwgcmVmX3R5cGVfaWQpOwp9CgovKgogKiBBcHBlbmQgbmV3IEJURl9LSU5EX0NPTlNU
IHR5cGUgd2l0aDoKICogICAtICpyZWZfdHlwZV9pZCogLSByZWZlcmVuY2VkIHR5cGUgSUQsIGl0
IG1pZ2h0IG5vdCBleGlzdCB5ZXQ7CiAqIFJldHVybnM6CiAqICAgLSA+MCwgdHlwZSBJRCBvZiBu
ZXdseSBhZGRlZCBCVEYgdHlwZTsKICogICAtIDwwLCBvbiBlcnJvci4KICovCmludCBidGZfX2Fk
ZF9jb25zdChzdHJ1Y3QgYnRmICpidGYsIGludCByZWZfdHlwZV9pZCkKewoJcmV0dXJuIGJ0Zl9h
ZGRfcmVmX2tpbmQoYnRmLCBCVEZfS0lORF9DT05TVCwgTlVMTCwgcmVmX3R5cGVfaWQpOwp9Cgov
KgogKiBBcHBlbmQgbmV3IEJURl9LSU5EX1JFU1RSSUNUIHR5cGUgd2l0aDoKICogICAtICpyZWZf
dHlwZV9pZCogLSByZWZlcmVuY2VkIHR5cGUgSUQsIGl0IG1pZ2h0IG5vdCBleGlzdCB5ZXQ7CiAq
IFJldHVybnM6CiAqICAgLSA+MCwgdHlwZSBJRCBvZiBuZXdseSBhZGRlZCBCVEYgdHlwZTsKICog
ICAtIDwwLCBvbiBlcnJvci4KICovCmludCBidGZfX2FkZF9yZXN0cmljdChzdHJ1Y3QgYnRmICpi
dGYsIGludCByZWZfdHlwZV9pZCkKewoJcmV0dXJuIGJ0Zl9hZGRfcmVmX2tpbmQoYnRmLCBCVEZf
S0lORF9SRVNUUklDVCwgTlVMTCwgcmVmX3R5cGVfaWQpOwp9CgovKgogKiBBcHBlbmQgbmV3IEJU
Rl9LSU5EX1RZUEVfVEFHIHR5cGUgd2l0aDoKICogICAtICp2YWx1ZSosIG5vbi1lbXB0eS9ub24t
TlVMTCB0YWcgdmFsdWU7CiAqICAgLSAqcmVmX3R5cGVfaWQqIC0gcmVmZXJlbmNlZCB0eXBlIElE
LCBpdCBtaWdodCBub3QgZXhpc3QgeWV0OwogKiBSZXR1cm5zOgogKiAgIC0gPjAsIHR5cGUgSUQg
b2YgbmV3bHkgYWRkZWQgQlRGIHR5cGU7CiAqICAgLSA8MCwgb24gZXJyb3IuCiAqLwppbnQgYnRm
X19hZGRfdHlwZV90YWcoc3RydWN0IGJ0ZiAqYnRmLCBjb25zdCBjaGFyICp2YWx1ZSwgaW50IHJl
Zl90eXBlX2lkKQp7CglpZiAoIXZhbHVlIHx8ICF2YWx1ZVswXSkKCQlyZXR1cm4gbGliYnBmX2Vy
cigtRUlOVkFMKTsKCglyZXR1cm4gYnRmX2FkZF9yZWZfa2luZChidGYsIEJURl9LSU5EX1RZUEVf
VEFHLCB2YWx1ZSwgcmVmX3R5cGVfaWQpOwp9CgovKgogKiBBcHBlbmQgbmV3IEJURl9LSU5EX0ZV
TkMgdHlwZSB3aXRoOgogKiAgIC0gKm5hbWUqLCBub24tZW1wdHkvbm9uLU5VTEwgbmFtZTsKICog
ICAtICpwcm90b190eXBlX2lkKiAtIEZVTkNfUFJPVE8ncyB0eXBlIElELCBpdCBtaWdodCBub3Qg
ZXhpc3QgeWV0OwogKiBSZXR1cm5zOgogKiAgIC0gPjAsIHR5cGUgSUQgb2YgbmV3bHkgYWRkZWQg
QlRGIHR5cGU7CiAqICAgLSA8MCwgb24gZXJyb3IuCiAqLwppbnQgYnRmX19hZGRfZnVuYyhzdHJ1
Y3QgYnRmICpidGYsIGNvbnN0IGNoYXIgKm5hbWUsCgkJICBlbnVtIGJ0Zl9mdW5jX2xpbmthZ2Ug
bGlua2FnZSwgaW50IHByb3RvX3R5cGVfaWQpCnsKCWludCBpZDsKCglpZiAoIW5hbWUgfHwgIW5h
bWVbMF0pCgkJcmV0dXJuIGxpYmJwZl9lcnIoLUVJTlZBTCk7CglpZiAobGlua2FnZSAhPSBCVEZf
RlVOQ19TVEFUSUMgJiYgbGlua2FnZSAhPSBCVEZfRlVOQ19HTE9CQUwgJiYKCSAgICBsaW5rYWdl
ICE9IEJURl9GVU5DX0VYVEVSTikKCQlyZXR1cm4gbGliYnBmX2VycigtRUlOVkFMKTsKCglpZCA9
IGJ0Zl9hZGRfcmVmX2tpbmQoYnRmLCBCVEZfS0lORF9GVU5DLCBuYW1lLCBwcm90b190eXBlX2lk
KTsKCWlmIChpZCA+IDApIHsKCQlzdHJ1Y3QgYnRmX3R5cGUgKnQgPSBidGZfdHlwZV9ieV9pZChi
dGYsIGlkKTsKCgkJdC0+aW5mbyA9IGJ0Zl90eXBlX2luZm8oQlRGX0tJTkRfRlVOQywgbGlua2Fn
ZSwgMCk7Cgl9CglyZXR1cm4gbGliYnBmX2VycihpZCk7Cn0KCi8qCiAqIEFwcGVuZCBuZXcgQlRG
X0tJTkRfRlVOQ19QUk9UTyB3aXRoOgogKiAgIC0gKnJldF90eXBlX2lkKiAtIHR5cGUgSUQgZm9y
IHJldHVybiByZXN1bHQgb2YgYSBmdW5jdGlvbi4KICoKICogRnVuY3Rpb24gcHJvdG90eXBlIGlu
aXRpYWxseSBoYXMgbm8gYXJndW1lbnRzLCBidXQgdGhleSBjYW4gYmUgYWRkZWQgYnkKICogYnRm
X19hZGRfZnVuY19wYXJhbSgpIG9uZSBieSBvbmUsIGltbWVkaWF0ZWx5IGFmdGVyCiAqIGJ0Zl9f
YWRkX2Z1bmNfcHJvdG8oKSBzdWNjZWVkZWQuCiAqCiAqIFJldHVybnM6CiAqICAgLSA+MCwgdHlw
ZSBJRCBvZiBuZXdseSBhZGRlZCBCVEYgdHlwZTsKICogICAtIDwwLCBvbiBlcnJvci4KICovCmlu
dCBidGZfX2FkZF9mdW5jX3Byb3RvKHN0cnVjdCBidGYgKmJ0ZiwgaW50IHJldF90eXBlX2lkKQp7
CglzdHJ1Y3QgYnRmX3R5cGUgKnQ7CglpbnQgc3o7CgoJaWYgKHZhbGlkYXRlX3R5cGVfaWQocmV0
X3R5cGVfaWQpKQoJCXJldHVybiBsaWJicGZfZXJyKC1FSU5WQUwpOwoKCWlmIChidGZfZW5zdXJl
X21vZGlmaWFibGUoYnRmKSkKCQlyZXR1cm4gbGliYnBmX2VycigtRU5PTUVNKTsKCglzeiA9IHNp
emVvZihzdHJ1Y3QgYnRmX3R5cGUpOwoJdCA9IGJ0Zl9hZGRfdHlwZV9tZW0oYnRmLCBzeik7Cglp
ZiAoIXQpCgkJcmV0dXJuIGxpYmJwZl9lcnIoLUVOT01FTSk7CgoJLyogc3RhcnQgb3V0IHdpdGgg
dmxlbj0wOyB0aGlzIHdpbGwgYmUgYWRqdXN0ZWQgd2hlbiBhZGRpbmcgZW51bQoJICogdmFsdWVz
LCBpZiBuZWNlc3NhcnkKCSAqLwoJdC0+bmFtZV9vZmYgPSAwOwoJdC0+aW5mbyA9IGJ0Zl90eXBl
X2luZm8oQlRGX0tJTkRfRlVOQ19QUk9UTywgMCwgMCk7Cgl0LT50eXBlID0gcmV0X3R5cGVfaWQ7
CgoJcmV0dXJuIGJ0Zl9jb21taXRfdHlwZShidGYsIHN6KTsKfQoKLyoKICogQXBwZW5kIG5ldyBm
dW5jdGlvbiBwYXJhbWV0ZXIgZm9yIGN1cnJlbnQgRlVOQ19QUk9UTyB0eXBlIHdpdGg6CiAqICAg
LSAqbmFtZSogLSBwYXJhbWV0ZXIgbmFtZSwgY2FuIGJlIE5VTEwgb3IgZW1wdHk7CiAqICAgLSAq
dHlwZV9pZCogLSB0eXBlIElEIGRlc2NyaWJpbmcgdGhlIHR5cGUgb2YgdGhlIHBhcmFtZXRlci4K
ICogUmV0dXJuczoKICogICAtICAwLCBvbiBzdWNjZXNzOwogKiAgIC0gPDAsIG9uIGVycm9yLgog
Ki8KaW50IGJ0Zl9fYWRkX2Z1bmNfcGFyYW0oc3RydWN0IGJ0ZiAqYnRmLCBjb25zdCBjaGFyICpu
YW1lLCBpbnQgdHlwZV9pZCkKewoJc3RydWN0IGJ0Zl90eXBlICp0OwoJc3RydWN0IGJ0Zl9wYXJh
bSAqcDsKCWludCBzeiwgbmFtZV9vZmYgPSAwOwoKCWlmICh2YWxpZGF0ZV90eXBlX2lkKHR5cGVf
aWQpKQoJCXJldHVybiBsaWJicGZfZXJyKC1FSU5WQUwpOwoKCS8qIGxhc3QgdHlwZSBzaG91bGQg
YmUgQlRGX0tJTkRfRlVOQ19QUk9UTyAqLwoJaWYgKGJ0Zi0+bnJfdHlwZXMgPT0gMCkKCQlyZXR1
cm4gbGliYnBmX2VycigtRUlOVkFMKTsKCXQgPSBidGZfbGFzdF90eXBlKGJ0Zik7CglpZiAoIWJ0
Zl9pc19mdW5jX3Byb3RvKHQpKQoJCXJldHVybiBsaWJicGZfZXJyKC1FSU5WQUwpOwoKCS8qIGRl
Y29tcG9zZSBhbmQgaW52YWxpZGF0ZSByYXcgZGF0YSAqLwoJaWYgKGJ0Zl9lbnN1cmVfbW9kaWZp
YWJsZShidGYpKQoJCXJldHVybiBsaWJicGZfZXJyKC1FTk9NRU0pOwoKCXN6ID0gc2l6ZW9mKHN0
cnVjdCBidGZfcGFyYW0pOwoJcCA9IGJ0Zl9hZGRfdHlwZV9tZW0oYnRmLCBzeik7CglpZiAoIXAp
CgkJcmV0dXJuIGxpYmJwZl9lcnIoLUVOT01FTSk7CgoJaWYgKG5hbWUgJiYgbmFtZVswXSkgewoJ
CW5hbWVfb2ZmID0gYnRmX19hZGRfc3RyKGJ0ZiwgbmFtZSk7CgkJaWYgKG5hbWVfb2ZmIDwgMCkK
CQkJcmV0dXJuIG5hbWVfb2ZmOwoJfQoKCXAtPm5hbWVfb2ZmID0gbmFtZV9vZmY7CglwLT50eXBl
ID0gdHlwZV9pZDsKCgkvKiB1cGRhdGUgcGFyZW50IHR5cGUncyB2bGVuICovCgl0ID0gYnRmX2xh
c3RfdHlwZShidGYpOwoJYnRmX3R5cGVfaW5jX3ZsZW4odCk7CgoJYnRmLT5oZHItPnR5cGVfbGVu
ICs9IHN6OwoJYnRmLT5oZHItPnN0cl9vZmYgKz0gc3o7CglyZXR1cm4gMDsKfQoKLyoKICogQXBw
ZW5kIG5ldyBCVEZfS0lORF9WQVIgdHlwZSB3aXRoOgogKiAgIC0gKm5hbWUqIC0gbm9uLWVtcHR5
L25vbi1OVUxMIG5hbWU7CiAqICAgLSAqbGlua2FnZSogLSB2YXJpYWJsZSBsaW5rYWdlLCBvbmUg
b2YgQlRGX1ZBUl9TVEFUSUMsCiAqICAgICBCVEZfVkFSX0dMT0JBTF9BTExPQ0FURUQsIG9yIEJU
Rl9WQVJfR0xPQkFMX0VYVEVSTjsKICogICAtICp0eXBlX2lkKiAtIHR5cGUgSUQgb2YgdGhlIHR5
cGUgZGVzY3JpYmluZyB0aGUgdHlwZSBvZiB0aGUgdmFyaWFibGUuCiAqIFJldHVybnM6CiAqICAg
LSA+MCwgdHlwZSBJRCBvZiBuZXdseSBhZGRlZCBCVEYgdHlwZTsKICogICAtIDwwLCBvbiBlcnJv
ci4KICovCmludCBidGZfX2FkZF92YXIoc3RydWN0IGJ0ZiAqYnRmLCBjb25zdCBjaGFyICpuYW1l
LCBpbnQgbGlua2FnZSwgaW50IHR5cGVfaWQpCnsKCXN0cnVjdCBidGZfdHlwZSAqdDsKCXN0cnVj
dCBidGZfdmFyICp2OwoJaW50IHN6LCBuYW1lX29mZjsKCgkvKiBub24tZW1wdHkgbmFtZSAqLwoJ
aWYgKCFuYW1lIHx8ICFuYW1lWzBdKQoJCXJldHVybiBsaWJicGZfZXJyKC1FSU5WQUwpOwoJaWYg
KGxpbmthZ2UgIT0gQlRGX1ZBUl9TVEFUSUMgJiYgbGlua2FnZSAhPSBCVEZfVkFSX0dMT0JBTF9B
TExPQ0FURUQgJiYKCSAgICBsaW5rYWdlICE9IEJURl9WQVJfR0xPQkFMX0VYVEVSTikKCQlyZXR1
cm4gbGliYnBmX2VycigtRUlOVkFMKTsKCWlmICh2YWxpZGF0ZV90eXBlX2lkKHR5cGVfaWQpKQoJ
CXJldHVybiBsaWJicGZfZXJyKC1FSU5WQUwpOwoKCS8qIGRlY29uc3RydWN0IEJURiwgaWYgbmVj
ZXNzYXJ5LCBhbmQgaW52YWxpZGF0ZSByYXdfZGF0YSAqLwoJaWYgKGJ0Zl9lbnN1cmVfbW9kaWZp
YWJsZShidGYpKQoJCXJldHVybiBsaWJicGZfZXJyKC1FTk9NRU0pOwoKCXN6ID0gc2l6ZW9mKHN0
cnVjdCBidGZfdHlwZSkgKyBzaXplb2Yoc3RydWN0IGJ0Zl92YXIpOwoJdCA9IGJ0Zl9hZGRfdHlw
ZV9tZW0oYnRmLCBzeik7CglpZiAoIXQpCgkJcmV0dXJuIGxpYmJwZl9lcnIoLUVOT01FTSk7CgoJ
bmFtZV9vZmYgPSBidGZfX2FkZF9zdHIoYnRmLCBuYW1lKTsKCWlmIChuYW1lX29mZiA8IDApCgkJ
cmV0dXJuIG5hbWVfb2ZmOwoKCXQtPm5hbWVfb2ZmID0gbmFtZV9vZmY7Cgl0LT5pbmZvID0gYnRm
X3R5cGVfaW5mbyhCVEZfS0lORF9WQVIsIDAsIDApOwoJdC0+dHlwZSA9IHR5cGVfaWQ7CgoJdiA9
IGJ0Zl92YXIodCk7Cgl2LT5saW5rYWdlID0gbGlua2FnZTsKCglyZXR1cm4gYnRmX2NvbW1pdF90
eXBlKGJ0Ziwgc3opOwp9CgovKgogKiBBcHBlbmQgbmV3IEJURl9LSU5EX0RBVEFTRUMgdHlwZSB3
aXRoOgogKiAgIC0gKm5hbWUqIC0gbm9uLWVtcHR5L25vbi1OVUxMIG5hbWU7CiAqICAgLSAqYnl0
ZV9zeiogLSBkYXRhIHNlY3Rpb24gc2l6ZSwgaW4gYnl0ZXMuCiAqCiAqIERhdGEgc2VjdGlvbiBp
cyBpbml0aWFsbHkgZW1wdHkuIFZhcmlhYmxlcyBpbmZvIGNhbiBiZSBhZGRlZCB3aXRoCiAqIGJ0
Zl9fYWRkX2RhdGFzZWNfdmFyX2luZm8oKSBjYWxscywgYWZ0ZXIgYnRmX19hZGRfZGF0YXNlYygp
IHN1Y2NlZWRzLgogKgogKiBSZXR1cm5zOgogKiAgIC0gPjAsIHR5cGUgSUQgb2YgbmV3bHkgYWRk
ZWQgQlRGIHR5cGU7CiAqICAgLSA8MCwgb24gZXJyb3IuCiAqLwppbnQgYnRmX19hZGRfZGF0YXNl
YyhzdHJ1Y3QgYnRmICpidGYsIGNvbnN0IGNoYXIgKm5hbWUsIF9fdTMyIGJ5dGVfc3opCnsKCXN0
cnVjdCBidGZfdHlwZSAqdDsKCWludCBzeiwgbmFtZV9vZmY7CgoJLyogbm9uLWVtcHR5IG5hbWUg
Ki8KCWlmICghbmFtZSB8fCAhbmFtZVswXSkKCQlyZXR1cm4gbGliYnBmX2VycigtRUlOVkFMKTsK
CglpZiAoYnRmX2Vuc3VyZV9tb2RpZmlhYmxlKGJ0ZikpCgkJcmV0dXJuIGxpYmJwZl9lcnIoLUVO
T01FTSk7CgoJc3ogPSBzaXplb2Yoc3RydWN0IGJ0Zl90eXBlKTsKCXQgPSBidGZfYWRkX3R5cGVf
bWVtKGJ0Ziwgc3opOwoJaWYgKCF0KQoJCXJldHVybiBsaWJicGZfZXJyKC1FTk9NRU0pOwoKCW5h
bWVfb2ZmID0gYnRmX19hZGRfc3RyKGJ0ZiwgbmFtZSk7CglpZiAobmFtZV9vZmYgPCAwKQoJCXJl
dHVybiBuYW1lX29mZjsKCgkvKiBzdGFydCB3aXRoIHZsZW49MCwgd2hpY2ggd2lsbCBiZSB1cGRh
dGUgYXMgdmFyX3NlY2luZm9zIGFyZSBhZGRlZCAqLwoJdC0+bmFtZV9vZmYgPSBuYW1lX29mZjsK
CXQtPmluZm8gPSBidGZfdHlwZV9pbmZvKEJURl9LSU5EX0RBVEFTRUMsIDAsIDApOwoJdC0+c2l6
ZSA9IGJ5dGVfc3o7CgoJcmV0dXJuIGJ0Zl9jb21taXRfdHlwZShidGYsIHN6KTsKfQoKLyoKICog
QXBwZW5kIG5ldyBkYXRhIHNlY3Rpb24gdmFyaWFibGUgaW5mb3JtYXRpb24gZW50cnkgZm9yIGN1
cnJlbnQgREFUQVNFQyB0eXBlOgogKiAgIC0gKnZhcl90eXBlX2lkKiAtIHR5cGUgSUQsIGRlc2Ny
aWJpbmcgdHlwZSBvZiB0aGUgdmFyaWFibGU7CiAqICAgLSAqb2Zmc2V0KiAtIHZhcmlhYmxlIG9m
ZnNldCB3aXRoaW4gZGF0YSBzZWN0aW9uLCBpbiBieXRlczsKICogICAtICpieXRlX3N6KiAtIHZh
cmlhYmxlIHNpemUsIGluIGJ5dGVzLgogKgogKiBSZXR1cm5zOgogKiAgIC0gIDAsIG9uIHN1Y2Nl
c3M7CiAqICAgLSA8MCwgb24gZXJyb3IuCiAqLwppbnQgYnRmX19hZGRfZGF0YXNlY192YXJfaW5m
byhzdHJ1Y3QgYnRmICpidGYsIGludCB2YXJfdHlwZV9pZCwgX191MzIgb2Zmc2V0LCBfX3UzMiBi
eXRlX3N6KQp7CglzdHJ1Y3QgYnRmX3R5cGUgKnQ7CglzdHJ1Y3QgYnRmX3Zhcl9zZWNpbmZvICp2
OwoJaW50IHN6OwoKCS8qIGxhc3QgdHlwZSBzaG91bGQgYmUgQlRGX0tJTkRfREFUQVNFQyAqLwoJ
aWYgKGJ0Zi0+bnJfdHlwZXMgPT0gMCkKCQlyZXR1cm4gbGliYnBmX2VycigtRUlOVkFMKTsKCXQg
PSBidGZfbGFzdF90eXBlKGJ0Zik7CglpZiAoIWJ0Zl9pc19kYXRhc2VjKHQpKQoJCXJldHVybiBs
aWJicGZfZXJyKC1FSU5WQUwpOwoKCWlmICh2YWxpZGF0ZV90eXBlX2lkKHZhcl90eXBlX2lkKSkK
CQlyZXR1cm4gbGliYnBmX2VycigtRUlOVkFMKTsKCgkvKiBkZWNvbXBvc2UgYW5kIGludmFsaWRh
dGUgcmF3IGRhdGEgKi8KCWlmIChidGZfZW5zdXJlX21vZGlmaWFibGUoYnRmKSkKCQlyZXR1cm4g
bGliYnBmX2VycigtRU5PTUVNKTsKCglzeiA9IHNpemVvZihzdHJ1Y3QgYnRmX3Zhcl9zZWNpbmZv
KTsKCXYgPSBidGZfYWRkX3R5cGVfbWVtKGJ0Ziwgc3opOwoJaWYgKCF2KQoJCXJldHVybiBsaWJi
cGZfZXJyKC1FTk9NRU0pOwoKCXYtPnR5cGUgPSB2YXJfdHlwZV9pZDsKCXYtPm9mZnNldCA9IG9m
ZnNldDsKCXYtPnNpemUgPSBieXRlX3N6OwoKCS8qIHVwZGF0ZSBwYXJlbnQgdHlwZSdzIHZsZW4g
Ki8KCXQgPSBidGZfbGFzdF90eXBlKGJ0Zik7CglidGZfdHlwZV9pbmNfdmxlbih0KTsKCglidGYt
Pmhkci0+dHlwZV9sZW4gKz0gc3o7CglidGYtPmhkci0+c3RyX29mZiArPSBzejsKCXJldHVybiAw
Owp9CgovKgogKiBBcHBlbmQgbmV3IEJURl9LSU5EX0RFQ0xfVEFHIHR5cGUgd2l0aDoKICogICAt
ICp2YWx1ZSogLSBub24tZW1wdHkvbm9uLU5VTEwgc3RyaW5nOwogKiAgIC0gKnJlZl90eXBlX2lk
KiAtIHJlZmVyZW5jZWQgdHlwZSBJRCwgaXQgbWlnaHQgbm90IGV4aXN0IHlldDsKICogICAtICpj
b21wb25lbnRfaWR4KiAtIC0xIGZvciB0YWdnaW5nIHJlZmVyZW5jZSB0eXBlLCBvdGhlcndpc2Ug
c3RydWN0L3VuaW9uCiAqICAgICBtZW1iZXIgb3IgZnVuY3Rpb24gYXJndW1lbnQgaW5kZXg7CiAq
IFJldHVybnM6CiAqICAgLSA+MCwgdHlwZSBJRCBvZiBuZXdseSBhZGRlZCBCVEYgdHlwZTsKICog
ICAtIDwwLCBvbiBlcnJvci4KICovCmludCBidGZfX2FkZF9kZWNsX3RhZyhzdHJ1Y3QgYnRmICpi
dGYsIGNvbnN0IGNoYXIgKnZhbHVlLCBpbnQgcmVmX3R5cGVfaWQsCgkJIGludCBjb21wb25lbnRf
aWR4KQp7CglzdHJ1Y3QgYnRmX3R5cGUgKnQ7CglpbnQgc3osIHZhbHVlX29mZjsKCglpZiAoIXZh
bHVlIHx8ICF2YWx1ZVswXSB8fCBjb21wb25lbnRfaWR4IDwgLTEpCgkJcmV0dXJuIGxpYmJwZl9l
cnIoLUVJTlZBTCk7CgoJaWYgKHZhbGlkYXRlX3R5cGVfaWQocmVmX3R5cGVfaWQpKQoJCXJldHVy
biBsaWJicGZfZXJyKC1FSU5WQUwpOwoKCWlmIChidGZfZW5zdXJlX21vZGlmaWFibGUoYnRmKSkK
CQlyZXR1cm4gbGliYnBmX2VycigtRU5PTUVNKTsKCglzeiA9IHNpemVvZihzdHJ1Y3QgYnRmX3R5
cGUpICsgc2l6ZW9mKHN0cnVjdCBidGZfZGVjbF90YWcpOwoJdCA9IGJ0Zl9hZGRfdHlwZV9tZW0o
YnRmLCBzeik7CglpZiAoIXQpCgkJcmV0dXJuIGxpYmJwZl9lcnIoLUVOT01FTSk7CgoJdmFsdWVf
b2ZmID0gYnRmX19hZGRfc3RyKGJ0ZiwgdmFsdWUpOwoJaWYgKHZhbHVlX29mZiA8IDApCgkJcmV0
dXJuIHZhbHVlX29mZjsKCgl0LT5uYW1lX29mZiA9IHZhbHVlX29mZjsKCXQtPmluZm8gPSBidGZf
dHlwZV9pbmZvKEJURl9LSU5EX0RFQ0xfVEFHLCAwLCBmYWxzZSk7Cgl0LT50eXBlID0gcmVmX3R5
cGVfaWQ7CglidGZfZGVjbF90YWcodCktPmNvbXBvbmVudF9pZHggPSBjb21wb25lbnRfaWR4OwoK
CXJldHVybiBidGZfY29tbWl0X3R5cGUoYnRmLCBzeik7Cn0KCnN0cnVjdCBidGZfZXh0X3NlY19p
bmZvX3BhcmFtIHsKCV9fdTMyIG9mZjsKCV9fdTMyIGxlbjsKCV9fdTMyIG1pbl9yZWNfc2l6ZTsK
CXN0cnVjdCBidGZfZXh0X2luZm8gKmV4dF9pbmZvOwoJY29uc3QgY2hhciAqZGVzYzsKfTsKCi8q
CiAqIFBhcnNlIGEgc2luZ2xlIGluZm8gc3Vic2VjdGlvbiBvZiB0aGUgQlRGLmV4dCBpbmZvIGRh
dGE6CiAqICAtIHZhbGlkYXRlIHN1YnNlY3Rpb24gc3RydWN0dXJlIGFuZCBlbGVtZW50cwogKiAg
LSBzYXZlIGluZm8gc3Vic2VjdGlvbiBzdGFydCBhbmQgc2l6aW5nIGRldGFpbHMgaW4gc3RydWN0
IGJ0Zl9leHQKICogIC0gZW5kaWFuLWluZGVwZW5kZW50IG9wZXJhdGlvbiwgZm9yIGNhbGxpbmcg
YmVmb3JlIGJ5dGUtc3dhcHBpbmcKICovCnN0YXRpYyBpbnQgYnRmX2V4dF9wYXJzZV9zZWNfaW5m
byhzdHJ1Y3QgYnRmX2V4dCAqYnRmX2V4dCwKCQkJCSAgc3RydWN0IGJ0Zl9leHRfc2VjX2luZm9f
cGFyYW0gKmV4dF9zZWMsCgkJCQkgIGJvb2wgaXNfbmF0aXZlKQp7Cgljb25zdCBzdHJ1Y3QgYnRm
X2V4dF9pbmZvX3NlYyAqc2luZm87CglzdHJ1Y3QgYnRmX2V4dF9pbmZvICpleHRfaW5mbzsKCV9f
dTMyIGluZm9fbGVmdCwgcmVjb3JkX3NpemU7CglzaXplX3Qgc2VjX2NudCA9IDA7Cgl2b2lkICpp
bmZvOwoKCWlmIChleHRfc2VjLT5sZW4gPT0gMCkKCQlyZXR1cm4gMDsKCglpZiAoZXh0X3NlYy0+
b2ZmICYgMHgwMykgewoJCXByX2RlYnVnKCIuQlRGLmV4dCAlcyBzZWN0aW9uIGlzIG5vdCBhbGln
bmVkIHRvIDQgYnl0ZXNcbiIsCgkJICAgICBleHRfc2VjLT5kZXNjKTsKCQlyZXR1cm4gLUVJTlZB
TDsKCX0KCgkvKiBUaGUgc3RhcnQgb2YgdGhlIGluZm8gc2VjIChpbmNsdWRpbmcgdGhlIF9fdTMy
IHJlY29yZF9zaXplKS4gKi8KCWluZm8gPSBidGZfZXh0LT5kYXRhICsgYnRmX2V4dC0+aGRyLT5o
ZHJfbGVuICsgZXh0X3NlYy0+b2ZmOwoJaW5mb19sZWZ0ID0gZXh0X3NlYy0+bGVuOwoKCWlmIChi
dGZfZXh0LT5kYXRhICsgYnRmX2V4dC0+ZGF0YV9zaXplIDwgaW5mbyArIGV4dF9zZWMtPmxlbikg
ewoJCXByX2RlYnVnKCIlcyBzZWN0aW9uIChvZmY6JXUgbGVuOiV1KSBpcyBiZXlvbmQgdGhlIGVu
ZCBvZiB0aGUgRUxGIHNlY3Rpb24gLkJURi5leHRcbiIsCgkJCSBleHRfc2VjLT5kZXNjLCBleHRf
c2VjLT5vZmYsIGV4dF9zZWMtPmxlbik7CgkJcmV0dXJuIC1FSU5WQUw7Cgl9CgoJLyogQXQgbGVh
c3QgYSByZWNvcmQgc2l6ZSAqLwoJaWYgKGluZm9fbGVmdCA8IHNpemVvZihfX3UzMikpIHsKCQlw
cl9kZWJ1ZygiLkJURi5leHQgJXMgcmVjb3JkIHNpemUgbm90IGZvdW5kXG4iLCBleHRfc2VjLT5k
ZXNjKTsKCQlyZXR1cm4gLUVJTlZBTDsKCX0KCgkvKiBUaGUgcmVjb3JkIHNpemUgbmVlZHMgdG8g
bWVldCBlaXRoZXIgdGhlIG1pbmltdW0gc3RhbmRhcmQgb3IsIHdoZW4KCSAqIGhhbmRsaW5nIG5v
bi1uYXRpdmUgZW5kaWFubmVzcyBkYXRhLCB0aGUgZXhhY3Qgc3RhbmRhcmQgc28gYXMKCSAqIHRv
IGFsbG93IHNhZmUgYnl0ZS1zd2FwcGluZy4KCSAqLwoJcmVjb3JkX3NpemUgPSBpc19uYXRpdmUg
PyAqKF9fdTMyICopaW5mbyA6IGJzd2FwXzMyKCooX191MzIgKilpbmZvKTsKCWlmIChyZWNvcmRf
c2l6ZSA8IGV4dF9zZWMtPm1pbl9yZWNfc2l6ZSB8fAoJICAgICghaXNfbmF0aXZlICYmIHJlY29y
ZF9zaXplICE9IGV4dF9zZWMtPm1pbl9yZWNfc2l6ZSkgfHwKCSAgICByZWNvcmRfc2l6ZSAmIDB4
MDMpIHsKCQlwcl9kZWJ1ZygiJXMgc2VjdGlvbiBpbiAuQlRGLmV4dCBoYXMgaW52YWxpZCByZWNv
cmQgc2l6ZSAldVxuIiwKCQkJIGV4dF9zZWMtPmRlc2MsIHJlY29yZF9zaXplKTsKCQlyZXR1cm4g
LUVJTlZBTDsKCX0KCglzaW5mbyA9IGluZm8gKyBzaXplb2YoX191MzIpOwoJaW5mb19sZWZ0IC09
IHNpemVvZihfX3UzMik7CgoJLyogSWYgbm8gcmVjb3JkcywgcmV0dXJuIGZhaWx1cmUgbm93IHNv
IC5CVEYuZXh0IHdvbid0IGJlIHVzZWQuICovCglpZiAoIWluZm9fbGVmdCkgewoJCXByX2RlYnVn
KCIlcyBzZWN0aW9uIGluIC5CVEYuZXh0IGhhcyBubyByZWNvcmRzXG4iLCBleHRfc2VjLT5kZXNj
KTsKCQlyZXR1cm4gLUVJTlZBTDsKCX0KCgl3aGlsZSAoaW5mb19sZWZ0KSB7CgkJdW5zaWduZWQg
aW50IHNlY19oZHJsZW4gPSBzaXplb2Yoc3RydWN0IGJ0Zl9leHRfaW5mb19zZWMpOwoJCV9fdTY0
IHRvdGFsX3JlY29yZF9zaXplOwoJCV9fdTMyIG51bV9yZWNvcmRzOwoKCQlpZiAoaW5mb19sZWZ0
IDwgc2VjX2hkcmxlbikgewoJCQlwcl9kZWJ1ZygiJXMgc2VjdGlvbiBoZWFkZXIgaXMgbm90IGZv
dW5kIGluIC5CVEYuZXh0XG4iLAoJCQkgICAgIGV4dF9zZWMtPmRlc2MpOwoJCQlyZXR1cm4gLUVJ
TlZBTDsKCQl9CgoJCW51bV9yZWNvcmRzID0gaXNfbmF0aXZlID8gc2luZm8tPm51bV9pbmZvIDog
YnN3YXBfMzIoc2luZm8tPm51bV9pbmZvKTsKCQlpZiAobnVtX3JlY29yZHMgPT0gMCkgewoJCQlw
cl9kZWJ1ZygiJXMgc2VjdGlvbiBoYXMgaW5jb3JyZWN0IG51bV9yZWNvcmRzIGluIC5CVEYuZXh0
XG4iLAoJCQkgICAgIGV4dF9zZWMtPmRlc2MpOwoJCQlyZXR1cm4gLUVJTlZBTDsKCQl9CgoJCXRv
dGFsX3JlY29yZF9zaXplID0gc2VjX2hkcmxlbiArIChfX3U2NCludW1fcmVjb3JkcyAqIHJlY29y
ZF9zaXplOwoJCWlmIChpbmZvX2xlZnQgPCB0b3RhbF9yZWNvcmRfc2l6ZSkgewoJCQlwcl9kZWJ1
ZygiJXMgc2VjdGlvbiBoYXMgaW5jb3JyZWN0IG51bV9yZWNvcmRzIGluIC5CVEYuZXh0XG4iLAoJ
CQkgICAgIGV4dF9zZWMtPmRlc2MpOwoJCQlyZXR1cm4gLUVJTlZBTDsKCQl9CgoJCWluZm9fbGVm
dCAtPSB0b3RhbF9yZWNvcmRfc2l6ZTsKCQlzaW5mbyA9ICh2b2lkICopc2luZm8gKyB0b3RhbF9y
ZWNvcmRfc2l6ZTsKCQlzZWNfY250Kys7Cgl9CgoJZXh0X2luZm8gPSBleHRfc2VjLT5leHRfaW5m
bzsKCWV4dF9pbmZvLT5sZW4gPSBleHRfc2VjLT5sZW4gLSBzaXplb2YoX191MzIpOwoJZXh0X2lu
Zm8tPnJlY19zaXplID0gcmVjb3JkX3NpemU7CglleHRfaW5mby0+aW5mbyA9IGluZm8gKyBzaXpl
b2YoX191MzIpOwoJZXh0X2luZm8tPnNlY19jbnQgPSBzZWNfY250OwoKCXJldHVybiAwOwp9Cgov
KiBQYXJzZSBhbGwgaW5mbyBzZWNzIGluIHRoZSBCVEYuZXh0IGluZm8gZGF0YSAqLwpzdGF0aWMg
aW50IGJ0Zl9leHRfcGFyc2VfaW5mbyhzdHJ1Y3QgYnRmX2V4dCAqYnRmX2V4dCwgYm9vbCBpc19u
YXRpdmUpCnsKICAgIHN0cnVjdCBidGZfZXh0X3NlY19pbmZvX3BhcmFtIGZ1bmNfaW5mbyA9IHsK
ICAgICAgICAub2ZmID0gYnRmX2V4dC0+aGRyLT5mdW5jX2luZm9fb2ZmLAogICAgICAgIC5sZW4g
PSBidGZfZXh0LT5oZHItPmZ1bmNfaW5mb19sZW4sCiAgICAgICAgLm1pbl9yZWNfc2l6ZSA9IHNp
emVvZihzdHJ1Y3QgYnBmX2Z1bmNfaW5mb19taW4pLAogICAgICAgIC5leHRfaW5mbyA9ICZidGZf
ZXh0LT5mdW5jX2luZm8sCiAgICAgICAgLmRlc2MgPSAiZnVuY19pbmZvIgogICAgfTsKICAgIHN0
cnVjdCBidGZfZXh0X3NlY19pbmZvX3BhcmFtIGxpbmVfaW5mbyA9IHsKICAgICAgICAub2ZmID0g
YnRmX2V4dC0+aGRyLT5saW5lX2luZm9fb2ZmLAogICAgICAgIC5sZW4gPSBidGZfZXh0LT5oZHIt
PmxpbmVfaW5mb19sZW4sCiAgICAgICAgLm1pbl9yZWNfc2l6ZSA9IHNpemVvZihzdHJ1Y3QgYnBm
X2xpbmVfaW5mb19taW4pLAogICAgICAgIC5leHRfaW5mbyA9ICZidGZfZXh0LT5saW5lX2luZm8s
CiAgICAgICAgLmRlc2MgPSAibGluZV9pbmZvIgogICAgfTsKICAgIHN0cnVjdCBidGZfZXh0X3Nl
Y19pbmZvX3BhcmFtIGNvcmVfcmVsbyA9IHsKICAgICAgICAub2ZmID0gYnRmX2V4dC0+aGRyLT5j
b3JlX3JlbG9fb2ZmLAogICAgICAgIC5sZW4gPSBidGZfZXh0LT5oZHItPmNvcmVfcmVsb19sZW4s
CiAgICAgICAgLm1pbl9yZWNfc2l6ZSA9IHNpemVvZihzdHJ1Y3QgYnBmX2NvcmVfcmVsbyksCiAg
ICAgICAgLmV4dF9pbmZvID0gJmJ0Zl9leHQtPmNvcmVfcmVsb19pbmZvLAogICAgICAgIC5kZXNj
ID0gImNvcmVfcmVsbyIKICAgIH07CiAgICAKICAgIGludCBlcnI7CiAgICAKICAgIGlmIChidGZf
ZXh0LT5oZHItPmZ1bmNfaW5mb19vZmYgKyBidGZfZXh0LT5oZHItPmZ1bmNfaW5mb19sZW4gPiBi
dGZfZXh0LT5oZHItPmhkcl9sZW4pIHsKICAgICAgICByZXR1cm4gLTE7CiAgICB9CiAgICBlcnIg
PSBidGZfZXh0X3BhcnNlX3NlY19pbmZvKGJ0Zl9leHQsICZmdW5jX2luZm8sIGlzX25hdGl2ZSk7
CiAgICBpZiAoZXJyKSByZXR1cm4gZXJyOwogICAgCiAgICBpZiAoYnRmX2V4dC0+aGRyLT5saW5l
X2luZm9fb2ZmICsgYnRmX2V4dC0+aGRyLT5saW5lX2luZm9fbGVuID4gYnRmX2V4dC0+aGRyLT5o
ZHJfbGVuKSB7CiAgICAgICAgcmV0dXJuIC0xOwogICAgfQogICAgZXJyID0gYnRmX2V4dF9wYXJz
ZV9zZWNfaW5mbyhidGZfZXh0LCAmbGluZV9pbmZvLCBpc19uYXRpdmUpOwogICAgaWYgKGVycikg
cmV0dXJuIGVycjsKCiAgICBpZiAoYnRmX2V4dC0+aGRyLT5jb3JlX3JlbG9fb2ZmICsgYnRmX2V4
dC0+aGRyLT5jb3JlX3JlbG9fbGVuID4gYnRmX2V4dC0+aGRyLT5oZHJfbGVuKSB7CiAgICAgICAg
cmV0dXJuIDA7CiAgICB9CiAgICBlcnIgPSBidGZfZXh0X3BhcnNlX3NlY19pbmZvKGJ0Zl9leHQs
ICZjb3JlX3JlbG8sIGlzX25hdGl2ZSk7CiAgICBpZiAoZXJyKSByZXR1cm4gZXJyOwoKICAgIHJl
dHVybiAwOwp9CgoKLyogU3dhcCBieXRlLW9yZGVyIG9mIEJURi5leHQgaGVhZGVyIHdpdGggYW55
IGVuZGlhbm5lc3MgKi8Kc3RhdGljIHZvaWQgYnRmX2V4dF9ic3dhcF9oZHIoc3RydWN0IGJ0Zl9l
eHRfaGVhZGVyICpoKQp7Cglib29sIGlzX25hdGl2ZSA9IGgtPm1hZ2ljID09IEJURl9NQUdJQzsK
CV9fdTMyIGhkcl9sZW47CgoJaGRyX2xlbiA9IGlzX25hdGl2ZSA/IGgtPmhkcl9sZW4gOiBic3dh
cF8zMihoLT5oZHJfbGVuKTsKCgloLT5tYWdpYyA9IGJzd2FwXzE2KGgtPm1hZ2ljKTsKCWgtPmhk
cl9sZW4gPSBic3dhcF8zMihoLT5oZHJfbGVuKTsKCWgtPmZ1bmNfaW5mb19vZmYgPSBic3dhcF8z
MihoLT5mdW5jX2luZm9fb2ZmKTsKCWgtPmZ1bmNfaW5mb19sZW4gPSBic3dhcF8zMihoLT5mdW5j
X2luZm9fbGVuKTsKCWgtPmxpbmVfaW5mb19vZmYgPSBic3dhcF8zMihoLT5saW5lX2luZm9fb2Zm
KTsKCWgtPmxpbmVfaW5mb19sZW4gPSBic3dhcF8zMihoLT5saW5lX2luZm9fbGVuKTsKCglpZiAo
aGRyX2xlbiA8IG9mZnNldG9mZW5kKHN0cnVjdCBidGZfZXh0X2hlYWRlciwgY29yZV9yZWxvX2xl
bikpCgkJcmV0dXJuOwoKCWgtPmNvcmVfcmVsb19vZmYgPSBic3dhcF8zMihoLT5jb3JlX3JlbG9f
b2ZmKTsKCWgtPmNvcmVfcmVsb19sZW4gPSBic3dhcF8zMihoLT5jb3JlX3JlbG9fbGVuKTsKfQoK
LyogU3dhcCBieXRlLW9yZGVyIG9mIGdlbmVyaWMgaW5mbyBzdWJzZWN0aW9uICovCnN0YXRpYyB2
b2lkIGJ0Zl9leHRfYnN3YXBfaW5mb19zZWModm9pZCAqaW5mbywgX191MzIgbGVuLCBib29sIGlz
X25hdGl2ZSwKCQkJCSAgIGluZm9fcmVjX2Jzd2FwX2ZuIGJzd2FwX2ZuKQp7CglzdHJ1Y3QgYnRm
X2V4dF9pbmZvX3NlYyAqc2VjOwoJX191MzIgaW5mb19sZWZ0LCByZWNfc2l6ZSwgKnJzOwoKCWlm
IChsZW4gPT0gMCkKCQlyZXR1cm47CgoJcnMgPSBpbmZvOwkJCQkvKiBpbmZvIHJlY29yZCBzaXpl
ICovCglyZWNfc2l6ZSA9IGlzX25hdGl2ZSA/ICpycyA6IGJzd2FwXzMyKCpycyk7CgkqcnMgPSBi
c3dhcF8zMigqcnMpOwoKCXNlYyA9IGluZm8gKyBzaXplb2YoX191MzIpOwkJLyogaW5mbyBzZWMg
IzEgKi8KCWluZm9fbGVmdCA9IGxlbiAtIHNpemVvZihfX3UzMik7Cgl3aGlsZSAoaW5mb19sZWZ0
KSB7CgkJdW5zaWduZWQgaW50IHNlY19oZHJsZW4gPSBzaXplb2Yoc3RydWN0IGJ0Zl9leHRfaW5m
b19zZWMpOwoJCV9fdTMyIGksIG51bV9yZWNzOwoJCXZvaWQgKnA7CgoJCW51bV9yZWNzID0gaXNf
bmF0aXZlID8gc2VjLT5udW1faW5mbyA6IGJzd2FwXzMyKHNlYy0+bnVtX2luZm8pOwoJCXNlYy0+
c2VjX25hbWVfb2ZmID0gYnN3YXBfMzIoc2VjLT5zZWNfbmFtZV9vZmYpOwoJCXNlYy0+bnVtX2lu
Zm8gPSBic3dhcF8zMihzZWMtPm51bV9pbmZvKTsKCQlwID0gc2VjLT5kYXRhOwkJCS8qIGluZm8g
cmVjICMxICovCgkJZm9yIChpID0gMDsgaSA8IG51bV9yZWNzOyBpKyssIHAgKz0gcmVjX3NpemUp
CgkJCWJzd2FwX2ZuKHApOwoJCXNlYyA9IHA7CgkJaW5mb19sZWZ0IC09IHNlY19oZHJsZW4gKyAo
X191NjQpcmVjX3NpemUgKiBudW1fcmVjczsKCX0KfQoKLyoKICogU3dhcCBieXRlLW9yZGVyIG9m
IGFsbCBpbmZvIGRhdGEgaW4gYSBCVEYuZXh0IHNlY3Rpb24KICogIC0gcmVxdWlyZXMgQlRGLmV4
dCBoZHIgaW4gbmF0aXZlIGVuZGlhbm5lc3MKICovCnN0YXRpYyB2b2lkIGJ0Zl9leHRfYnN3YXBf
aW5mbyhzdHJ1Y3QgYnRmX2V4dCAqYnRmX2V4dCwgdm9pZCAqZGF0YSkKewoJY29uc3QgYm9vbCBp
c19uYXRpdmUgPSBidGZfZXh0LT5zd2FwcGVkX2VuZGlhbjsKCWNvbnN0IHN0cnVjdCBidGZfZXh0
X2hlYWRlciAqaCA9IGRhdGE7Cgl2b2lkICppbmZvOwoKCS8qIFN3YXAgZnVuY19pbmZvIHN1YnNl
Y3Rpb24gYnl0ZS1vcmRlciAqLwoJaW5mbyA9IGRhdGEgKyBoLT5oZHJfbGVuICsgaC0+ZnVuY19p
bmZvX29mZjsKCWJ0Zl9leHRfYnN3YXBfaW5mb19zZWMoaW5mbywgaC0+ZnVuY19pbmZvX2xlbiwg
aXNfbmF0aXZlLAoJCQkgICAgICAgKGluZm9fcmVjX2Jzd2FwX2ZuKWJwZl9mdW5jX2luZm9fYnN3
YXApOwoKCS8qIFN3YXAgbGluZV9pbmZvIHN1YnNlY3Rpb24gYnl0ZS1vcmRlciAqLwoJaW5mbyA9
IGRhdGEgKyBoLT5oZHJfbGVuICsgaC0+bGluZV9pbmZvX29mZjsKCWJ0Zl9leHRfYnN3YXBfaW5m
b19zZWMoaW5mbywgaC0+bGluZV9pbmZvX2xlbiwgaXNfbmF0aXZlLAoJCQkgICAgICAgKGluZm9f
cmVjX2Jzd2FwX2ZuKWJwZl9saW5lX2luZm9fYnN3YXApOwoKCS8qIFN3YXAgY29yZV9yZWxvIHN1
YnNlY3Rpb24gYnl0ZS1vcmRlciAoaWYgcHJlc2VudCkgKi8KCWlmIChoLT5oZHJfbGVuIDwgb2Zm
c2V0b2ZlbmQoc3RydWN0IGJ0Zl9leHRfaGVhZGVyLCBjb3JlX3JlbG9fbGVuKSkKCQlyZXR1cm47
CgoJaW5mbyA9IGRhdGEgKyBoLT5oZHJfbGVuICsgaC0+Y29yZV9yZWxvX29mZjsKCWJ0Zl9leHRf
YnN3YXBfaW5mb19zZWMoaW5mbywgaC0+Y29yZV9yZWxvX2xlbiwgaXNfbmF0aXZlLAoJCQkgICAg
ICAgKGluZm9fcmVjX2Jzd2FwX2ZuKWJwZl9jb3JlX3JlbG9fYnN3YXApOwp9CgovKiBQYXJzZSBo
ZHIgZGF0YSBhbmQgaW5mbyBzZWN0aW9uczogY2hlY2sgYW5kIGNvbnZlcnQgdG8gbmF0aXZlIGVu
ZGlhbm5lc3MgKi8Kc3RhdGljIGludCBidGZfZXh0X3BhcnNlKHN0cnVjdCBidGZfZXh0ICpidGZf
ZXh0KQp7CglfX3UzMiBoZHJfbGVuLCBkYXRhX3NpemUgPSBidGZfZXh0LT5kYXRhX3NpemU7Cglz
dHJ1Y3QgYnRmX2V4dF9oZWFkZXIgKmhkciA9IGJ0Zl9leHQtPmhkcjsKCWJvb2wgc3dhcHBlZF9l
bmRpYW4gPSBmYWxzZTsKCWludCBlcnI7CgoJaWYgKGRhdGFfc2l6ZSA8IG9mZnNldG9mZW5kKHN0
cnVjdCBidGZfZXh0X2hlYWRlciwgaGRyX2xlbikpIHsKCQlwcl9kZWJ1ZygiQlRGLmV4dCBoZWFk
ZXIgdG9vIHNob3J0XG4iKTsKCQlyZXR1cm4gLUVJTlZBTDsKCX0KCgloZHJfbGVuID0gaGRyLT5o
ZHJfbGVuOwoJaWYgKGhkci0+bWFnaWMgPT0gYnN3YXBfMTYoQlRGX01BR0lDKSkgewoJCXN3YXBw
ZWRfZW5kaWFuID0gdHJ1ZTsKCQloZHJfbGVuID0gYnN3YXBfMzIoaGRyX2xlbik7Cgl9IGVsc2Ug
aWYgKGhkci0+bWFnaWMgIT0gQlRGX01BR0lDKSB7CgkJcHJfZGVidWcoIkludmFsaWQgQlRGLmV4
dCBtYWdpYzoleFxuIiwgaGRyLT5tYWdpYyk7CgkJcmV0dXJuIC1FSU5WQUw7Cgl9CgoJLyogRW5z
dXJlIGtub3duIHZlcnNpb24gb2Ygc3RydWN0cywgY3VycmVudCBCVEZfVkVSU0lPTiA9PSAxICov
CglpZiAoaGRyLT52ZXJzaW9uICE9IDEpIHsKCQlwcl9kZWJ1ZygiVW5zdXBwb3J0ZWQgQlRGLmV4
dCB2ZXJzaW9uOiV1XG4iLCBoZHItPnZlcnNpb24pOwoJCXJldHVybiAtRU5PVFNVUDsKCX0KCglp
ZiAoaGRyLT5mbGFncykgewoJCXByX2RlYnVnKCJVbnN1cHBvcnRlZCBCVEYuZXh0IGZsYWdzOiV4
XG4iLCBoZHItPmZsYWdzKTsKCQlyZXR1cm4gLUVOT1RTVVA7Cgl9CgoJaWYgKGRhdGFfc2l6ZSA8
IGhkcl9sZW4pIHsKCQlwcl9kZWJ1ZygiQlRGLmV4dCBoZWFkZXIgbm90IGZvdW5kXG4iKTsKCQly
ZXR1cm4gLUVJTlZBTDsKCX0gZWxzZSBpZiAoZGF0YV9zaXplID09IGhkcl9sZW4pIHsKCQlwcl9k
ZWJ1ZygiQlRGLmV4dCBoYXMgbm8gZGF0YVxuIik7CgkJcmV0dXJuIC1FSU5WQUw7Cgl9CgoJLyog
VmVyaWZ5IG1hbmRhdG9yeSBoZHIgaW5mbyBkZXRhaWxzIHByZXNlbnQgKi8KCWlmIChoZHJfbGVu
IDwgb2Zmc2V0b2ZlbmQoc3RydWN0IGJ0Zl9leHRfaGVhZGVyLCBsaW5lX2luZm9fbGVuKSkgewoJ
CXByX3dhcm4oIkJURi5leHQgaGVhZGVyIG1pc3NpbmcgZnVuY19pbmZvLCBsaW5lX2luZm9cbiIp
OwoJCXJldHVybiAtRUlOVkFMOwoJfQoKCS8qIEtlZXAgaGRyIG5hdGl2ZSBieXRlLW9yZGVyIGlu
IG1lbW9yeSBmb3IgaW50cm9zcGVjdGlvbiAqLwoJaWYgKHN3YXBwZWRfZW5kaWFuKQoJCWJ0Zl9l
eHRfYnN3YXBfaGRyKGJ0Zl9leHQtPmhkcik7CgoJLyogVmFsaWRhdGUgaW5mbyBzdWJzZWN0aW9u
cyBhbmQgY2FjaGUga2V5IG1ldGFkYXRhICovCgllcnIgPSBidGZfZXh0X3BhcnNlX2luZm8oYnRm
X2V4dCwgIXN3YXBwZWRfZW5kaWFuKTsKCWlmIChlcnIpCgkJcmV0dXJuIGVycjsKCgkvKiBLZWVw
IGluZm9zIG5hdGl2ZSBieXRlLW9yZGVyIGluIG1lbW9yeSBmb3IgaW50cm9zcGVjdGlvbiAqLwoJ
aWYgKHN3YXBwZWRfZW5kaWFuKQoJCWJ0Zl9leHRfYnN3YXBfaW5mbyhidGZfZXh0LCBidGZfZXh0
LT5kYXRhKTsKCgkvKgoJICogU2V0IGJ0Zl9leHQtPnN3YXBwZWRfZW5kaWFuIG9ubHkgYWZ0ZXIg
YWxsIGhlYWRlciBhbmQgaW5mbyBkYXRhIGhhcwoJICogYmVlbiBzd2FwcGVkLCBoZWxwaW5nIGJz
d2FwIGZ1bmN0aW9ucyBkZXRlcm1pbmUgaWYgdGhlaXIgZGF0YSBhcmUKCSAqIGluIG5hdGl2ZSBi
eXRlLW9yZGVyIHdoZW4gY2FsbGVkLgoJICovCglidGZfZXh0LT5zd2FwcGVkX2VuZGlhbiA9IHN3
YXBwZWRfZW5kaWFuOwoJcmV0dXJuIDA7Cn0KCnZvaWQgYnRmX2V4dF9fZnJlZShzdHJ1Y3QgYnRm
X2V4dCAqYnRmX2V4dCkKewoJaWYgKElTX0VSUl9PUl9OVUxMKGJ0Zl9leHQpKQoJCXJldHVybjsK
CWZyZWUoYnRmX2V4dC0+ZnVuY19pbmZvLnNlY19pZHhzKTsKCWZyZWUoYnRmX2V4dC0+bGluZV9p
bmZvLnNlY19pZHhzKTsKCWZyZWUoYnRmX2V4dC0+Y29yZV9yZWxvX2luZm8uc2VjX2lkeHMpOwoJ
ZnJlZShidGZfZXh0LT5kYXRhKTsKCWZyZWUoYnRmX2V4dC0+ZGF0YV9zd2FwcGVkKTsKCWZyZWUo
YnRmX2V4dCk7Cn0KCnN0cnVjdCBidGZfZXh0ICpidGZfZXh0X19uZXcoY29uc3QgX191OCAqZGF0
YSwgX191MzIgc2l6ZSkKewoJc3RydWN0IGJ0Zl9leHQgKmJ0Zl9leHQ7CglpbnQgZXJyOwoKCWJ0
Zl9leHQgPSBjYWxsb2MoMSwgc2l6ZW9mKHN0cnVjdCBidGZfZXh0KSk7CglpZiAoIWJ0Zl9leHQp
CgkJcmV0dXJuIGxpYmJwZl9lcnJfcHRyKC1FTk9NRU0pOwoKCWJ0Zl9leHQtPmRhdGFfc2l6ZSA9
IHNpemU7CglidGZfZXh0LT5kYXRhID0gbWFsbG9jKHNpemUpOwoJaWYgKCFidGZfZXh0LT5kYXRh
KSB7CgkJZXJyID0gLUVOT01FTTsKCQlnb3RvIGRvbmU7Cgl9CgltZW1jcHkoYnRmX2V4dC0+ZGF0
YSwgZGF0YSwgc2l6ZSk7CgoJZXJyID0gYnRmX2V4dF9wYXJzZShidGZfZXh0KTsKCmRvbmU6Cglp
ZiAoZXJyKSB7CgkJYnRmX2V4dF9fZnJlZShidGZfZXh0KTsKCQlyZXR1cm4gbGliYnBmX2Vycl9w
dHIoZXJyKTsKCX0KCglyZXR1cm4gYnRmX2V4dDsKfQoKc3RhdGljIHZvaWQgKmJ0Zl9leHRfcmF3
X2RhdGEoY29uc3Qgc3RydWN0IGJ0Zl9leHQgKmJ0Zl9leHRfcm8sIGJvb2wgc3dhcF9lbmRpYW4p
CnsKCXN0cnVjdCBidGZfZXh0ICpidGZfZXh0ID0gKHN0cnVjdCBidGZfZXh0ICopYnRmX2V4dF9y
bzsKCWNvbnN0IF9fdTMyIGRhdGFfc3ogPSBidGZfZXh0LT5kYXRhX3NpemU7Cgl2b2lkICpkYXRh
OwoKCS8qIFJldHVybiBuYXRpdmUgZGF0YSAoYWx3YXlzIHByZXNlbnQpIG9yIHN3YXBwZWQgZGF0
YSBpZiBwcmVzZW50ICovCglpZiAoIXN3YXBfZW5kaWFuKQoJCXJldHVybiBidGZfZXh0LT5kYXRh
OwoJZWxzZSBpZiAoYnRmX2V4dC0+ZGF0YV9zd2FwcGVkKQoJCXJldHVybiBidGZfZXh0LT5kYXRh
X3N3YXBwZWQ7CgoJLyogUmVjcmVhdGUgbWlzc2luZyBzd2FwcGVkIGRhdGEsIHRoZW4gY2FjaGUg
YW5kIHJldHVybiAqLwoJZGF0YSA9IGNhbGxvYygxLCBkYXRhX3N6KTsKCWlmICghZGF0YSkKCQly
ZXR1cm4gTlVMTDsKCW1lbWNweShkYXRhLCBidGZfZXh0LT5kYXRhLCBkYXRhX3N6KTsKCglidGZf
ZXh0X2Jzd2FwX2luZm8oYnRmX2V4dCwgZGF0YSk7CglidGZfZXh0X2Jzd2FwX2hkcihkYXRhKTsK
CWJ0Zl9leHQtPmRhdGFfc3dhcHBlZCA9IGRhdGE7CglyZXR1cm4gZGF0YTsKfQoKY29uc3Qgdm9p
ZCAqYnRmX2V4dF9fcmF3X2RhdGEoY29uc3Qgc3RydWN0IGJ0Zl9leHQgKmJ0Zl9leHQsIF9fdTMy
ICpzaXplKQp7Cgl2b2lkICpkYXRhOwoKCWRhdGEgPSBidGZfZXh0X3Jhd19kYXRhKGJ0Zl9leHQs
IGJ0Zl9leHQtPnN3YXBwZWRfZW5kaWFuKTsKCWlmICghZGF0YSkKCQlyZXR1cm4gZXJybm8gPSBF
Tk9NRU0sIE5VTEw7CgoJKnNpemUgPSBidGZfZXh0LT5kYXRhX3NpemU7CglyZXR1cm4gZGF0YTsK
fQoKX19hdHRyaWJ1dGVfXygoYWxpYXMoImJ0Zl9leHRfX3Jhd19kYXRhIikpKQpjb25zdCB2b2lk
ICpidGZfZXh0X19nZXRfcmF3X2RhdGEoY29uc3Qgc3RydWN0IGJ0Zl9leHQgKmJ0Zl9leHQsIF9f
dTMyICpzaXplKTsKCmVudW0gYnRmX2VuZGlhbm5lc3MgYnRmX2V4dF9fZW5kaWFubmVzcyhjb25z
dCBzdHJ1Y3QgYnRmX2V4dCAqYnRmX2V4dCkKewoJaWYgKGlzX2hvc3RfYmlnX2VuZGlhbigpKQoJ
CXJldHVybiBidGZfZXh0LT5zd2FwcGVkX2VuZGlhbiA/IEJURl9MSVRUTEVfRU5ESUFOIDogQlRG
X0JJR19FTkRJQU47CgllbHNlCgkJcmV0dXJuIGJ0Zl9leHQtPnN3YXBwZWRfZW5kaWFuID8gQlRG
X0JJR19FTkRJQU4gOiBCVEZfTElUVExFX0VORElBTjsKfQoKaW50IGJ0Zl9leHRfX3NldF9lbmRp
YW5uZXNzKHN0cnVjdCBidGZfZXh0ICpidGZfZXh0LCBlbnVtIGJ0Zl9lbmRpYW5uZXNzIGVuZGlh
bikKewoJaWYgKGVuZGlhbiAhPSBCVEZfTElUVExFX0VORElBTiAmJiBlbmRpYW4gIT0gQlRGX0JJ
R19FTkRJQU4pCgkJcmV0dXJuIGxpYmJwZl9lcnIoLUVJTlZBTCk7CgoJYnRmX2V4dC0+c3dhcHBl
ZF9lbmRpYW4gPSBpc19ob3N0X2JpZ19lbmRpYW4oKSAhPSAoZW5kaWFuID09IEJURl9CSUdfRU5E
SUFOKTsKCglpZiAoIWJ0Zl9leHQtPnN3YXBwZWRfZW5kaWFuKSB7CgkJZnJlZShidGZfZXh0LT5k
YXRhX3N3YXBwZWQpOwoJCWJ0Zl9leHQtPmRhdGFfc3dhcHBlZCA9IE5VTEw7Cgl9CglyZXR1cm4g
MDsKfQoKc3RydWN0IGJ0Zl9kZWR1cDsKCnN0YXRpYyBzdHJ1Y3QgYnRmX2RlZHVwICpidGZfZGVk
dXBfbmV3KHN0cnVjdCBidGYgKmJ0ZiwgY29uc3Qgc3RydWN0IGJ0Zl9kZWR1cF9vcHRzICpvcHRz
KTsKc3RhdGljIHZvaWQgYnRmX2RlZHVwX2ZyZWUoc3RydWN0IGJ0Zl9kZWR1cCAqZCk7CnN0YXRp
YyBpbnQgYnRmX2RlZHVwX3ByZXAoc3RydWN0IGJ0Zl9kZWR1cCAqZCk7CnN0YXRpYyBpbnQgYnRm
X2RlZHVwX3N0cmluZ3Moc3RydWN0IGJ0Zl9kZWR1cCAqZCk7CnN0YXRpYyBpbnQgYnRmX2RlZHVw
X3ByaW1fdHlwZXMoc3RydWN0IGJ0Zl9kZWR1cCAqZCk7CnN0YXRpYyBpbnQgYnRmX2RlZHVwX3N0
cnVjdF90eXBlcyhzdHJ1Y3QgYnRmX2RlZHVwICpkKTsKc3RhdGljIGludCBidGZfZGVkdXBfcmVm
X3R5cGVzKHN0cnVjdCBidGZfZGVkdXAgKmQpOwpzdGF0aWMgaW50IGJ0Zl9kZWR1cF9yZXNvbHZl
X2Z3ZHMoc3RydWN0IGJ0Zl9kZWR1cCAqZCk7CnN0YXRpYyBpbnQgYnRmX2RlZHVwX2NvbXBhY3Rf
dHlwZXMoc3RydWN0IGJ0Zl9kZWR1cCAqZCk7CnN0YXRpYyBpbnQgYnRmX2RlZHVwX3JlbWFwX3R5
cGVzKHN0cnVjdCBidGZfZGVkdXAgKmQpOwoKLyoKICogRGVkdXBsaWNhdGUgQlRGIHR5cGVzIGFu
ZCBzdHJpbmdzLgogKgogKiBCVEYgZGVkdXAgYWxnb3JpdGhtIHRha2VzIGFzIGFuIGlucHV0IGBz
dHJ1Y3QgYnRmYCByZXByZXNlbnRpbmcgYC5CVEZgIEVMRgogKiBzZWN0aW9uIHdpdGggYWxsIEJU
RiB0eXBlIGRlc2NyaXB0b3JzIGFuZCBzdHJpbmcgZGF0YS4gSXQgb3ZlcndyaXRlcyB0aGF0CiAq
IG1lbW9yeSBpbi1wbGFjZSB3aXRoIGRlZHVwbGljYXRlZCB0eXBlcyBhbmQgc3RyaW5ncyB3aXRo
b3V0IGFueSBsb3NzIG9mCiAqIGluZm9ybWF0aW9uLiBJZiBvcHRpb25hbCBgc3RydWN0IGJ0Zl9l
eHRgIHJlcHJlc2VudGluZyAnLkJURi5leHQnIEVMRiBzZWN0aW9uCiAqIGlzIHByb3ZpZGVkLCBh
bGwgdGhlIHN0cmluZ3MgcmVmZXJlbmNlZCBmcm9tIC5CVEYuZXh0IHNlY3Rpb24gYXJlIGhvbm9y
ZWQKICogYW5kIHVwZGF0ZWQgdG8gcG9pbnQgdG8gdGhlIHJpZ2h0IG9mZnNldHMgYWZ0ZXIgZGVk
dXBsaWNhdGlvbi4KICoKICogSWYgZnVuY3Rpb24gcmV0dXJucyB3aXRoIGVycm9yLCB0eXBlL3N0
cmluZyBkYXRhIG1pZ2h0IGJlIGdhcmJsZWQgYW5kIHNob3VsZAogKiBiZSBkaXNjYXJkZWQuCiAq
CiAqIE1vcmUgdmVyYm9zZSBhbmQgZGV0YWlsZWQgZGVzY3JpcHRpb24gb2YgYm90aCBwcm9ibGVt
IGJ0Zl9kZWR1cCBpcyBzb2x2aW5nLAogKiBhcyB3ZWxsIGFzIHNvbHV0aW9uIGNvdWxkIGJlIGZv
dW5kIGF0OgogKiBodHRwczovL2ZhY2Vib29rbWljcm9zaXRlcy5naXRodWIuaW8vYnBmL2Jsb2cv
MjAxOC8xMS8xNC9idGYtZW5oYW5jZW1lbnQuaHRtbAogKgogKiBQcm9ibGVtIGRlc2NyaXB0aW9u
IGFuZCBqdXN0aWZpY2F0aW9uCiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT0KICoKICogQlRGIHR5cGUgaW5mb3JtYXRpb24gaXMgdHlwaWNhbGx5IGVtaXR0ZWQgZWl0aGVy
IGFzIGEgcmVzdWx0IG9mIGNvbnZlcnNpb24KICogZnJvbSBEV0FSRiB0byBCVEYgb3IgZGlyZWN0
bHkgYnkgY29tcGlsZXIuIEluIGJvdGggY2FzZXMsIGVhY2ggY29tcGlsYXRpb24KICogdW5pdCBj
b250YWlucyBpbmZvcm1hdGlvbiBhYm91dCBhIHN1YnNldCBvZiBhbGwgdGhlIHR5cGVzIHRoYXQg
YXJlIHVzZWQKICogaW4gYW4gYXBwbGljYXRpb24uIFRoZXNlIHN1YnNldHMgYXJlIGZyZXF1ZW50
bHkgb3ZlcmxhcHBpbmcgYW5kIGNvbnRhaW4gYSBsb3QKICogb2YgZHVwbGljYXRlZCBpbmZvcm1h
dGlvbiB3aGVuIGxhdGVyIGNvbmNhdGVuYXRlZCB0b2dldGhlciBpbnRvIGEgc2luZ2xlCiAqIGJp
bmFyeS4gVGhpcyBhbGdvcml0aG0gZW5zdXJlcyB0aGF0IGVhY2ggdW5pcXVlIHR5cGUgaXMgcmVw
cmVzZW50ZWQgYnkgc2luZ2xlCiAqIEJURiB0eXBlIGRlc2NyaXB0b3IsIGdyZWF0bHkgcmVkdWNp
bmcgcmVzdWx0aW5nIHNpemUgb2YgQlRGIGRhdGEuCiAqCiAqIENvbXBpbGF0aW9uIHVuaXQgaXNv
bGF0aW9uIGFuZCBzdWJzZXF1ZW50IGR1cGxpY2F0aW9uIG9mIGRhdGEgaXMgbm90IHRoZSBvbmx5
CiAqIHByb2JsZW0uIFRoZSBzYW1lIHR5cGUgaGllcmFyY2h5IChlLmcuLCBzdHJ1Y3QgYW5kIGFs
bCB0aGUgdHlwZSB0aGF0IHN0cnVjdAogKiByZWZlcmVuY2VzKSBpbiBkaWZmZXJlbnQgY29tcGls
YXRpb24gdW5pdHMgY2FuIGJlIHJlcHJlc2VudGVkIGluIEJURiB0bwogKiB2YXJpb3VzIGRlZ3Jl
ZXMgb2YgY29tcGxldGVuZXNzIChvciwgcmF0aGVyLCBpbmNvbXBsZXRlbmVzcykgZHVlIHRvCiAq
IHN0cnVjdC91bmlvbiBmb3J3YXJkIGRlY2xhcmF0aW9ucy4KICoKICogTGV0J3MgdGFrZSBhIGxv
b2sgYXQgYW4gZXhhbXBsZSwgdGhhdCB3ZSdsbCB1c2UgdG8gYmV0dGVyIHVuZGVyc3RhbmQgdGhl
CiAqIHByb2JsZW0gKGFuZCBzb2x1dGlvbikuIFN1cHBvc2Ugd2UgaGF2ZSB0d28gY29tcGlsYXRp
b24gdW5pdHMsIGVhY2ggdXNpbmcKICogc2FtZSBgc3RydWN0IFNgLCBidXQgZWFjaCBvZiB0aGVt
IGhhdmluZyBpbmNvbXBsZXRlIHR5cGUgaW5mb3JtYXRpb24gYWJvdXQKICogc3RydWN0J3MgZmll
bGRzOgogKgogKiAvLyBDVSAjMToKICogc3RydWN0IFM7CiAqIHN0cnVjdCBBIHsKICoJaW50IGE7
CiAqCXN0cnVjdCBBKiBzZWxmOwogKglzdHJ1Y3QgUyogcGFyZW50OwogKiB9OwogKiBzdHJ1Y3Qg
QjsKICogc3RydWN0IFMgewogKglzdHJ1Y3QgQSogYV9wdHI7CiAqCXN0cnVjdCBCKiBiX3B0cjsK
ICogfTsKICoKICogLy8gQ1UgIzI6CiAqIHN0cnVjdCBTOwogKiBzdHJ1Y3QgQTsKICogc3RydWN0
IEIgewogKglpbnQgYjsKICoJc3RydWN0IEIqIHNlbGY7CiAqCXN0cnVjdCBTKiBwYXJlbnQ7CiAq
IH07CiAqIHN0cnVjdCBTIHsKICoJc3RydWN0IEEqIGFfcHRyOwogKglzdHJ1Y3QgQiogYl9wdHI7
CiAqIH07CiAqCiAqIEluIGNhc2Ugb2YgQ1UgIzEsIEJURiBkYXRhIHdpbGwga25vdyBvbmx5IHRo
YXQgYHN0cnVjdCBCYCBleGlzdCAoYnV0IG5vCiAqIG1vcmUpLCBidXQgd2lsbCBrbm93IHRoZSBj
b21wbGV0ZSB0eXBlIGluZm9ybWF0aW9uIGFib3V0IGBzdHJ1Y3QgQWAuIFdoaWxlCiAqIGZvciBD
VSAjMiwgaXQgd2lsbCBrbm93IGZ1bGwgdHlwZSBpbmZvcm1hdGlvbiBhYm91dCBgc3RydWN0IEJg
LCBidXQgd2lsbAogKiBvbmx5IGtub3cgYWJvdXQgZm9yd2FyZCBkZWNsYXJhdGlvbiBvZiBgc3Ry
dWN0IEFgIChpbiBCVEYgdGVybXMsIGl0IHdpbGwKICogaGF2ZSBgQlRGX0tJTkRfRldEYCB0eXBl
IGRlc2NyaXB0b3Igd2l0aCBuYW1lIGBCYCkuCiAqCiAqIFRoaXMgY29tcGlsYXRpb24gdW5pdCBp
c29sYXRpb24gbWVhbnMgdGhhdCBpdCdzIHBvc3NpYmxlIHRoYXQgdGhlcmUgaXMgbm8KICogc2lu
Z2xlIENVIHdpdGggY29tcGxldGUgdHlwZSBpbmZvcm1hdGlvbiBkZXNjcmliaW5nIHN0cnVjdHMg
YFNgLCBgQWAsIGFuZAogKiBgQmAuIEFsc28sIHdlIG1pZ2h0IGdldCB0b25zIG9mIGR1cGxpY2F0
ZWQgYW5kIHJlZHVuZGFudCB0eXBlIGluZm9ybWF0aW9uLgogKgogKiBBZGRpdGlvbmFsIGNvbXBs
aWNhdGlvbiB3ZSBuZWVkIHRvIGtlZXAgaW4gbWluZCBjb21lcyBmcm9tIHRoZSBmYWN0IHRoYXQK
ICogdHlwZXMsIGluIGdlbmVyYWwsIGNhbiBmb3JtIGdyYXBocyBjb250YWluaW5nIGN5Y2xlcywg
bm90IGp1c3QgREFHcy4KICoKICogV2hpbGUgYWxnb3JpdGhtIGRvZXMgZGVkdXBsaWNhdGlvbiwg
aXQgYWxzbyBtZXJnZXMgYW5kIHJlc29sdmVzIHR5cGUKICogaW5mb3JtYXRpb24gKHVubGVzcyBk
aXNhYmxlZCB0aHJvdWdodCBgc3RydWN0IGJ0Zl9vcHRzYCksIHdoZW5ldmVyIHBvc3NpYmxlLgog
KiBFLmcuLCBpbiB0aGUgZXhhbXBsZSBhYm92ZSB3aXRoIHR3byBjb21waWxhdGlvbiB1bml0cyBo
YXZpbmcgcGFydGlhbCB0eXBlCiAqIGluZm9ybWF0aW9uIGZvciBzdHJ1Y3RzIGBBYCBhbmQgYEJg
LCB0aGUgb3V0cHV0IG9mIGFsZ29yaXRobSB3aWxsIGVtaXQKICogYSBzaW5nbGUgY29weSBvZiBl
YWNoIEJURiB0eXBlIHRoYXQgZGVzY3JpYmVzIHN0cnVjdHMgYEFgLCBgQmAsIGFuZCBgU2AKICog
KGFzIHdlbGwgYXMgdHlwZSBpbmZvcm1hdGlvbiBmb3IgYGludGAgYW5kIHBvaW50ZXJzKSwgYXMg
aWYgdGhleSB3ZXJlIGRlZmluZWQKICogaW4gYSBzaW5nbGUgY29tcGlsYXRpb24gdW5pdCBhczoK
ICoKICogc3RydWN0IEEgewogKglpbnQgYTsKICoJc3RydWN0IEEqIHNlbGY7CiAqCXN0cnVjdCBT
KiBwYXJlbnQ7CiAqIH07CiAqIHN0cnVjdCBCIHsKICoJaW50IGI7CiAqCXN0cnVjdCBCKiBzZWxm
OwogKglzdHJ1Y3QgUyogcGFyZW50OwogKiB9OwogKiBzdHJ1Y3QgUyB7CiAqCXN0cnVjdCBBKiBh
X3B0cjsKICoJc3RydWN0IEIqIGJfcHRyOwogKiB9OwogKgogKiBBbGdvcml0aG0gc3VtbWFyeQog
KiA9PT09PT09PT09PT09PT09PQogKgogKiBBbGdvcml0aG0gY29tcGxldGVzIGl0cyB3b3JrIGlu
IDcgc2VwYXJhdGUgcGFzc2VzOgogKgogKiAxLiBTdHJpbmdzIGRlZHVwbGljYXRpb24uCiAqIDIu
IFByaW1pdGl2ZSB0eXBlcyBkZWR1cGxpY2F0aW9uIChpbnQsIGVudW0sIGZ3ZCkuCiAqIDMuIFN0
cnVjdC91bmlvbiB0eXBlcyBkZWR1cGxpY2F0aW9uLgogKiA0LiBSZXNvbHZlIHVuYW1iaWd1b3Vz
IGZvcndhcmQgZGVjbGFyYXRpb25zLgogKiA1LiBSZWZlcmVuY2UgdHlwZXMgZGVkdXBsaWNhdGlv
biAocG9pbnRlcnMsIHR5cGVkZWZzLCBhcnJheXMsIGZ1bmNzLCBmdW5jCiAqICAgIHByb3Rvcywg
YW5kIGNvbnN0L3ZvbGF0aWxlL3Jlc3RyaWN0IG1vZGlmaWVycykuCiAqIDYuIFR5cGVzIGNvbXBh
Y3Rpb24uCiAqIDcuIFR5cGVzIHJlbWFwcGluZy4KICoKICogQWxnb3JpdGhtIGRldGVybWluZXMg
Y2Fub25pY2FsIHR5cGUgZGVzY3JpcHRvciwgd2hpY2ggaXMgYSBzaW5nbGUKICogcmVwcmVzZW50
YXRpdmUgdHlwZSBmb3IgZWFjaCB0cnVseSB1bmlxdWUgdHlwZS4gVGhpcyBjYW5vbmljYWwgdHlw
ZSBpcyB0aGUKICogb25lIHRoYXQgd2lsbCBnbyBpbnRvIGZpbmFsIGRlZHVwbGljYXRlZCBCVEYg
dHlwZSBpbmZvcm1hdGlvbi4gRm9yCiAqIHN0cnVjdC91bmlvbnMsIGl0IGlzIGFsc28gdGhlIHR5
cGUgdGhhdCBhbGdvcml0aG0gd2lsbCBtZXJnZSBhZGRpdGlvbmFsIHR5cGUKICogaW5mb3JtYXRp
b24gaW50byAod2hpbGUgcmVzb2x2aW5nIEZXRHMpLCBhcyBpdCBkaXNjb3ZlcnMgaXQgZnJvbSBk
YXRhIGluCiAqIG90aGVyIENVcy4gRWFjaCBpbnB1dCBCVEYgdHlwZSBldmVudHVhbGx5IGdldHMg
ZWl0aGVyIG1hcHBlZCB0byBpdHNlbGYsIGlmCiAqIHRoYXQgdHlwZSBpcyBjYW5vbmljYWwsIG9y
IHRvIHNvbWUgb3RoZXIgdHlwZSwgaWYgdGhhdCB0eXBlIGlzIGVxdWl2YWxlbnQKICogYW5kIHdh
cyBjaG9zZW4gYXMgY2Fub25pY2FsIHJlcHJlc2VudGF0aXZlLiBUaGlzIG1hcHBpbmcgaXMgc3Rv
cmVkIGluCiAqIGBidGZfZGVkdXAtPm1hcGAgYXJyYXkuIFRoaXMgbWFwIGlzIGFsc28gdXNlZCB0
byByZWNvcmQgU1RSVUNUL1VOSU9OIHRoYXQKICogRldEIHR5cGUgZ290IHJlc29sdmVkIHRvLgog
KgogKiBUbyBmYWNpbGl0YXRlIGZhc3QgZGlzY292ZXJ5IG9mIGNhbm9uaWNhbCB0eXBlcywgd2Ug
YWxzbyBtYWludGFpbiBjYW5vbmljYWwKICogaW5kZXggKGBidGZfZGVkdXAtPmRlZHVwX3RhYmxl
YCksIHdoaWNoIG1hcHMgdHlwZSBkZXNjcmlwdG9yJ3Mgc2lnbmF0dXJlIGhhc2gKICogKGkuZS4s
IGhhc2hlZCBraW5kLCBuYW1lLCBzaXplLCBmaWVsZHMsIGV0YykgaW50byBhIGxpc3Qgb2YgY2Fu
b25pY2FsIHR5cGVzCiAqIHRoYXQgbWF0Y2ggdGhhdCBzaWduYXR1cmUuIFdpdGggc3VmZmljaWVu
dGx5IGdvb2QgY2hvaWNlIG9mIHR5cGUgc2lnbmF0dXJlCiAqIGhhc2hpbmcgZnVuY3Rpb24sIHdl
IGNhbiBsaW1pdCBudW1iZXIgb2YgY2Fub25pY2FsIHR5cGVzIGZvciBlYWNoIHVuaXF1ZSB0eXBl
CiAqIHNpZ25hdHVyZSB0byBhIHZlcnkgc21hbGwgbnVtYmVyLCBhbGxvd2luZyB0byBmaW5kIGNh
bm9uaWNhbCB0eXBlIGZvciBhbnkKICogZHVwbGljYXRlZCB0eXBlIHZlcnkgcXVpY2tseS4KICoK
ICogU3RydWN0L3VuaW9uIGRlZHVwbGljYXRpb24gaXMgdGhlIG1vc3QgY3JpdGljYWwgcGFydCBh
bmQgYWxnb3JpdGhtIGZvcgogKiBkZWR1cGxpY2F0aW5nIHN0cnVjdHMvdW5pb25zIGlzIGRlc2Ny
aWJlZCBpbiBncmVhdGVyIGRldGFpbHMgaW4gY29tbWVudHMgZm9yCiAqIGBidGZfZGVkdXBfaXNf
ZXF1aXZgIGZ1bmN0aW9uLgogKi8KaW50IGJ0Zl9fZGVkdXAoc3RydWN0IGJ0ZiAqYnRmLCBjb25z
dCBzdHJ1Y3QgYnRmX2RlZHVwX29wdHMgKm9wdHMpCnsKCXN0cnVjdCBidGZfZGVkdXAgKmQ7Cglp
bnQgZXJyOwoKCWlmICghT1BUU19WQUxJRChvcHRzLCBidGZfZGVkdXBfb3B0cykpCgkJcmV0dXJu
IGxpYmJwZl9lcnIoLUVJTlZBTCk7CgoJZCA9IGJ0Zl9kZWR1cF9uZXcoYnRmLCBvcHRzKTsKCWlm
IChJU19FUlIoZCkpIHsKCQlwcl9kZWJ1ZygiYnRmX2RlZHVwX25ldyBmYWlsZWQ6ICVsZFxuIiwg
UFRSX0VSUihkKSk7CgkJcmV0dXJuIGxpYmJwZl9lcnIoLUVJTlZBTCk7Cgl9CgoJaWYgKGJ0Zl9l
bnN1cmVfbW9kaWZpYWJsZShidGYpKSB7CgkJZXJyID0gLUVOT01FTTsKCQlnb3RvIGRvbmU7Cgl9
CgoJZXJyID0gYnRmX2RlZHVwX3ByZXAoZCk7CglpZiAoZXJyKSB7CgkJcHJfZGVidWcoImJ0Zl9k
ZWR1cF9wcmVwIGZhaWxlZDogJXNcbiIsIGVycnN0cihlcnIpKTsKCQlnb3RvIGRvbmU7Cgl9Cgll
cnIgPSBidGZfZGVkdXBfc3RyaW5ncyhkKTsKCWlmIChlcnIgPCAwKSB7CgkJcHJfZGVidWcoImJ0
Zl9kZWR1cF9zdHJpbmdzIGZhaWxlZDogJXNcbiIsIGVycnN0cihlcnIpKTsKCQlnb3RvIGRvbmU7
Cgl9CgllcnIgPSBidGZfZGVkdXBfcHJpbV90eXBlcyhkKTsKCWlmIChlcnIgPCAwKSB7CgkJcHJf
ZGVidWcoImJ0Zl9kZWR1cF9wcmltX3R5cGVzIGZhaWxlZDogJXNcbiIsIGVycnN0cihlcnIpKTsK
CQlnb3RvIGRvbmU7Cgl9CgllcnIgPSBidGZfZGVkdXBfc3RydWN0X3R5cGVzKGQpOwoJaWYgKGVy
ciA8IDApIHsKCQlwcl9kZWJ1ZygiYnRmX2RlZHVwX3N0cnVjdF90eXBlcyBmYWlsZWQ6ICVzXG4i
LCBlcnJzdHIoZXJyKSk7CgkJZ290byBkb25lOwoJfQoJZXJyID0gYnRmX2RlZHVwX3Jlc29sdmVf
ZndkcyhkKTsKCWlmIChlcnIgPCAwKSB7CgkJcHJfZGVidWcoImJ0Zl9kZWR1cF9yZXNvbHZlX2Z3
ZHMgZmFpbGVkOiAlc1xuIiwgZXJyc3RyKGVycikpOwoJCWdvdG8gZG9uZTsKCX0KCWVyciA9IGJ0
Zl9kZWR1cF9yZWZfdHlwZXMoZCk7CglpZiAoZXJyIDwgMCkgewoJCXByX2RlYnVnKCJidGZfZGVk
dXBfcmVmX3R5cGVzIGZhaWxlZDogJXNcbiIsIGVycnN0cihlcnIpKTsKCQlnb3RvIGRvbmU7Cgl9
CgllcnIgPSBidGZfZGVkdXBfY29tcGFjdF90eXBlcyhkKTsKCWlmIChlcnIgPCAwKSB7CgkJcHJf
ZGVidWcoImJ0Zl9kZWR1cF9jb21wYWN0X3R5cGVzIGZhaWxlZDogJXNcbiIsIGVycnN0cihlcnIp
KTsKCQlnb3RvIGRvbmU7Cgl9CgllcnIgPSBidGZfZGVkdXBfcmVtYXBfdHlwZXMoZCk7CglpZiAo
ZXJyIDwgMCkgewoJCXByX2RlYnVnKCJidGZfZGVkdXBfcmVtYXBfdHlwZXMgZmFpbGVkOiAlc1xu
IiwgZXJyc3RyKGVycikpOwoJCWdvdG8gZG9uZTsKCX0KCmRvbmU6CglidGZfZGVkdXBfZnJlZShk
KTsKCXJldHVybiBsaWJicGZfZXJyKGVycik7Cn0KCiNkZWZpbmUgQlRGX1VOUFJPQ0VTU0VEX0lE
ICgoX191MzIpLTEpCiNkZWZpbmUgQlRGX0lOX1BST0dSRVNTX0lEICgoX191MzIpLTIpCgpzdHJ1
Y3QgYnRmX2RlZHVwIHsKCS8qIC5CVEYgc2VjdGlvbiB0byBiZSBkZWR1cGVkIGluLXBsYWNlICov
CglzdHJ1Y3QgYnRmICpidGY7CgkvKgoJICogT3B0aW9uYWwgLkJURi5leHQgc2VjdGlvbi4gV2hl
biBwcm92aWRlZCwgYW55IHN0cmluZ3MgcmVmZXJlbmNlZAoJICogZnJvbSBpdCB3aWxsIGJlIHRh
a2VuIGludG8gYWNjb3VudCB3aGVuIGRlZHVwaW5nIHN0cmluZ3MKCSAqLwoJc3RydWN0IGJ0Zl9l
eHQgKmJ0Zl9leHQ7CgkvKgoJICogVGhpcyBpcyBhIG1hcCBmcm9tIGFueSB0eXBlJ3Mgc2lnbmF0
dXJlIGhhc2ggdG8gYSBsaXN0IG9mIHBvc3NpYmxlCgkgKiBjYW5vbmljYWwgcmVwcmVzZW50YXRp
dmUgdHlwZSBjYW5kaWRhdGVzLiBIYXNoIGNvbGxpc2lvbnMgYXJlCgkgKiBpZ25vcmVkLCBzbyBl
dmVuIHR5cGVzIG9mIHZhcmlvdXMga2luZHMgY2FuIHNoYXJlIHNhbWUgbGlzdCBvZgoJICogY2Fu
ZGlkYXRlcywgd2hpY2ggaXMgZmluZSBiZWNhdXNlIHdlIHJlbHkgb24gc3Vic2VxdWVudAoJICog
YnRmX3h4eF9lcXVhbCgpIGNoZWNrcyB0byBhdXRob3JpdGF0aXZlbHkgdmVyaWZ5IHR5cGUgZXF1
YWxpdHkuCgkgKi8KCXN0cnVjdCBoYXNobWFwICpkZWR1cF90YWJsZTsKCS8qIENhbm9uaWNhbCB0
eXBlcyBtYXAgKi8KCV9fdTMyICptYXA7CgkvKiBIeXBvdGhldGljYWwgbWFwcGluZywgdXNlZCBk
dXJpbmcgdHlwZSBncmFwaCBlcXVpdmFsZW5jZSBjaGVja3MgKi8KCV9fdTMyICpoeXBvdF9tYXA7
CglfX3UzMiAqaHlwb3RfbGlzdDsKCXNpemVfdCBoeXBvdF9jbnQ7CglzaXplX3QgaHlwb3RfY2Fw
OwoJLyogV2hldGhlciBoeXBvdGhldGljYWwgbWFwcGluZywgaWYgc3VjY2Vzc2Z1bCwgd291bGQg
bmVlZCB0byBhZGp1c3QKCSAqIGFscmVhZHkgY2Fub25pY2FsaXplZCB0eXBlcyAoZHVlIHRvIGEg
bmV3IGZvcndhcmQgZGVjbGFyYXRpb24gdG8KCSAqIGNvbmNyZXRlIHR5cGUgcmVzb2x1dGlvbiku
IEluIHN1Y2ggY2FzZSwgZHVyaW5nIHNwbGl0IEJURiBkZWR1cAoJICogY2FuZGlkYXRlIHR5cGUg
d291bGQgc3RpbGwgYmUgY29uc2lkZXJlZCBhcyBkaWZmZXJlbnQsIGJlY2F1c2UgYmFzZQoJICog
QlRGIGlzIGNvbnNpZGVyZWQgdG8gYmUgaW1tdXRhYmxlLgoJICovCglib29sIGh5cG90X2FkanVz
dF9jYW5vbjsKCS8qIFZhcmlvdXMgb3B0aW9uIG1vZGlmeWluZyBiZWhhdmlvciBvZiBhbGdvcml0
aG0gKi8KCXN0cnVjdCBidGZfZGVkdXBfb3B0cyBvcHRzOwoJLyogdGVtcG9yYXJ5IHN0cmluZ3Mg
ZGVkdXBsaWNhdGlvbiBzdGF0ZSAqLwoJc3RydWN0IHN0cnNldCAqc3Ryc19zZXQ7Cn07CgpzdGF0
aWMgdW5zaWduZWQgbG9uZyBoYXNoX2NvbWJpbmUodW5zaWduZWQgbG9uZyBoLCB1bnNpZ25lZCBs
b25nIHZhbHVlKQp7CglyZXR1cm4gaCAqIDMxICsgdmFsdWU7Cn0KCiNkZWZpbmUgZm9yX2VhY2hf
ZGVkdXBfY2FuZChkLCBub2RlLCBoYXNoKSBcCgloYXNobWFwX19mb3JfZWFjaF9rZXlfZW50cnko
ZC0+ZGVkdXBfdGFibGUsIG5vZGUsIGhhc2gpCgpzdGF0aWMgaW50IGJ0Zl9kZWR1cF90YWJsZV9h
ZGQoc3RydWN0IGJ0Zl9kZWR1cCAqZCwgbG9uZyBoYXNoLCBfX3UzMiB0eXBlX2lkKQp7CglyZXR1
cm4gaGFzaG1hcF9fYXBwZW5kKGQtPmRlZHVwX3RhYmxlLCBoYXNoLCB0eXBlX2lkKTsKfQoKc3Rh
dGljIGludCBidGZfZGVkdXBfaHlwb3RfbWFwX2FkZChzdHJ1Y3QgYnRmX2RlZHVwICpkLAoJCQkJ
ICAgX191MzIgZnJvbV9pZCwgX191MzIgdG9faWQpCnsKCWlmIChkLT5oeXBvdF9jbnQgPT0gZC0+
aHlwb3RfY2FwKSB7CgkJX191MzIgKm5ld19saXN0OwoKCQlkLT5oeXBvdF9jYXAgKz0gbWF4KChz
aXplX3QpMTYsIGQtPmh5cG90X2NhcCAvIDIpOwoJCW5ld19saXN0ID0gbGliYnBmX3JlYWxsb2Nh
cnJheShkLT5oeXBvdF9saXN0LCBkLT5oeXBvdF9jYXAsIHNpemVvZihfX3UzMikpOwoJCWlmICgh
bmV3X2xpc3QpCgkJCXJldHVybiAtRU5PTUVNOwoJCWQtPmh5cG90X2xpc3QgPSBuZXdfbGlzdDsK
CX0KCWQtPmh5cG90X2xpc3RbZC0+aHlwb3RfY250KytdID0gZnJvbV9pZDsKCWQtPmh5cG90X21h
cFtmcm9tX2lkXSA9IHRvX2lkOwoJcmV0dXJuIDA7Cn0KCnN0YXRpYyB2b2lkIGJ0Zl9kZWR1cF9j
bGVhcl9oeXBvdF9tYXAoc3RydWN0IGJ0Zl9kZWR1cCAqZCkKewoJaW50IGk7CgoJZm9yIChpID0g
MDsgaSA8IGQtPmh5cG90X2NudDsgaSsrKQoJCWQtPmh5cG90X21hcFtkLT5oeXBvdF9saXN0W2ld
XSA9IEJURl9VTlBST0NFU1NFRF9JRDsKCWQtPmh5cG90X2NudCA9IDA7CglkLT5oeXBvdF9hZGp1
c3RfY2Fub24gPSBmYWxzZTsKfQoKc3RhdGljIHZvaWQgYnRmX2RlZHVwX2ZyZWUoc3RydWN0IGJ0
Zl9kZWR1cCAqZCkKewoJaGFzaG1hcF9fZnJlZShkLT5kZWR1cF90YWJsZSk7CglkLT5kZWR1cF90
YWJsZSA9IE5VTEw7CgoJZnJlZShkLT5tYXApOwoJZC0+bWFwID0gTlVMTDsKCglmcmVlKGQtPmh5
cG90X21hcCk7CglkLT5oeXBvdF9tYXAgPSBOVUxMOwoKCWZyZWUoZC0+aHlwb3RfbGlzdCk7Cglk
LT5oeXBvdF9saXN0ID0gTlVMTDsKCglmcmVlKGQpOwp9CgpzdGF0aWMgc2l6ZV90IGJ0Zl9kZWR1
cF9pZGVudGl0eV9oYXNoX2ZuKGxvbmcga2V5LCB2b2lkICpjdHgpCnsKCXJldHVybiBrZXk7Cn0K
CnN0YXRpYyBzaXplX3QgYnRmX2RlZHVwX2NvbGxpc2lvbl9oYXNoX2ZuKGxvbmcga2V5LCB2b2lk
ICpjdHgpCnsKCXJldHVybiAwOwp9CgpzdGF0aWMgYm9vbCBidGZfZGVkdXBfZXF1YWxfZm4obG9u
ZyBrMSwgbG9uZyBrMiwgdm9pZCAqY3R4KQp7CglyZXR1cm4gazEgPT0gazI7Cn0KCnN0YXRpYyBz
dHJ1Y3QgYnRmX2RlZHVwICpidGZfZGVkdXBfbmV3KHN0cnVjdCBidGYgKmJ0ZiwgY29uc3Qgc3Ry
dWN0IGJ0Zl9kZWR1cF9vcHRzICpvcHRzKQp7CglzdHJ1Y3QgYnRmX2RlZHVwICpkID0gY2FsbG9j
KDEsIHNpemVvZihzdHJ1Y3QgYnRmX2RlZHVwKSk7CgloYXNobWFwX2hhc2hfZm4gaGFzaF9mbiA9
IGJ0Zl9kZWR1cF9pZGVudGl0eV9oYXNoX2ZuOwoJaW50IGksIGVyciA9IDAsIHR5cGVfY250OwoK
CWlmICghZCkKCQlyZXR1cm4gRVJSX1BUUigtRU5PTUVNKTsKCglpZiAoT1BUU19HRVQob3B0cywg
Zm9yY2VfY29sbGlzaW9ucywgZmFsc2UpKQoJCWhhc2hfZm4gPSBidGZfZGVkdXBfY29sbGlzaW9u
X2hhc2hfZm47CgoJZC0+YnRmID0gYnRmOwoJZC0+YnRmX2V4dCA9IE9QVFNfR0VUKG9wdHMsIGJ0
Zl9leHQsIE5VTEwpOwoKCWQtPmRlZHVwX3RhYmxlID0gaGFzaG1hcF9fbmV3KGhhc2hfZm4sIGJ0
Zl9kZWR1cF9lcXVhbF9mbiwgTlVMTCk7CglpZiAoSVNfRVJSKGQtPmRlZHVwX3RhYmxlKSkgewoJ
CWVyciA9IFBUUl9FUlIoZC0+ZGVkdXBfdGFibGUpOwoJCWQtPmRlZHVwX3RhYmxlID0gTlVMTDsK
CQlnb3RvIGRvbmU7Cgl9CgoJdHlwZV9jbnQgPSBidGZfX3R5cGVfY250KGJ0Zik7CglkLT5tYXAg
PSBtYWxsb2Moc2l6ZW9mKF9fdTMyKSAqIHR5cGVfY250KTsKCWlmICghZC0+bWFwKSB7CgkJZXJy
ID0gLUVOT01FTTsKCQlnb3RvIGRvbmU7Cgl9CgkvKiBzcGVjaWFsIEJURiAidm9pZCIgdHlwZSBp
cyBtYWRlIGNhbm9uaWNhbCBpbW1lZGlhdGVseSAqLwoJZC0+bWFwWzBdID0gMDsKCWZvciAoaSA9
IDE7IGkgPCB0eXBlX2NudDsgaSsrKSB7CgkJc3RydWN0IGJ0Zl90eXBlICp0ID0gYnRmX3R5cGVf
YnlfaWQoZC0+YnRmLCBpKTsKCgkJLyogVkFSIGFuZCBEQVRBU0VDIGFyZSBuZXZlciBkZWR1cGVk
IGFuZCBhcmUgc2VsZi1jYW5vbmljYWwgKi8KCQlpZiAoYnRmX2lzX3Zhcih0KSB8fCBidGZfaXNf
ZGF0YXNlYyh0KSkKCQkJZC0+bWFwW2ldID0gaTsKCQllbHNlCgkJCWQtPm1hcFtpXSA9IEJURl9V
TlBST0NFU1NFRF9JRDsKCX0KCglkLT5oeXBvdF9tYXAgPSBtYWxsb2Moc2l6ZW9mKF9fdTMyKSAq
IHR5cGVfY250KTsKCWlmICghZC0+aHlwb3RfbWFwKSB7CgkJZXJyID0gLUVOT01FTTsKCQlnb3Rv
IGRvbmU7Cgl9Cglmb3IgKGkgPSAwOyBpIDwgdHlwZV9jbnQ7IGkrKykKCQlkLT5oeXBvdF9tYXBb
aV0gPSBCVEZfVU5QUk9DRVNTRURfSUQ7Cgpkb25lOgoJaWYgKGVycikgewoJCWJ0Zl9kZWR1cF9m
cmVlKGQpOwoJCXJldHVybiBFUlJfUFRSKGVycik7Cgl9CgoJcmV0dXJuIGQ7Cn0KCi8qCiAqIEl0
ZXJhdGUgb3ZlciBhbGwgcG9zc2libGUgcGxhY2VzIGluIC5CVEYgYW5kIC5CVEYuZXh0IHRoYXQg
Y2FuIHJlZmVyZW5jZQogKiBzdHJpbmcgYW5kIHBhc3MgcG9pbnRlciB0byBpdCB0byBhIHByb3Zp
ZGVkIGNhbGxiYWNrIGBmbmAuCiAqLwpzdGF0aWMgaW50IGJ0Zl9mb3JfZWFjaF9zdHJfb2ZmKHN0
cnVjdCBidGZfZGVkdXAgKmQsIHN0cl9vZmZfdmlzaXRfZm4gZm4sIHZvaWQgKmN0eCkKewoJaW50
IGksIHI7CgoJZm9yIChpID0gMDsgaSA8IGQtPmJ0Zi0+bnJfdHlwZXM7IGkrKykgewoJCXN0cnVj
dCBidGZfZmllbGRfaXRlciBpdDsKCQlzdHJ1Y3QgYnRmX3R5cGUgKnQgPSBidGZfdHlwZV9ieV9p
ZChkLT5idGYsIGQtPmJ0Zi0+c3RhcnRfaWQgKyBpKTsKCQlfX3UzMiAqc3RyX29mZjsKCgkJciA9
IGJ0Zl9maWVsZF9pdGVyX2luaXQoJml0LCB0LCBCVEZfRklFTERfSVRFUl9TVFJTKTsKCQlpZiAo
cikKCQkJcmV0dXJuIHI7CgoJCXdoaWxlICgoc3RyX29mZiA9IGJ0Zl9maWVsZF9pdGVyX25leHQo
Jml0KSkpIHsKCQkJciA9IGZuKHN0cl9vZmYsIGN0eCk7CgkJCWlmIChyKQoJCQkJcmV0dXJuIHI7
CgkJfQoJfQoKCWlmICghZC0+YnRmX2V4dCkKCQlyZXR1cm4gMDsKCglyID0gYnRmX2V4dF92aXNp
dF9zdHJfb2ZmcyhkLT5idGZfZXh0LCBmbiwgY3R4KTsKCWlmIChyKQoJCXJldHVybiByOwoKCXJl
dHVybiAwOwp9CgpzdGF0aWMgaW50IHN0cnNfZGVkdXBfcmVtYXBfc3RyX29mZihfX3UzMiAqc3Ry
X29mZl9wdHIsIHZvaWQgKmN0eCkKewoJc3RydWN0IGJ0Zl9kZWR1cCAqZCA9IGN0eDsKCV9fdTMy
IHN0cl9vZmYgPSAqc3RyX29mZl9wdHI7Cgljb25zdCBjaGFyICpzOwoJaW50IG9mZiwgZXJyOwoK
CS8qIGRvbid0IHRvdWNoIGVtcHR5IHN0cmluZyBvciBzdHJpbmcgaW4gbWFpbiBCVEYgKi8KCWlm
IChzdHJfb2ZmID09IDAgfHwgc3RyX29mZiA8IGQtPmJ0Zi0+c3RhcnRfc3RyX29mZikKCQlyZXR1
cm4gMDsKCglzID0gYnRmX19zdHJfYnlfb2Zmc2V0KGQtPmJ0Ziwgc3RyX29mZik7CglpZiAoZC0+
YnRmLT5iYXNlX2J0ZikgewoJCWVyciA9IGJ0Zl9fZmluZF9zdHIoZC0+YnRmLT5iYXNlX2J0Ziwg
cyk7CgkJaWYgKGVyciA+PSAwKSB7CgkJCSpzdHJfb2ZmX3B0ciA9IGVycjsKCQkJcmV0dXJuIDA7
CgkJfQoJCWlmIChlcnIgIT0gLUVOT0VOVCkKCQkJcmV0dXJuIGVycjsKCX0KCglvZmYgPSBzdHJz
ZXRfX2FkZF9zdHIoZC0+c3Ryc19zZXQsIHMpOwoJaWYgKG9mZiA8IDApCgkJcmV0dXJuIG9mZjsK
Cgkqc3RyX29mZl9wdHIgPSBkLT5idGYtPnN0YXJ0X3N0cl9vZmYgKyBvZmY7CglyZXR1cm4gMDsK
fQoKLyoKICogRGVkdXAgc3RyaW5nIGFuZCBmaWx0ZXIgb3V0IHRob3NlIHRoYXQgYXJlIG5vdCBy
ZWZlcmVuY2VkIGZyb20gZWl0aGVyIC5CVEYKICogb3IgLkJURi5leHQgKGlmIHByb3ZpZGVkKSBz
ZWN0aW9ucy4KICoKICogVGhpcyBpcyBkb25lIGJ5IGJ1aWxkaW5nIGluZGV4IG9mIGFsbCBzdHJp
bmdzIGluIEJURidzIHN0cmluZyBzZWN0aW9uLAogKiB0aGVuIGl0ZXJhdGluZyBvdmVyIGFsbCBl
bnRpdGllcyB0aGF0IGNhbiByZWZlcmVuY2Ugc3RyaW5ncyAoZS5nLiwgdHlwZQogKiBuYW1lcywg
c3RydWN0IGZpZWxkIG5hbWVzLCAuQlRGLmV4dCBsaW5lIGluZm8sIGV0YykgYW5kIG1hcmtpbmcg
Y29ycmVzcG9uZGluZwogKiBzdHJpbmdzIGFzIHVzZWQuIEFmdGVyIHRoYXQgYWxsIHVzZWQgc3Ry
aW5ncyBhcmUgZGVkdXBlZCBhbmQgY29tcGFjdGVkIGludG8KICogc2VxdWVudGlhbCBibG9iIG9m
IG1lbW9yeSBhbmQgbmV3IG9mZnNldHMgYXJlIGNhbGN1bGF0ZWQuIFRoZW4gYWxsIHRoZSBzdHJp
bmcKICogcmVmZXJlbmNlcyBhcmUgaXRlcmF0ZWQgYWdhaW4gYW5kIHJld3JpdHRlbiB1c2luZyBu
ZXcgb2Zmc2V0cy4KICovCnN0YXRpYyBpbnQgYnRmX2RlZHVwX3N0cmluZ3Moc3RydWN0IGJ0Zl9k
ZWR1cCAqZCkKewoJaW50IGVycjsKCglpZiAoZC0+YnRmLT5zdHJzX2RlZHVwZWQpCgkJcmV0dXJu
IDA7CgoJZC0+c3Ryc19zZXQgPSBzdHJzZXRfX25ldyhCVEZfTUFYX1NUUl9PRkZTRVQsIE5VTEws
IDApOwoJaWYgKElTX0VSUihkLT5zdHJzX3NldCkpIHsKCQllcnIgPSBQVFJfRVJSKGQtPnN0cnNf
c2V0KTsKCQlnb3RvIGVycl9vdXQ7Cgl9CgoJaWYgKCFkLT5idGYtPmJhc2VfYnRmKSB7CgkJLyog
aW5zZXJ0IGVtcHR5IHN0cmluZzsgd2Ugd29uJ3QgYmUgbG9va2luZyBpdCB1cCBkdXJpbmcgc3Ry
aW5ncwoJCSAqIGRlZHVwLCBidXQgaXQncyBnb29kIHRvIGhhdmUgaXQgZm9yIGdlbmVyaWMgQlRG
IHN0cmluZyBsb29rdXBzCgkJICovCgkJZXJyID0gc3Ryc2V0X19hZGRfc3RyKGQtPnN0cnNfc2V0
LCAiIik7CgkJaWYgKGVyciA8IDApCgkJCWdvdG8gZXJyX291dDsKCX0KCgkvKiByZW1hcCBzdHJp
bmcgb2Zmc2V0cyAqLwoJZXJyID0gYnRmX2Zvcl9lYWNoX3N0cl9vZmYoZCwgc3Ryc19kZWR1cF9y
ZW1hcF9zdHJfb2ZmLCBkKTsKCWlmIChlcnIpCgkJZ290byBlcnJfb3V0OwoKCS8qIHJlcGxhY2Ug
QlRGIHN0cmluZyBkYXRhIGFuZCBoYXNoIHdpdGggZGVkdXBlZCBvbmVzICovCglzdHJzZXRfX2Zy
ZWUoZC0+YnRmLT5zdHJzX3NldCk7CglkLT5idGYtPmhkci0+c3RyX2xlbiA9IHN0cnNldF9fZGF0
YV9zaXplKGQtPnN0cnNfc2V0KTsKCWQtPmJ0Zi0+c3Ryc19zZXQgPSBkLT5zdHJzX3NldDsKCWQt
PnN0cnNfc2V0ID0gTlVMTDsKCWQtPmJ0Zi0+c3Ryc19kZWR1cGVkID0gdHJ1ZTsKCXJldHVybiAw
OwoKZXJyX291dDoKCXN0cnNldF9fZnJlZShkLT5zdHJzX3NldCk7CglkLT5zdHJzX3NldCA9IE5V
TEw7CgoJcmV0dXJuIGVycjsKfQoKc3RhdGljIGxvbmcgYnRmX2hhc2hfY29tbW9uKHN0cnVjdCBi
dGZfdHlwZSAqdCkKewoJbG9uZyBoOwoKCWggPSBoYXNoX2NvbWJpbmUoMCwgdC0+bmFtZV9vZmYp
OwoJaCA9IGhhc2hfY29tYmluZShoLCB0LT5pbmZvKTsKCWggPSBoYXNoX2NvbWJpbmUoaCwgdC0+
c2l6ZSk7CglyZXR1cm4gaDsKfQoKc3RhdGljIGJvb2wgYnRmX2VxdWFsX2NvbW1vbihzdHJ1Y3Qg
YnRmX3R5cGUgKnQxLCBzdHJ1Y3QgYnRmX3R5cGUgKnQyKQp7CglyZXR1cm4gdDEtPm5hbWVfb2Zm
ID09IHQyLT5uYW1lX29mZiAmJgoJICAgICAgIHQxLT5pbmZvID09IHQyLT5pbmZvICYmCgkgICAg
ICAgdDEtPnNpemUgPT0gdDItPnNpemU7Cn0KCi8qIENhbGN1bGF0ZSB0eXBlIHNpZ25hdHVyZSBo
YXNoIG9mIElOVCBvciBUQUcuICovCnN0YXRpYyBsb25nIGJ0Zl9oYXNoX2ludF9kZWNsX3RhZyhz
dHJ1Y3QgYnRmX3R5cGUgKnQpCnsKCV9fdTMyIGluZm8gPSAqKF9fdTMyICopKHQgKyAxKTsKCWxv
bmcgaDsKCgloID0gYnRmX2hhc2hfY29tbW9uKHQpOwoJaCA9IGhhc2hfY29tYmluZShoLCBpbmZv
KTsKCXJldHVybiBoOwp9CgovKiBDaGVjayBzdHJ1Y3R1cmFsIGVxdWFsaXR5IG9mIHR3byBJTlRz
IG9yIFRBR3MuICovCnN0YXRpYyBib29sIGJ0Zl9lcXVhbF9pbnRfdGFnKHN0cnVjdCBidGZfdHlw
ZSAqdDEsIHN0cnVjdCBidGZfdHlwZSAqdDIpCnsKCV9fdTMyIGluZm8xLCBpbmZvMjsKCglpZiAo
IWJ0Zl9lcXVhbF9jb21tb24odDEsIHQyKSkKCQlyZXR1cm4gZmFsc2U7CglpbmZvMSA9ICooX191
MzIgKikodDEgKyAxKTsKCWluZm8yID0gKihfX3UzMiAqKSh0MiArIDEpOwoJcmV0dXJuIGluZm8x
ID09IGluZm8yOwp9CgovKiBDYWxjdWxhdGUgdHlwZSBzaWduYXR1cmUgaGFzaCBvZiBFTlVNL0VO
VU02NC4gKi8Kc3RhdGljIGxvbmcgYnRmX2hhc2hfZW51bShzdHJ1Y3QgYnRmX3R5cGUgKnQpCnsK
CWxvbmcgaDsKCgkvKiBkb24ndCBoYXNoIHZsZW4sIGVudW0gbWVtYmVycyBhbmQgc2l6ZSB0byBz
dXBwb3J0IGVudW0gZndkIHJlc29sdmluZyAqLwoJaCA9IGhhc2hfY29tYmluZSgwLCB0LT5uYW1l
X29mZik7CglyZXR1cm4gaDsKfQoKc3RhdGljIGJvb2wgYnRmX2VxdWFsX2VudW1fbWVtYmVycyhz
dHJ1Y3QgYnRmX3R5cGUgKnQxLCBzdHJ1Y3QgYnRmX3R5cGUgKnQyKQp7Cgljb25zdCBzdHJ1Y3Qg
YnRmX2VudW0gKm0xLCAqbTI7CglfX3UxNiB2bGVuOwoJaW50IGk7CgoJdmxlbiA9IGJ0Zl92bGVu
KHQxKTsKCW0xID0gYnRmX2VudW0odDEpOwoJbTIgPSBidGZfZW51bSh0Mik7Cglmb3IgKGkgPSAw
OyBpIDwgdmxlbjsgaSsrKSB7CgkJaWYgKG0xLT5uYW1lX29mZiAhPSBtMi0+bmFtZV9vZmYgfHwg
bTEtPnZhbCAhPSBtMi0+dmFsKQoJCQlyZXR1cm4gZmFsc2U7CgkJbTErKzsKCQltMisrOwoJfQoJ
cmV0dXJuIHRydWU7Cn0KCnN0YXRpYyBib29sIGJ0Zl9lcXVhbF9lbnVtNjRfbWVtYmVycyhzdHJ1
Y3QgYnRmX3R5cGUgKnQxLCBzdHJ1Y3QgYnRmX3R5cGUgKnQyKQp7Cgljb25zdCBzdHJ1Y3QgYnRm
X2VudW02NCAqbTEsICptMjsKCV9fdTE2IHZsZW47CglpbnQgaTsKCgl2bGVuID0gYnRmX3ZsZW4o
dDEpOwoJbTEgPSBidGZfZW51bTY0KHQxKTsKCW0yID0gYnRmX2VudW02NCh0Mik7Cglmb3IgKGkg
PSAwOyBpIDwgdmxlbjsgaSsrKSB7CgkJaWYgKG0xLT5uYW1lX29mZiAhPSBtMi0+bmFtZV9vZmYg
fHwgbTEtPnZhbF9sbzMyICE9IG0yLT52YWxfbG8zMiB8fAoJCSAgICBtMS0+dmFsX2hpMzIgIT0g
bTItPnZhbF9oaTMyKQoJCQlyZXR1cm4gZmFsc2U7CgkJbTErKzsKCQltMisrOwoJfQoJcmV0dXJu
IHRydWU7Cn0KCi8qIENoZWNrIHN0cnVjdHVyYWwgZXF1YWxpdHkgb2YgdHdvIEVOVU1zIG9yIEVO
VU02NHMuICovCnN0YXRpYyBib29sIGJ0Zl9lcXVhbF9lbnVtKHN0cnVjdCBidGZfdHlwZSAqdDEs
IHN0cnVjdCBidGZfdHlwZSAqdDIpCnsKCWlmICghYnRmX2VxdWFsX2NvbW1vbih0MSwgdDIpKQoJ
CXJldHVybiBmYWxzZTsKCgkvKiB0MSAmIHQyIGtpbmRzIGFyZSBpZGVudGljYWwgYmVjYXVzZSBv
ZiBidGZfZXF1YWxfY29tbW9uICovCglpZiAoYnRmX2tpbmQodDEpID09IEJURl9LSU5EX0VOVU0p
CgkJcmV0dXJuIGJ0Zl9lcXVhbF9lbnVtX21lbWJlcnModDEsIHQyKTsKCWVsc2UKCQlyZXR1cm4g
YnRmX2VxdWFsX2VudW02NF9tZW1iZXJzKHQxLCB0Mik7Cn0KCnN0YXRpYyBpbmxpbmUgYm9vbCBi
dGZfaXNfZW51bV9md2Qoc3RydWN0IGJ0Zl90eXBlICp0KQp7CglyZXR1cm4gYnRmX2lzX2FueV9l
bnVtKHQpICYmIGJ0Zl92bGVuKHQpID09IDA7Cn0KCnN0YXRpYyBib29sIGJ0Zl9jb21wYXRfZW51
bShzdHJ1Y3QgYnRmX3R5cGUgKnQxLCBzdHJ1Y3QgYnRmX3R5cGUgKnQyKQp7CglpZiAoIWJ0Zl9p
c19lbnVtX2Z3ZCh0MSkgJiYgIWJ0Zl9pc19lbnVtX2Z3ZCh0MikpCgkJcmV0dXJuIGJ0Zl9lcXVh
bF9lbnVtKHQxLCB0Mik7CgkvKiBBdCB0aGlzIHBvaW50IGVpdGhlciB0MSBvciB0MiBvciBib3Ro
IGFyZSBmb3J3YXJkIGRlY2xhcmF0aW9ucywgdGh1czoKCSAqIC0gc2tpcCBjb21wYXJpbmcgdmxl
biBiZWNhdXNlIGl0IGlzIHplcm8gZm9yIGZvcndhcmQgZGVjbGFyYXRpb25zOwoJICogLSBza2lw
IGNvbXBhcmluZyBzaXplIHRvIGFsbG93IGVudW0gZm9yd2FyZCBkZWNsYXJhdGlvbnMKCSAqICAg
dG8gYmUgY29tcGF0aWJsZSB3aXRoIGVudW02NCBmdWxsIGRlY2xhcmF0aW9uczsKCSAqIC0gc2tp
cCBjb21wYXJpbmcga2luZCBmb3IgdGhlIHNhbWUgcmVhc29uLgoJICovCglyZXR1cm4gdDEtPm5h
bWVfb2ZmID09IHQyLT5uYW1lX29mZiAmJgoJICAgICAgIGJ0Zl9pc19hbnlfZW51bSh0MSkgJiYg
YnRmX2lzX2FueV9lbnVtKHQyKTsKfQoKLyoKICogQ2FsY3VsYXRlIHR5cGUgc2lnbmF0dXJlIGhh
c2ggb2YgU1RSVUNUL1VOSU9OLCBpZ25vcmluZyByZWZlcmVuY2VkIHR5cGUgSURzLAogKiBhcyBy
ZWZlcmVuY2VkIHR5cGUgSURzIGVxdWl2YWxlbmNlIGlzIGVzdGFibGlzaGVkIHNlcGFyYXRlbHkg
ZHVyaW5nIHR5cGUKICogZ3JhcGggZXF1aXZhbGVuY2UgY2hlY2sgYWxnb3JpdGhtLgogKi8Kc3Rh
dGljIGxvbmcgYnRmX2hhc2hfc3RydWN0KHN0cnVjdCBidGZfdHlwZSAqdCkKewoJY29uc3Qgc3Ry
dWN0IGJ0Zl9tZW1iZXIgKm1lbWJlciA9IGJ0Zl9tZW1iZXJzKHQpOwoJX191MzIgdmxlbiA9IGJ0
Zl92bGVuKHQpOwoJbG9uZyBoID0gYnRmX2hhc2hfY29tbW9uKHQpOwoJaW50IGk7CgoJZm9yIChp
ID0gMDsgaSA8IHZsZW47IGkrKykgewoJCWggPSBoYXNoX2NvbWJpbmUoaCwgbWVtYmVyLT5uYW1l
X29mZik7CgkJaCA9IGhhc2hfY29tYmluZShoLCBtZW1iZXItPm9mZnNldCk7CgkJLyogbm8gaGFz
aGluZyBvZiByZWZlcmVuY2VkIHR5cGUgSUQsIGl0IGNhbiBiZSB1bnJlc29sdmVkIHlldCAqLwoJ
CW1lbWJlcisrOwoJfQoJcmV0dXJuIGg7Cn0KCi8qCiAqIENoZWNrIHN0cnVjdHVyYWwgY29tcGF0
aWJpbGl0eSBvZiB0d28gU1RSVUNUcy9VTklPTnMsIGlnbm9yaW5nIHJlZmVyZW5jZWQKICogdHlw
ZSBJRHMuIFRoaXMgY2hlY2sgaXMgcGVyZm9ybWVkIGR1cmluZyB0eXBlIGdyYXBoIGVxdWl2YWxl
bmNlIGNoZWNrIGFuZAogKiByZWZlcmVuY2VkIHR5cGVzIGVxdWl2YWxlbmNlIGlzIGNoZWNrZWQg
c2VwYXJhdGVseS4KICovCnN0YXRpYyBib29sIGJ0Zl9zaGFsbG93X2VxdWFsX3N0cnVjdChzdHJ1
Y3QgYnRmX3R5cGUgKnQxLCBzdHJ1Y3QgYnRmX3R5cGUgKnQyKQp7Cgljb25zdCBzdHJ1Y3QgYnRm
X21lbWJlciAqbTEsICptMjsKCV9fdTE2IHZsZW47CglpbnQgaTsKCglpZiAoIWJ0Zl9lcXVhbF9j
b21tb24odDEsIHQyKSkKCQlyZXR1cm4gZmFsc2U7CgoJdmxlbiA9IGJ0Zl92bGVuKHQxKTsKCW0x
ID0gYnRmX21lbWJlcnModDEpOwoJbTIgPSBidGZfbWVtYmVycyh0Mik7Cglmb3IgKGkgPSAwOyBp
IDwgdmxlbjsgaSsrKSB7CgkJaWYgKG0xLT5uYW1lX29mZiAhPSBtMi0+bmFtZV9vZmYgfHwgbTEt
Pm9mZnNldCAhPSBtMi0+b2Zmc2V0KQoJCQlyZXR1cm4gZmFsc2U7CgkJbTErKzsKCQltMisrOwoJ
fQoJcmV0dXJuIHRydWU7Cn0KCi8qCiAqIENhbGN1bGF0ZSB0eXBlIHNpZ25hdHVyZSBoYXNoIG9m
IEFSUkFZLCBpbmNsdWRpbmcgcmVmZXJlbmNlZCB0eXBlIElEcywKICogdW5kZXIgYXNzdW1wdGlv
biB0aGF0IHRoZXkgd2VyZSBhbHJlYWR5IHJlc29sdmVkIHRvIGNhbm9uaWNhbCB0eXBlIElEcyBh
bmQKICogYXJlIG5vdCBnb2luZyB0byBjaGFuZ2UuCiAqLwpzdGF0aWMgbG9uZyBidGZfaGFzaF9h
cnJheShzdHJ1Y3QgYnRmX3R5cGUgKnQpCnsKCWNvbnN0IHN0cnVjdCBidGZfYXJyYXkgKmluZm8g
PSBidGZfYXJyYXkodCk7Cglsb25nIGggPSBidGZfaGFzaF9jb21tb24odCk7CgoJaCA9IGhhc2hf
Y29tYmluZShoLCBpbmZvLT50eXBlKTsKCWggPSBoYXNoX2NvbWJpbmUoaCwgaW5mby0+aW5kZXhf
dHlwZSk7CgloID0gaGFzaF9jb21iaW5lKGgsIGluZm8tPm5lbGVtcyk7CglyZXR1cm4gaDsKfQoK
LyoKICogQ2hlY2sgZXhhY3QgZXF1YWxpdHkgb2YgdHdvIEFSUkFZcywgdGFraW5nIGludG8gYWNj
b3VudCByZWZlcmVuY2VkCiAqIHR5cGUgSURzLCB1bmRlciBhc3N1bXB0aW9uIHRoYXQgdGhleSB3
ZXJlIGFscmVhZHkgcmVzb2x2ZWQgdG8gY2Fub25pY2FsCiAqIHR5cGUgSURzIGFuZCBhcmUgbm90
IGdvaW5nIHRvIGNoYW5nZS4KICogVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgZHVyaW5nIHJlZmVy
ZW5jZSB0eXBlcyBkZWR1cGxpY2F0aW9uIHRvIGNvbXBhcmUKICogQVJSQVkgdG8gcG90ZW50aWFs
IGNhbm9uaWNhbCByZXByZXNlbnRhdGl2ZS4KICovCnN0YXRpYyBib29sIGJ0Zl9lcXVhbF9hcnJh
eShzdHJ1Y3QgYnRmX3R5cGUgKnQxLCBzdHJ1Y3QgYnRmX3R5cGUgKnQyKQp7Cgljb25zdCBzdHJ1
Y3QgYnRmX2FycmF5ICppbmZvMSwgKmluZm8yOwoKCWlmICghYnRmX2VxdWFsX2NvbW1vbih0MSwg
dDIpKQoJCXJldHVybiBmYWxzZTsKCglpbmZvMSA9IGJ0Zl9hcnJheSh0MSk7CglpbmZvMiA9IGJ0
Zl9hcnJheSh0Mik7CglyZXR1cm4gaW5mbzEtPnR5cGUgPT0gaW5mbzItPnR5cGUgJiYKCSAgICAg
ICBpbmZvMS0+aW5kZXhfdHlwZSA9PSBpbmZvMi0+aW5kZXhfdHlwZSAmJgoJICAgICAgIGluZm8x
LT5uZWxlbXMgPT0gaW5mbzItPm5lbGVtczsKfQoKLyoKICogQ2hlY2sgc3RydWN0dXJhbCBjb21w
YXRpYmlsaXR5IG9mIHR3byBBUlJBWXMsIGlnbm9yaW5nIHJlZmVyZW5jZWQgdHlwZQogKiBJRHMu
IFRoaXMgY2hlY2sgaXMgcGVyZm9ybWVkIGR1cmluZyB0eXBlIGdyYXBoIGVxdWl2YWxlbmNlIGNo
ZWNrIGFuZAogKiByZWZlcmVuY2VkIHR5cGVzIGVxdWl2YWxlbmNlIGlzIGNoZWNrZWQgc2VwYXJh
dGVseS4KICovCnN0YXRpYyBib29sIGJ0Zl9jb21wYXRfYXJyYXkoc3RydWN0IGJ0Zl90eXBlICp0
MSwgc3RydWN0IGJ0Zl90eXBlICp0MikKewoJaWYgKCFidGZfZXF1YWxfY29tbW9uKHQxLCB0Mikp
CgkJcmV0dXJuIGZhbHNlOwoKCXJldHVybiBidGZfYXJyYXkodDEpLT5uZWxlbXMgPT0gYnRmX2Fy
cmF5KHQyKS0+bmVsZW1zOwp9CgovKgogKiBDYWxjdWxhdGUgdHlwZSBzaWduYXR1cmUgaGFzaCBv
ZiBGVU5DX1BST1RPLCBpbmNsdWRpbmcgcmVmZXJlbmNlZCB0eXBlIElEcywKICogdW5kZXIgYXNz
dW1wdGlvbiB0aGF0IHRoZXkgd2VyZSBhbHJlYWR5IHJlc29sdmVkIHRvIGNhbm9uaWNhbCB0eXBl
IElEcyBhbmQKICogYXJlIG5vdCBnb2luZyB0byBjaGFuZ2UuCiAqLwpzdGF0aWMgbG9uZyBidGZf
aGFzaF9mbnByb3RvKHN0cnVjdCBidGZfdHlwZSAqdCkKewoJY29uc3Qgc3RydWN0IGJ0Zl9wYXJh
bSAqbWVtYmVyID0gYnRmX3BhcmFtcyh0KTsKCV9fdTE2IHZsZW4gPSBidGZfdmxlbih0KTsKCWxv
bmcgaCA9IGJ0Zl9oYXNoX2NvbW1vbih0KTsKCWludCBpOwoKCWZvciAoaSA9IDA7IGkgPCB2bGVu
OyBpKyspIHsKCQloID0gaGFzaF9jb21iaW5lKGgsIG1lbWJlci0+bmFtZV9vZmYpOwoJCWggPSBo
YXNoX2NvbWJpbmUoaCwgbWVtYmVyLT50eXBlKTsKCQltZW1iZXIrKzsKCX0KCXJldHVybiBoOwp9
CgovKgogKiBDaGVjayBleGFjdCBlcXVhbGl0eSBvZiB0d28gRlVOQ19QUk9UT3MsIHRha2luZyBp
bnRvIGFjY291bnQgcmVmZXJlbmNlZAogKiB0eXBlIElEcywgdW5kZXIgYXNzdW1wdGlvbiB0aGF0
IHRoZXkgd2VyZSBhbHJlYWR5IHJlc29sdmVkIHRvIGNhbm9uaWNhbAogKiB0eXBlIElEcyBhbmQg
YXJlIG5vdCBnb2luZyB0byBjaGFuZ2UuCiAqIFRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIGR1cmlu
ZyByZWZlcmVuY2UgdHlwZXMgZGVkdXBsaWNhdGlvbiB0byBjb21wYXJlCiAqIEZVTkNfUFJPVE8g
dG8gcG90ZW50aWFsIGNhbm9uaWNhbCByZXByZXNlbnRhdGl2ZS4KICovCnN0YXRpYyBib29sIGJ0
Zl9lcXVhbF9mbnByb3RvKHN0cnVjdCBidGZfdHlwZSAqdDEsIHN0cnVjdCBidGZfdHlwZSAqdDIp
CnsKCWNvbnN0IHN0cnVjdCBidGZfcGFyYW0gKm0xLCAqbTI7CglfX3UxNiB2bGVuOwoJaW50IGk7
CgoJaWYgKCFidGZfZXF1YWxfY29tbW9uKHQxLCB0MikpCgkJcmV0dXJuIGZhbHNlOwoKCXZsZW4g
PSBidGZfdmxlbih0MSk7CgltMSA9IGJ0Zl9wYXJhbXModDEpOwoJbTIgPSBidGZfcGFyYW1zKHQy
KTsKCWZvciAoaSA9IDA7IGkgPCB2bGVuOyBpKyspIHsKCQlpZiAobTEtPm5hbWVfb2ZmICE9IG0y
LT5uYW1lX29mZiB8fCBtMS0+dHlwZSAhPSBtMi0+dHlwZSkKCQkJcmV0dXJuIGZhbHNlOwoJCW0x
Kys7CgkJbTIrKzsKCX0KCXJldHVybiB0cnVlOwp9CgovKgogKiBDaGVjayBzdHJ1Y3R1cmFsIGNv
bXBhdGliaWxpdHkgb2YgdHdvIEZVTkNfUFJPVE9zLCBpZ25vcmluZyByZWZlcmVuY2VkIHR5cGUK
ICogSURzLiBUaGlzIGNoZWNrIGlzIHBlcmZvcm1lZCBkdXJpbmcgdHlwZSBncmFwaCBlcXVpdmFs
ZW5jZSBjaGVjayBhbmQKICogcmVmZXJlbmNlZCB0eXBlcyBlcXVpdmFsZW5jZSBpcyBjaGVja2Vk
IHNlcGFyYXRlbHkuCiAqLwpzdGF0aWMgYm9vbCBidGZfY29tcGF0X2ZucHJvdG8oc3RydWN0IGJ0
Zl90eXBlICp0MSwgc3RydWN0IGJ0Zl90eXBlICp0MikKewoJY29uc3Qgc3RydWN0IGJ0Zl9wYXJh
bSAqbTEsICptMjsKCV9fdTE2IHZsZW47CglpbnQgaTsKCgkvKiBza2lwIHJldHVybiB0eXBlIElE
ICovCglpZiAodDEtPm5hbWVfb2ZmICE9IHQyLT5uYW1lX29mZiB8fCB0MS0+aW5mbyAhPSB0Mi0+
aW5mbykKCQlyZXR1cm4gZmFsc2U7CgoJdmxlbiA9IGJ0Zl92bGVuKHQxKTsKCW0xID0gYnRmX3Bh
cmFtcyh0MSk7CgltMiA9IGJ0Zl9wYXJhbXModDIpOwoJZm9yIChpID0gMDsgaSA8IHZsZW47IGkr
KykgewoJCWlmIChtMS0+bmFtZV9vZmYgIT0gbTItPm5hbWVfb2ZmKQoJCQlyZXR1cm4gZmFsc2U7
CgkJbTErKzsKCQltMisrOwoJfQoJcmV0dXJuIHRydWU7Cn0KCi8qIFByZXBhcmUgc3BsaXQgQlRG
IGZvciBkZWR1cGxpY2F0aW9uIGJ5IGNhbGN1bGF0aW5nIGhhc2hlcyBvZiBiYXNlIEJURidzCiAq
IHR5cGVzIGFuZCBpbml0aWFsaXppbmcgdGhlIHJlc3Qgb2YgdGhlIHN0YXRlIChjYW5vbmljYWwg
dHlwZSBtYXBwaW5nKSBmb3IKICogdGhlIGZpeGVkIGJhc2UgQlRGIHBhcnQuCiAqLwpzdGF0aWMg
aW50IGJ0Zl9kZWR1cF9wcmVwKHN0cnVjdCBidGZfZGVkdXAgKmQpCnsKCXN0cnVjdCBidGZfdHlw
ZSAqdDsKCWludCB0eXBlX2lkOwoJbG9uZyBoOwoKCWlmICghZC0+YnRmLT5iYXNlX2J0ZikKCQly
ZXR1cm4gMDsKCglmb3IgKHR5cGVfaWQgPSAxOyB0eXBlX2lkIDwgZC0+YnRmLT5zdGFydF9pZDsg
dHlwZV9pZCsrKSB7CgkJdCA9IGJ0Zl90eXBlX2J5X2lkKGQtPmJ0ZiwgdHlwZV9pZCk7CgoJCS8q
IGFsbCBiYXNlIEJURiB0eXBlcyBhcmUgc2VsZi1jYW5vbmljYWwgYnkgZGVmaW5pdGlvbiAqLwoJ
CWQtPm1hcFt0eXBlX2lkXSA9IHR5cGVfaWQ7CgoJCXN3aXRjaCAoYnRmX2tpbmQodCkpIHsKCQlj
YXNlIEJURl9LSU5EX1ZBUjoKCQljYXNlIEJURl9LSU5EX0RBVEFTRUM6CgkJCS8qIFZBUiBhbmQg
REFUQVNFQyBhcmUgbmV2ZXIgaGFzaC9kZWR1cGxpY2F0ZWQgKi8KCQkJY29udGludWU7CgkJY2Fz
ZSBCVEZfS0lORF9DT05TVDoKCQljYXNlIEJURl9LSU5EX1ZPTEFUSUxFOgoJCWNhc2UgQlRGX0tJ
TkRfUkVTVFJJQ1Q6CgkJY2FzZSBCVEZfS0lORF9QVFI6CgkJY2FzZSBCVEZfS0lORF9GV0Q6CgkJ
Y2FzZSBCVEZfS0lORF9UWVBFREVGOgoJCWNhc2UgQlRGX0tJTkRfRlVOQzoKCQljYXNlIEJURl9L
SU5EX0ZMT0FUOgoJCWNhc2UgQlRGX0tJTkRfVFlQRV9UQUc6CgkJCWggPSBidGZfaGFzaF9jb21t
b24odCk7CgkJCWJyZWFrOwoJCWNhc2UgQlRGX0tJTkRfSU5UOgoJCWNhc2UgQlRGX0tJTkRfREVD
TF9UQUc6CgkJCWggPSBidGZfaGFzaF9pbnRfZGVjbF90YWcodCk7CgkJCWJyZWFrOwoJCWNhc2Ug
QlRGX0tJTkRfRU5VTToKCQljYXNlIEJURl9LSU5EX0VOVU02NDoKCQkJaCA9IGJ0Zl9oYXNoX2Vu
dW0odCk7CgkJCWJyZWFrOwoJCWNhc2UgQlRGX0tJTkRfU1RSVUNUOgoJCWNhc2UgQlRGX0tJTkRf
VU5JT046CgkJCWggPSBidGZfaGFzaF9zdHJ1Y3QodCk7CgkJCWJyZWFrOwoJCWNhc2UgQlRGX0tJ
TkRfQVJSQVk6CgkJCWggPSBidGZfaGFzaF9hcnJheSh0KTsKCQkJYnJlYWs7CgkJY2FzZSBCVEZf
S0lORF9GVU5DX1BST1RPOgoJCQloID0gYnRmX2hhc2hfZm5wcm90byh0KTsKCQkJYnJlYWs7CgkJ
ZGVmYXVsdDoKCQkJcHJfZGVidWcoInVua25vd24ga2luZCAlZCBmb3IgdHlwZSBbJWRdXG4iLCBi
dGZfa2luZCh0KSwgdHlwZV9pZCk7CgkJCXJldHVybiAtRUlOVkFMOwoJCX0KCQlpZiAoYnRmX2Rl
ZHVwX3RhYmxlX2FkZChkLCBoLCB0eXBlX2lkKSkKCQkJcmV0dXJuIC1FTk9NRU07Cgl9CgoJcmV0
dXJuIDA7Cn0KCi8qCiAqIERlZHVwbGljYXRlIHByaW1pdGl2ZSB0eXBlcywgdGhhdCBjYW4ndCBy
ZWZlcmVuY2Ugb3RoZXIgdHlwZXMsIGJ5IGNhbGN1bGF0aW5nCiAqIHRoZWlyIHR5cGUgc2lnbmF0
dXJlIGhhc2ggYW5kIGNvbXBhcmluZyB0aGVtIHdpdGggYW55IHBvc3NpYmxlIGNhbm9uaWNhbAog
KiBjYW5kaWRhdGUuIElmIG5vIGNhbm9uaWNhbCBjYW5kaWRhdGUgbWF0Y2hlcywgdHlwZSBpdHNl
bGYgaXMgbWFya2VkIGFzCiAqIGNhbm9uaWNhbCBhbmQgaXMgYWRkZWQgaW50byBgYnRmX2RlZHVw
LT5kZWR1cF90YWJsZWAgYXMgYW5vdGhlciBjYW5kaWRhdGUuCiAqLwpzdGF0aWMgaW50IGJ0Zl9k
ZWR1cF9wcmltX3R5cGUoc3RydWN0IGJ0Zl9kZWR1cCAqZCwgX191MzIgdHlwZV9pZCkKewoJc3Ry
dWN0IGJ0Zl90eXBlICp0ID0gYnRmX3R5cGVfYnlfaWQoZC0+YnRmLCB0eXBlX2lkKTsKCXN0cnVj
dCBoYXNobWFwX2VudHJ5ICpoYXNoX2VudHJ5OwoJc3RydWN0IGJ0Zl90eXBlICpjYW5kOwoJLyog
aWYgd2UgZG9uJ3QgZmluZCBlcXVpdmFsZW50IHR5cGUsIHRoZW4gd2UgYXJlIGNhbm9uaWNhbCAq
LwoJX191MzIgbmV3X2lkID0gdHlwZV9pZDsKCV9fdTMyIGNhbmRfaWQ7Cglsb25nIGg7CgoJc3dp
dGNoIChidGZfa2luZCh0KSkgewoJY2FzZSBCVEZfS0lORF9DT05TVDoKCWNhc2UgQlRGX0tJTkRf
Vk9MQVRJTEU6CgljYXNlIEJURl9LSU5EX1JFU1RSSUNUOgoJY2FzZSBCVEZfS0lORF9QVFI6Cglj
YXNlIEJURl9LSU5EX1RZUEVERUY6CgljYXNlIEJURl9LSU5EX0FSUkFZOgoJY2FzZSBCVEZfS0lO
RF9TVFJVQ1Q6CgljYXNlIEJURl9LSU5EX1VOSU9OOgoJY2FzZSBCVEZfS0lORF9GVU5DOgoJY2Fz
ZSBCVEZfS0lORF9GVU5DX1BST1RPOgoJY2FzZSBCVEZfS0lORF9WQVI6CgljYXNlIEJURl9LSU5E
X0RBVEFTRUM6CgljYXNlIEJURl9LSU5EX0RFQ0xfVEFHOgoJY2FzZSBCVEZfS0lORF9UWVBFX1RB
RzoKCQlyZXR1cm4gMDsKCgljYXNlIEJURl9LSU5EX0lOVDoKCQloID0gYnRmX2hhc2hfaW50X2Rl
Y2xfdGFnKHQpOwoJCWZvcl9lYWNoX2RlZHVwX2NhbmQoZCwgaGFzaF9lbnRyeSwgaCkgewoJCQlj
YW5kX2lkID0gaGFzaF9lbnRyeS0+dmFsdWU7CgkJCWNhbmQgPSBidGZfdHlwZV9ieV9pZChkLT5i
dGYsIGNhbmRfaWQpOwoJCQlpZiAoYnRmX2VxdWFsX2ludF90YWcodCwgY2FuZCkpIHsKCQkJCW5l
d19pZCA9IGNhbmRfaWQ7CgkJCQlicmVhazsKCQkJfQoJCX0KCQlicmVhazsKCgljYXNlIEJURl9L
SU5EX0VOVU06CgljYXNlIEJURl9LSU5EX0VOVU02NDoKCQloID0gYnRmX2hhc2hfZW51bSh0KTsK
CQlmb3JfZWFjaF9kZWR1cF9jYW5kKGQsIGhhc2hfZW50cnksIGgpIHsKCQkJY2FuZF9pZCA9IGhh
c2hfZW50cnktPnZhbHVlOwoJCQljYW5kID0gYnRmX3R5cGVfYnlfaWQoZC0+YnRmLCBjYW5kX2lk
KTsKCQkJaWYgKGJ0Zl9lcXVhbF9lbnVtKHQsIGNhbmQpKSB7CgkJCQluZXdfaWQgPSBjYW5kX2lk
OwoJCQkJYnJlYWs7CgkJCX0KCQkJaWYgKGJ0Zl9jb21wYXRfZW51bSh0LCBjYW5kKSkgewoJCQkJ
aWYgKGJ0Zl9pc19lbnVtX2Z3ZCh0KSkgewoJCQkJCS8qIHJlc29sdmUgZndkIHRvIGZ1bGwgZW51
bSAqLwoJCQkJCW5ld19pZCA9IGNhbmRfaWQ7CgkJCQkJYnJlYWs7CgkJCQl9CgkJCQkvKiByZXNv
bHZlIGNhbm9uaWNhbCBlbnVtIGZ3ZCB0byBmdWxsIGVudW0gKi8KCQkJCWQtPm1hcFtjYW5kX2lk
XSA9IHR5cGVfaWQ7CgkJCX0KCQl9CgkJYnJlYWs7CgoJY2FzZSBCVEZfS0lORF9GV0Q6CgljYXNl
IEJURl9LSU5EX0ZMT0FUOgoJCWggPSBidGZfaGFzaF9jb21tb24odCk7CgkJZm9yX2VhY2hfZGVk
dXBfY2FuZChkLCBoYXNoX2VudHJ5LCBoKSB7CgkJCWNhbmRfaWQgPSBoYXNoX2VudHJ5LT52YWx1
ZTsKCQkJY2FuZCA9IGJ0Zl90eXBlX2J5X2lkKGQtPmJ0ZiwgY2FuZF9pZCk7CgkJCWlmIChidGZf
ZXF1YWxfY29tbW9uKHQsIGNhbmQpKSB7CgkJCQluZXdfaWQgPSBjYW5kX2lkOwoJCQkJYnJlYWs7
CgkJCX0KCQl9CgkJYnJlYWs7CgoJZGVmYXVsdDoKCQlyZXR1cm4gLUVJTlZBTDsKCX0KCglkLT5t
YXBbdHlwZV9pZF0gPSBuZXdfaWQ7CglpZiAodHlwZV9pZCA9PSBuZXdfaWQgJiYgYnRmX2RlZHVw
X3RhYmxlX2FkZChkLCBoLCB0eXBlX2lkKSkKCQlyZXR1cm4gLUVOT01FTTsKCglyZXR1cm4gMDsK
fQoKc3RhdGljIGludCBidGZfZGVkdXBfcHJpbV90eXBlcyhzdHJ1Y3QgYnRmX2RlZHVwICpkKQp7
CglpbnQgaSwgZXJyOwoKCWZvciAoaSA9IDA7IGkgPCBkLT5idGYtPm5yX3R5cGVzOyBpKyspIHsK
CQllcnIgPSBidGZfZGVkdXBfcHJpbV90eXBlKGQsIGQtPmJ0Zi0+c3RhcnRfaWQgKyBpKTsKCQlp
ZiAoZXJyKQoJCQlyZXR1cm4gZXJyOwoJfQoJcmV0dXJuIDA7Cn0KCi8qCiAqIENoZWNrIHdoZXRo
ZXIgdHlwZSBpcyBhbHJlYWR5IG1hcHBlZCBpbnRvIGNhbm9uaWNhbCBvbmUgKGNvdWxkIGJlIHRv
IGl0c2VsZikuCiAqLwpzdGF0aWMgaW5saW5lIGJvb2wgaXNfdHlwZV9tYXBwZWQoc3RydWN0IGJ0
Zl9kZWR1cCAqZCwgdWludDMyX3QgdHlwZV9pZCkKewoJcmV0dXJuIGQtPm1hcFt0eXBlX2lkXSA8
PSBCVEZfTUFYX05SX1RZUEVTOwp9CgovKgogKiBSZXNvbHZlIHR5cGUgSUQgaW50byBpdHMgY2Fu
b25pY2FsIHR5cGUgSUQsIGlmIGFueTsgb3RoZXJ3aXNlIHJldHVybiBvcmlnaW5hbAogKiB0eXBl
IElELiBJZiB0eXBlIGlzIEZXRCBhbmQgaXMgcmVzb2x2ZWQgaW50byBTVFJVQ1QvVU5JT04gYWxy
ZWFkeSwgZm9sbG93CiAqIFNUUlVDVC9VTklPTiBsaW5rIGFuZCByZXNvbHZlIGl0IGludG8gY2Fu
b25pY2FsIHR5cGUgSUQgYXMgd2VsbC4KICovCnN0YXRpYyBpbmxpbmUgX191MzIgcmVzb2x2ZV90
eXBlX2lkKHN0cnVjdCBidGZfZGVkdXAgKmQsIF9fdTMyIHR5cGVfaWQpCnsKCXdoaWxlIChpc190
eXBlX21hcHBlZChkLCB0eXBlX2lkKSAmJiBkLT5tYXBbdHlwZV9pZF0gIT0gdHlwZV9pZCkKCQl0
eXBlX2lkID0gZC0+bWFwW3R5cGVfaWRdOwoJcmV0dXJuIHR5cGVfaWQ7Cn0KCi8qCiAqIFJlc29s
dmUgRldEIHRvIHVuZGVybHlpbmcgU1RSVUNUL1VOSU9OLCBpZiBhbnk7IG90aGVyd2lzZSByZXR1
cm4gb3JpZ2luYWwKICogdHlwZSBJRC4KICovCnN0YXRpYyB1aW50MzJfdCByZXNvbHZlX2Z3ZF9p
ZChzdHJ1Y3QgYnRmX2RlZHVwICpkLCB1aW50MzJfdCB0eXBlX2lkKQp7CglfX3UzMiBvcmlnX3R5
cGVfaWQgPSB0eXBlX2lkOwoKCWlmICghYnRmX2lzX2Z3ZChidGZfX3R5cGVfYnlfaWQoZC0+YnRm
LCB0eXBlX2lkKSkpCgkJcmV0dXJuIHR5cGVfaWQ7CgoJd2hpbGUgKGlzX3R5cGVfbWFwcGVkKGQs
IHR5cGVfaWQpICYmIGQtPm1hcFt0eXBlX2lkXSAhPSB0eXBlX2lkKQoJCXR5cGVfaWQgPSBkLT5t
YXBbdHlwZV9pZF07CgoJaWYgKCFidGZfaXNfZndkKGJ0Zl9fdHlwZV9ieV9pZChkLT5idGYsIHR5
cGVfaWQpKSkKCQlyZXR1cm4gdHlwZV9pZDsKCglyZXR1cm4gb3JpZ190eXBlX2lkOwp9CgoKc3Rh
dGljIGlubGluZSBfX3UxNiBidGZfZndkX2tpbmQoc3RydWN0IGJ0Zl90eXBlICp0KQp7CglyZXR1
cm4gYnRmX2tmbGFnKHQpID8gQlRGX0tJTkRfVU5JT04gOiBCVEZfS0lORF9TVFJVQ1Q7Cn0KCi8q
IENoZWNrIGlmIGdpdmVuIHR3byB0eXBlcyBhcmUgaWRlbnRpY2FsIEFSUkFZIGRlZmluaXRpb25z
ICovCnN0YXRpYyBib29sIGJ0Zl9kZWR1cF9pZGVudGljYWxfYXJyYXlzKHN0cnVjdCBidGZfZGVk
dXAgKmQsIF9fdTMyIGlkMSwgX191MzIgaWQyKQp7CglzdHJ1Y3QgYnRmX3R5cGUgKnQxLCAqdDI7
CgoJdDEgPSBidGZfdHlwZV9ieV9pZChkLT5idGYsIGlkMSk7Cgl0MiA9IGJ0Zl90eXBlX2J5X2lk
KGQtPmJ0ZiwgaWQyKTsKCWlmICghYnRmX2lzX2FycmF5KHQxKSB8fCAhYnRmX2lzX2FycmF5KHQy
KSkKCQlyZXR1cm4gZmFsc2U7CgoJcmV0dXJuIGJ0Zl9lcXVhbF9hcnJheSh0MSwgdDIpOwp9Cgov
KiBDaGVjayBpZiBnaXZlbiB0d28gdHlwZXMgYXJlIGlkZW50aWNhbCBTVFJVQ1QvVU5JT04gZGVm
aW5pdGlvbnMgKi8Kc3RhdGljIGJvb2wgYnRmX2RlZHVwX2lkZW50aWNhbF9zdHJ1Y3RzKHN0cnVj
dCBidGZfZGVkdXAgKmQsIF9fdTMyIGlkMSwgX191MzIgaWQyKQp7Cgljb25zdCBzdHJ1Y3QgYnRm
X21lbWJlciAqbTEsICptMjsKCXN0cnVjdCBidGZfdHlwZSAqdDEsICp0MjsKCWludCBuLCBpOwoK
CXQxID0gYnRmX3R5cGVfYnlfaWQoZC0+YnRmLCBpZDEpOwoJdDIgPSBidGZfdHlwZV9ieV9pZChk
LT5idGYsIGlkMik7CgoJaWYgKCFidGZfaXNfY29tcG9zaXRlKHQxKSB8fCBidGZfa2luZCh0MSkg
IT0gYnRmX2tpbmQodDIpKQoJCXJldHVybiBmYWxzZTsKCglpZiAoIWJ0Zl9zaGFsbG93X2VxdWFs
X3N0cnVjdCh0MSwgdDIpKQoJCXJldHVybiBmYWxzZTsKCgltMSA9IGJ0Zl9tZW1iZXJzKHQxKTsK
CW0yID0gYnRmX21lbWJlcnModDIpOwoJZm9yIChpID0gMCwgbiA9IGJ0Zl92bGVuKHQxKTsgaSA8
IG47IGkrKywgbTErKywgbTIrKykgewoJCWlmIChtMS0+dHlwZSAhPSBtMi0+dHlwZSAmJgoJCSAg
ICAhYnRmX2RlZHVwX2lkZW50aWNhbF9hcnJheXMoZCwgbTEtPnR5cGUsIG0yLT50eXBlKSAmJgoJ
CSAgICAhYnRmX2RlZHVwX2lkZW50aWNhbF9zdHJ1Y3RzKGQsIG0xLT50eXBlLCBtMi0+dHlwZSkp
CgkJCXJldHVybiBmYWxzZTsKCX0KCXJldHVybiB0cnVlOwp9CgovKgogKiBDaGVjayBlcXVpdmFs
ZW5jZSBvZiBCVEYgdHlwZSBncmFwaCBmb3JtZWQgYnkgY2FuZGlkYXRlIHN0cnVjdC91bmlvbiAo
d2UnbGwKICogY2FsbCBpdCAiY2FuZGlkYXRlIGdyYXBoIiBpbiB0aGlzIGRlc2NyaXB0aW9uIGZv
ciBicmV2aXR5KSB0byBhIHR5cGUgZ3JhcGgKICogZm9ybWVkIGJ5IChwb3RlbnRpYWwpIGNhbm9u
aWNhbCBzdHJ1Y3QvdW5pb24gKCJjYW5vbmljYWwgZ3JhcGgiIGZvciBicmV2aXR5CiAqIGhlcmUs
IHRob3VnaCBrZWVwIGluIG1pbmQgdGhhdCBub3QgYWxsIHR5cGVzIGluIGNhbm9uaWNhbCBncmFw
aCBhcmUKICogbmVjZXNzYXJpbHkgY2Fub25pY2FsIHJlcHJlc2VudGF0aXZlcyB0aGVtc2VsdmVz
LCBzb21lIG9mIHRoZW0gbWlnaHQgYmUKICogZHVwbGljYXRlcyBvciBpdHMgdW5pcXVlbmVzcyBt
aWdodCBub3QgaGF2ZSBiZWVuIGVzdGFibGlzaGVkIHlldCkuCiAqIFJldHVybnM6CiAqICAtID4w
LCBpZiB0eXBlIGdyYXBocyBhcmUgZXF1aXZhbGVudDsKICogIC0gIDAsIGlmIG5vdCBlcXVpdmFs
ZW50OwogKiAgLSA8MCwgb24gZXJyb3IuCiAqCiAqIEFsZ29yaXRobSBwZXJmb3JtcyBzaWRlLWJ5
LXNpZGUgREZTIHRyYXZlcnNhbCBvZiBib3RoIHR5cGUgZ3JhcGhzIGFuZCBjaGVja3MKICogZXF1
aXZhbGVuY2Ugb2YgQlRGIHR5cGVzIGF0IGVhY2ggc3RlcC4gSWYgYXQgYW55IHBvaW50IEJURiB0
eXBlcyBpbiBjYW5kaWRhdGUKICogYW5kIGNhbm9uaWNhbCBncmFwaHMgYXJlIG5vdCBjb21wYXRp
YmxlIHN0cnVjdHVyYWxseSwgd2hvbGUgZ3JhcGhzIGFyZQogKiBpbmNvbXBhdGlibGUuIElmIHR5
cGVzIGFyZSBzdHJ1Y3R1cmFsbHkgZXF1aXZhbGVudCAoaS5lLiwgYWxsIGluZm9ybWF0aW9uCiAq
IGV4Y2VwdCByZWZlcmVuY2VkIHR5cGUgSURzIGlzIGV4YWN0bHkgdGhlIHNhbWUpLCBhIG1hcHBp
bmcgZnJvbSBgY2Fub25faWRgIHRvCiAqIGEgYGNhbmRfaWRgIGlzIHJlY29kZWQgaW4gaHlwb3Ro
ZXRpY2FsIG1hcHBpbmcgKGBidGZfZGVkdXAtPmh5cG90X21hcGApLgogKiBJZiBhIHR5cGUgcmVm
ZXJlbmNlcyBvdGhlciB0eXBlcywgdGhlbiB0aG9zZSByZWZlcmVuY2VkIHR5cGVzIGFyZSBjaGVj
a2VkCiAqIGZvciBlcXVpdmFsZW5jZSByZWN1cnNpdmVseS4KICoKICogRHVyaW5nIERGUyB0cmF2
ZXJzYWwsIGlmIHdlIGZpbmQgdGhhdCBmb3IgY3VycmVudCBgY2Fub25faWRgIHR5cGUgd2UKICog
YWxyZWFkeSBoYXZlIHNvbWUgbWFwcGluZyBpbiBoeXBvdGhldGljYWwgbWFwLCB3ZSBjaGVjayBm
b3IgdHdvIHBvc3NpYmxlCiAqIHNpdHVhdGlvbnM6CiAqICAgLSBgY2Fub25faWRgIGlzIG1hcHBl
ZCB0byBleGFjdGx5IHRoZSBzYW1lIHR5cGUgYXMgYGNhbmRfaWRgLiBUaGlzIHdpbGwKICogICAg
IGhhcHBlbiB3aGVuIHR5cGUgZ3JhcGhzIGhhdmUgY3ljbGVzLiBJbiB0aGlzIGNhc2Ugd2UgYXNz
dW1lIHRob3NlIHR3bwogKiAgICAgdHlwZXMgYXJlIGVxdWl2YWxlbnQuCiAqICAgLSBgY2Fub25f
aWRgIGlzIG1hcHBlZCB0byBkaWZmZXJlbnQgdHlwZS4gVGhpcyBpcyBjb250cmFkaWN0aW9uIGlu
IG91cgogKiAgICAgaHlwb3RoZXRpY2FsIG1hcHBpbmcsIGJlY2F1c2Ugc2FtZSBncmFwaCBpbiBj
YW5vbmljYWwgZ3JhcGggY29ycmVzcG9uZHMKICogICAgIHRvIHR3byBkaWZmZXJlbnQgdHlwZXMg
aW4gY2FuZGlkYXRlIGdyYXBoLCB3aGljaCBmb3IgZXF1aXZhbGVudCB0eXBlCiAqICAgICBncmFw
aHMgc2hvdWxkbid0IGhhcHBlbi4gVGhpcyBjb25kaXRpb24gdGVybWluYXRlcyBlcXVpdmFsZW5j
ZSBjaGVjawogKiAgICAgd2l0aCBuZWdhdGl2ZSByZXN1bHQuCiAqCiAqIElmIHR5cGUgZ3JhcGhz
IHRyYXZlcnNhbCBleGhhdXN0cyB0eXBlcyB0byBjaGVjayBhbmQgZmluZCBubyBjb250cmFkaWN0
aW9uLAogKiB0aGVuIHR5cGUgZ3JhcGhzIGFyZSBlcXVpdmFsZW50LgogKgogKiBXaGVuIGNoZWNr
aW5nIHR5cGVzIGZvciBlcXVpdmFsZW5jZSwgdGhlcmUgaXMgb25lIHNwZWNpYWwgY2FzZTogRldE
IHR5cGVzLgogKiBJZiBGV0QgdHlwZSByZXNvbHV0aW9uIGlzIGFsbG93ZWQgYW5kIG9uZSBvZiB0
aGUgdHlwZXMgKGVpdGhlciBmcm9tIGNhbm9uaWNhbAogKiBvciBjYW5kaWRhdGUgZ3JhcGgpIGlz
IEZXRCBhbmQgb3RoZXIgaXMgU1RSVUNUL1VOSU9OIChkZXBlbmRpbmcgb24gRldEJ3Mga2luZAog
KiBmbGFnKSBhbmQgdGhlaXIgbmFtZXMgbWF0Y2gsIGh5cG90aGV0aWNhbCBtYXBwaW5nIGlzIHVw
ZGF0ZWQgdG8gcG9pbnQgZnJvbQogKiBGV0QgdG8gU1RSVUNUL1VOSU9OLiBJZiBncmFwaHMgd2ls
bCBiZSBkZXRlcm1pbmVkIGFzIGVxdWl2YWxlbnQgc3VjY2Vzc2Z1bGx5LAogKiB0aGlzIG1hcHBp
bmcgd2lsbCBiZSB1c2VkIHRvIHJlY29yZCBGV0QgLT4gU1RSVUNUL1VOSU9OIG1hcHBpbmcgcGVy
bWFuZW50bHkuCiAqCiAqIFRlY2huaWNhbGx5LCB0aGlzIGNvdWxkIGxlYWQgdG8gaW5jb3JyZWN0
IEZXRCB0byBTVFJVQ1QvVU5JT04gcmVzb2x1dGlvbiwKICogaWYgdGhlcmUgYXJlIHR3byBleGFj
dGx5IG5hbWVkIChvciBhbm9ueW1vdXMpIHN0cnVjdHMvdW5pb25zIHRoYXQgYXJlCiAqIGNvbXBh
dGlibGUgc3RydWN0dXJhbGx5LCBvbmUgb2Ygd2hpY2ggaGFzIEZXRCBmaWVsZCwgd2hpbGUgb3Ro
ZXIgaXMgY29uY3JldGUKICogU1RSVUNUL1VOSU9OLCBidXQgYWNjb3JkaW5nIHRvIEMgc291cmNl
cyB0aGV5IGFyZSBkaWZmZXJlbnQgc3RydWN0cy91bmlvbnMKICogdGhhdCBhcmUgcmVmZXJlbmNp
bmcgZGlmZmVyZW50IHR5cGVzIHdpdGggdGhlIHNhbWUgbmFtZS4gVGhpcyBpcyBleHRyZW1lbHkK
ICogdW5saWtlbHkgdG8gaGFwcGVuLCBidXQgYnRmX2RlZHVwIEFQSSBhbGxvd3MgdG8gZGlzYWJs
ZSBGV0QgcmVzb2x1dGlvbiBpZgogKiB0aGlzIGxvZ2ljIGlzIGNhdXNpbmcgcHJvYmxlbXMuCiAq
CiAqIERvaW5nIEZXRCByZXNvbHV0aW9uIG1lYW5zIHRoYXQgYm90aCBjYW5kaWRhdGUgYW5kL29y
IGNhbm9uaWNhbCBncmFwaHMgY2FuCiAqIGNvbnNpc3RzIG9mIHBvcnRpb25zIG9mIHRoZSBncmFw
aCB0aGF0IGNvbWUgZnJvbSBtdWx0aXBsZSBjb21waWxhdGlvbiB1bml0cy4KICogVGhpcyBpcyBk
dWUgdG8gdGhlIGZhY3QgdGhhdCB0eXBlcyB3aXRoaW4gc2luZ2xlIGNvbXBpbGF0aW9uIHVuaXQg
YXJlIGFsd2F5cwogKiBkZWR1cGxpY2F0ZWQgYW5kIEZXRHMgYXJlIGFscmVhZHkgcmVzb2x2ZWQs
IGlmIHJlZmVyZW5jZWQgc3RydWN0L3VuaW9uCiAqIGRlZmluaXRpb24gaXMgYXZhaWxhYmxlLiBT
bywgaWYgd2UgaGFkIHVucmVzb2x2ZWQgRldEIGFuZCBmb3VuZCBjb3JyZXNwb25kaW5nCiAqIFNU
UlVDVC9VTklPTiwgdGhleSB3aWxsIGJlIGZyb20gZGlmZmVyZW50IGNvbXBpbGF0aW9uIHVuaXRz
LiBUaGlzCiAqIGNvbnNlcXVlbnRseSBtZWFucyB0aGF0IHdoZW4gd2UgImxpbmsiIEZXRCB0byBj
b3JyZXNwb25kaW5nIFNUUlVDVC9VTklPTiwKICogdHlwZSBncmFwaCB3aWxsIGxpa2VseSBoYXZl
IGF0IGxlYXN0IHR3byBkaWZmZXJlbnQgQlRGIHR5cGVzIHRoYXQgZGVzY3JpYmUKICogc2FtZSB0
eXBlIChlLmcuLCBtb3N0IHByb2JhYmx5IHRoZXJlIHdpbGwgYmUgdHdvIGRpZmZlcmVudCBCVEYg
dHlwZXMgZm9yIHRoZQogKiBzYW1lICdpbnQnIHByaW1pdGl2ZSB0eXBlKSBhbmQgY291bGQgZXZl
biBoYXZlICJvdmVybGFwcGluZyIgcGFydHMgb2YgdHlwZQogKiBncmFwaCB0aGF0IGRlc2NyaWJl
IHNhbWUgc3Vic2V0IG9mIHR5cGVzLgogKgogKiBUaGlzIGluIHR1cm4gbWVhbnMgdGhhdCBvdXIg
YXNzdW1wdGlvbiB0aGF0IGVhY2ggdHlwZSBpbiBjYW5vbmljYWwgZ3JhcGgKICogbXVzdCBjb3Jy
ZXNwb25kIHRvIGV4YWN0bHkgb25lIHR5cGUgaW4gY2FuZGlkYXRlIGdyYXBoIG1pZ2h0IG5vdCBo
b2xkCiAqIGFueW1vcmUgYW5kIHdpbGwgbWFrZSBpdCBoYXJkZXIgdG8gZGV0ZWN0IGNvbnRyYWRp
Y3Rpb25zIHVzaW5nIGh5cG90aGV0aWNhbAogKiBtYXAuIFRvIGhhbmRsZSB0aGlzIHByb2JsZW0s
IHdlIGFsbG93IHRvIGZvbGxvdyBGV0QgLT4gU1RSVUNUL1VOSU9OCiAqIHJlc29sdXRpb24gb25s
eSBpbiBjYW5vbmljYWwgZ3JhcGguIEZXRHMgaW4gY2FuZGlkYXRlIGdyYXBocyBhcmUgbmV2ZXIK
ICogcmVzb2x2ZWQuIFRvIHNlZSB3aHkgaXQncyBPSywgbGV0J3MgY2hlY2sgYWxsIHBvc3NpYmxl
IHNpdHVhdGlvbnMgdy5yLnQuIEZXRHMKICogdGhhdCBjYW4gb2NjdXI6CiAqICAgLSBCb3RoIHR5
cGVzIGluIGNhbm9uaWNhbCBhbmQgY2FuZGlkYXRlIGdyYXBocyBhcmUgRldEcy4gSWYgdGhleSBh
cmUKICogICAgIHN0cnVjdHVyYWxseSBlcXVpdmFsZW50LCB0aGVuIHRoZXkgY2FuIGVpdGhlciBi
ZSBib3RoIHJlc29sdmVkIHRvIHRoZQogKiAgICAgc2FtZSBTVFJVQ1QvVU5JT04gb3Igbm90IHJl
c29sdmVkIGF0IGFsbC4gSW4gYm90aCBjYXNlcyB0aGV5IGFyZQogKiAgICAgZXF1aXZhbGVudCBh
bmQgdGhlcmUgaXMgbm8gbmVlZCB0byByZXNvbHZlIEZXRCBvbiBjYW5kaWRhdGUgc2lkZS4KICog
ICAtIEJvdGggdHlwZXMgaW4gY2Fub25pY2FsIGFuZCBjYW5kaWRhdGUgZ3JhcGhzIGFyZSBjb25j
cmV0ZSBTVFJVQ1QvVU5JT04sCiAqICAgICBzbyBub3RoaW5nIHRvIHJlc29sdmUgYXMgd2VsbCwg
YWxnb3JpdGhtIHdpbGwgY2hlY2sgZXF1aXZhbGVuY2UgYW55d2F5LgogKiAgIC0gVHlwZSBpbiBj
YW5vbmljYWwgZ3JhcGggaXMgRldELCB3aGlsZSB0eXBlIGluIGNhbmRpZGF0ZSBpcyBjb25jcmV0
ZQogKiAgICAgU1RSVUNUL1VOSU9OLiBJbiB0aGlzIGNhc2UgY2FuZGlkYXRlIGdyYXBoIGNvbWVz
IGZyb20gc2luZ2xlIGNvbXBpbGF0aW9uCiAqICAgICB1bml0LCBzbyB0aGVyZSBpcyBleGFjdGx5
IG9uZSBCVEYgdHlwZSBmb3IgZWFjaCB1bmlxdWUgQyB0eXBlLiBBZnRlcgogKiAgICAgcmVzb2x2
aW5nIEZXRCBpbnRvIFNUUlVDVC9VTklPTiwgdGhlcmUgbWlnaHQgYmUgbW9yZSB0aGFuIG9uZSBC
VEYgdHlwZQogKiAgICAgaW4gY2Fub25pY2FsIGdyYXBoIG1hcHBpbmcgdG8gc2luZ2xlIEJURiB0
eXBlIGluIGNhbmRpZGF0ZSBncmFwaCwgYnV0CiAqICAgICBiZWNhdXNlIGh5cG90aGV0aWNhbCBt
YXBwaW5nIG1hcHMgZnJvbSBjYW5vbmljYWwgdG8gY2FuZGlkYXRlIHR5cGVzLCBpdCdzCiAqICAg
ICBhbHJpZ2h0LCBhbmQgd2Ugc3RpbGwgbWFpbnRhaW4gdGhlIHByb3BlcnR5IG9mIGhhdmluZyBz
aW5nbGUgYGNhbm9uX2lkYAogKiAgICAgbWFwcGluZyB0byBzaW5nbGUgYGNhbmRfaWRgICh0aGVy
ZSBjb3VsZCBiZSB0d28gZGlmZmVyZW50IGBjYW5vbl9pZGAKICogICAgIG1hcHBlZCB0byB0aGUg
c2FtZSBgY2FuZF9pZGAsIGJ1dCBpdCdzIG5vdCBjb250cmFkaWN0b3J5KS4KICogICAtIFR5cGUg
aW4gY2Fub25pY2FsIGdyYXBoIGlzIGNvbmNyZXRlIFNUUlVDVC9VTklPTiwgd2hpbGUgdHlwZSBp
biBjYW5kaWRhdGUKICogICAgIGdyYXBoIGlzIEZXRC4gSW4gdGhpcyBjYXNlIHdlIGFyZSBqdXN0
IGdvaW5nIHRvIGNoZWNrIGNvbXBhdGliaWxpdHkgb2YKICogICAgIFNUUlVDVC9VTklPTiBhbmQg
Y29ycmVzcG9uZGluZyBGV0QsIGFuZCBpZiB0aGV5IGFyZSBjb21wYXRpYmxlLCB3ZSdsbAogKiAg
ICAgYXNzdW1lIHRoYXQgd2hhdGV2ZXIgU1RSVUNUL1VOSU9OIEZXRCByZXNvbHZlcyB0byBtdXN0
IGJlIGVxdWl2YWxlbnQgdG8KICogICAgIGEgY29uY3JldGUgU1RSVUNUL1VOSU9OIGZyb20gY2Fu
b25pY2FsIGdyYXBoLiBJZiB0aGUgcmVzdCBvZiB0eXBlIGdyYXBocwogKiAgICAgdHVybiBvdXQg
ZXF1aXZhbGVudCwgd2UnbGwgcmUtcmVzb2x2ZSBGV0QgdG8gY29uY3JldGUgU1RSVUNUL1VOSU9O
IGZyb20KICogICAgIGNhbm9uaWNhbCBncmFwaC4KICovCnN0YXRpYyBpbnQgYnRmX2RlZHVwX2lz
X2VxdWl2KHN0cnVjdCBidGZfZGVkdXAgKmQsIF9fdTMyIGNhbmRfaWQsCgkJCSAgICAgIF9fdTMy
IGNhbm9uX2lkKQp7CglzdHJ1Y3QgYnRmX3R5cGUgKmNhbmRfdHlwZTsKCXN0cnVjdCBidGZfdHlw
ZSAqY2Fub25fdHlwZTsKCV9fdTMyIGh5cG90X3R5cGVfaWQ7CglfX3UxNiBjYW5kX2tpbmQ7Cglf
X3UxNiBjYW5vbl9raW5kOwoJaW50IGksIGVxOwoKCS8qIGlmIGJvdGggcmVzb2x2ZSB0byB0aGUg
c2FtZSBjYW5vbmljYWwsIHRoZXkgbXVzdCBiZSBlcXVpdmFsZW50ICovCglpZiAocmVzb2x2ZV90
eXBlX2lkKGQsIGNhbmRfaWQpID09IHJlc29sdmVfdHlwZV9pZChkLCBjYW5vbl9pZCkpCgkJcmV0
dXJuIDE7CgoJY2Fub25faWQgPSByZXNvbHZlX2Z3ZF9pZChkLCBjYW5vbl9pZCk7CgoJaHlwb3Rf
dHlwZV9pZCA9IGQtPmh5cG90X21hcFtjYW5vbl9pZF07CglpZiAoaHlwb3RfdHlwZV9pZCA8PSBC
VEZfTUFYX05SX1RZUEVTKSB7CgkJaWYgKGh5cG90X3R5cGVfaWQgPT0gY2FuZF9pZCkKCQkJcmV0
dXJuIDE7CgkJLyogSW4gc29tZSBjYXNlcyBjb21waWxlciB3aWxsIGdlbmVyYXRlIGRpZmZlcmVu
dCBEV0FSRiB0eXBlcwoJCSAqIGZvciAqaWRlbnRpY2FsKiBhcnJheSB0eXBlIGRlZmluaXRpb25z
IGFuZCB1c2UgdGhlbSBmb3IKCQkgKiBkaWZmZXJlbnQgZmllbGRzIHdpdGhpbiB0aGUgKnNhbWUq
IHN0cnVjdC4gVGhpcyBicmVha3MgdHlwZQoJCSAqIGVxdWl2YWxlbmNlIGNoZWNrLCB3aGljaCBt
YWtlcyBhbiBhc3N1bXB0aW9uIHRoYXQgY2FuZGlkYXRlCgkJICogdHlwZXMgc3ViLWdyYXBoIGhh
cyBhIGNvbnNpc3RlbnQgYW5kIGRlZHVwZWQtYnktY29tcGlsZXIKCQkgKiB0eXBlcyB3aXRoaW4g
YSBzaW5nbGUgQ1UuIFNvIHdvcmsgYXJvdW5kIHRoYXQgYnkgZXhwbGljaXRseQoJCSAqIGFsbG93
aW5nIGlkZW50aWNhbCBhcnJheSB0eXBlcyBoZXJlLgoJCSAqLwoJCWlmIChidGZfZGVkdXBfaWRl
bnRpY2FsX2FycmF5cyhkLCBoeXBvdF90eXBlX2lkLCBjYW5kX2lkKSkKCQkJcmV0dXJuIDE7CgkJ
LyogSXQgdHVybnMgb3V0IHRoYXQgc2ltaWxhciBzaXR1YXRpb24gY2FuIGhhcHBlbiB3aXRoCgkJ
ICogc3RydWN0L3VuaW9uIHNvbWV0aW1lcywgc2lnaC4uLiBIYW5kbGUgdGhlIGNhc2Ugd2hlcmUK
CQkgKiBzdHJ1Y3RzL3VuaW9ucyBhcmUgZXhhY3RseSB0aGUgc2FtZSwgZG93biB0byB0aGUgcmVm
ZXJlbmNlZAoJCSAqIHR5cGUgSURzLiBBbnl0aGluZyBtb3JlIGNvbXBsaWNhdGVkIChlLmcuLCBp
ZiByZWZlcmVuY2VkCgkJICogdHlwZXMgYXJlIGRpZmZlcmVudCwgYnV0IGVxdWl2YWxlbnQpIGlz
ICp3YXkgbW9yZSoKCQkgKiBjb21wbGljYXRlZCBhbmQgcmVxdWlyZXMgYSBtYW55LXRvLW1hbnkg
ZXF1aXZhbGVuY2UgbWFwcGluZy4KCQkgKi8KCQlpZiAoYnRmX2RlZHVwX2lkZW50aWNhbF9zdHJ1
Y3RzKGQsIGh5cG90X3R5cGVfaWQsIGNhbmRfaWQpKQoJCQlyZXR1cm4gMTsKCQlyZXR1cm4gMDsK
CX0KCglpZiAoYnRmX2RlZHVwX2h5cG90X21hcF9hZGQoZCwgY2Fub25faWQsIGNhbmRfaWQpKQoJ
CXJldHVybiAtRU5PTUVNOwoKCWNhbmRfdHlwZSA9IGJ0Zl90eXBlX2J5X2lkKGQtPmJ0ZiwgY2Fu
ZF9pZCk7CgljYW5vbl90eXBlID0gYnRmX3R5cGVfYnlfaWQoZC0+YnRmLCBjYW5vbl9pZCk7Cglj
YW5kX2tpbmQgPSBidGZfa2luZChjYW5kX3R5cGUpOwoJY2Fub25fa2luZCA9IGJ0Zl9raW5kKGNh
bm9uX3R5cGUpOwoKCWlmIChjYW5kX3R5cGUtPm5hbWVfb2ZmICE9IGNhbm9uX3R5cGUtPm5hbWVf
b2ZmKQoJCXJldHVybiAwOwoKCS8qIEZXRCA8LS0+IFNUUlVDVC9VTklPTiBlcXVpdmFsZW5jZSBj
aGVjaywgaWYgZW5hYmxlZCAqLwoJaWYgKChjYW5kX2tpbmQgPT0gQlRGX0tJTkRfRldEIHx8IGNh
bm9uX2tpbmQgPT0gQlRGX0tJTkRfRldEKQoJICAgICYmIGNhbmRfa2luZCAhPSBjYW5vbl9raW5k
KSB7CgkJX191MTYgcmVhbF9raW5kOwoJCV9fdTE2IGZ3ZF9raW5kOwoKCQlpZiAoY2FuZF9raW5k
ID09IEJURl9LSU5EX0ZXRCkgewoJCQlyZWFsX2tpbmQgPSBjYW5vbl9raW5kOwoJCQlmd2Rfa2lu
ZCA9IGJ0Zl9md2Rfa2luZChjYW5kX3R5cGUpOwoJCX0gZWxzZSB7CgkJCXJlYWxfa2luZCA9IGNh
bmRfa2luZDsKCQkJZndkX2tpbmQgPSBidGZfZndkX2tpbmQoY2Fub25fdHlwZSk7CgkJCS8qIHdl
J2QgbmVlZCB0byByZXNvbHZlIGJhc2UgRldEIHRvIFNUUlVDVC9VTklPTiAqLwoJCQlpZiAoZndk
X2tpbmQgPT0gcmVhbF9raW5kICYmIGNhbm9uX2lkIDwgZC0+YnRmLT5zdGFydF9pZCkKCQkJCWQt
Pmh5cG90X2FkanVzdF9jYW5vbiA9IHRydWU7CgkJfQoJCXJldHVybiBmd2Rfa2luZCA9PSByZWFs
X2tpbmQ7Cgl9CgoJaWYgKGNhbmRfa2luZCAhPSBjYW5vbl9raW5kKQoJCXJldHVybiAwOwoKCXN3
aXRjaCAoY2FuZF9raW5kKSB7CgljYXNlIEJURl9LSU5EX0lOVDoKCQlyZXR1cm4gYnRmX2VxdWFs
X2ludF90YWcoY2FuZF90eXBlLCBjYW5vbl90eXBlKTsKCgljYXNlIEJURl9LSU5EX0VOVU06Cglj
YXNlIEJURl9LSU5EX0VOVU02NDoKCQlyZXR1cm4gYnRmX2NvbXBhdF9lbnVtKGNhbmRfdHlwZSwg
Y2Fub25fdHlwZSk7CgoJY2FzZSBCVEZfS0lORF9GV0Q6CgljYXNlIEJURl9LSU5EX0ZMT0FUOgoJ
CXJldHVybiBidGZfZXF1YWxfY29tbW9uKGNhbmRfdHlwZSwgY2Fub25fdHlwZSk7CgoJY2FzZSBC
VEZfS0lORF9DT05TVDoKCWNhc2UgQlRGX0tJTkRfVk9MQVRJTEU6CgljYXNlIEJURl9LSU5EX1JF
U1RSSUNUOgoJY2FzZSBCVEZfS0lORF9QVFI6CgljYXNlIEJURl9LSU5EX1RZUEVERUY6CgljYXNl
IEJURl9LSU5EX0ZVTkM6CgljYXNlIEJURl9LSU5EX1RZUEVfVEFHOgoJCWlmIChjYW5kX3R5cGUt
PmluZm8gIT0gY2Fub25fdHlwZS0+aW5mbykKCQkJcmV0dXJuIDA7CgkJcmV0dXJuIGJ0Zl9kZWR1
cF9pc19lcXVpdihkLCBjYW5kX3R5cGUtPnR5cGUsIGNhbm9uX3R5cGUtPnR5cGUpOwoKCWNhc2Ug
QlRGX0tJTkRfQVJSQVk6IHsKCQljb25zdCBzdHJ1Y3QgYnRmX2FycmF5ICpjYW5kX2FyciwgKmNh
bm9uX2FycjsKCgkJaWYgKCFidGZfY29tcGF0X2FycmF5KGNhbmRfdHlwZSwgY2Fub25fdHlwZSkp
CgkJCXJldHVybiAwOwoJCWNhbmRfYXJyID0gYnRmX2FycmF5KGNhbmRfdHlwZSk7CgkJY2Fub25f
YXJyID0gYnRmX2FycmF5KGNhbm9uX3R5cGUpOwoJCWVxID0gYnRmX2RlZHVwX2lzX2VxdWl2KGQs
IGNhbmRfYXJyLT5pbmRleF90eXBlLCBjYW5vbl9hcnItPmluZGV4X3R5cGUpOwoJCWlmIChlcSA8
PSAwKQoJCQlyZXR1cm4gZXE7CgkJcmV0dXJuIGJ0Zl9kZWR1cF9pc19lcXVpdihkLCBjYW5kX2Fy
ci0+dHlwZSwgY2Fub25fYXJyLT50eXBlKTsKCX0KCgljYXNlIEJURl9LSU5EX1NUUlVDVDoKCWNh
c2UgQlRGX0tJTkRfVU5JT046IHsKCQljb25zdCBzdHJ1Y3QgYnRmX21lbWJlciAqY2FuZF9tLCAq
Y2Fub25fbTsKCQlfX3UxNiB2bGVuOwoKCQlpZiAoIWJ0Zl9zaGFsbG93X2VxdWFsX3N0cnVjdChj
YW5kX3R5cGUsIGNhbm9uX3R5cGUpKQoJCQlyZXR1cm4gMDsKCQl2bGVuID0gYnRmX3ZsZW4oY2Fu
ZF90eXBlKTsKCQljYW5kX20gPSBidGZfbWVtYmVycyhjYW5kX3R5cGUpOwoJCWNhbm9uX20gPSBi
dGZfbWVtYmVycyhjYW5vbl90eXBlKTsKCQlmb3IgKGkgPSAwOyBpIDwgdmxlbjsgaSsrKSB7CgkJ
CWVxID0gYnRmX2RlZHVwX2lzX2VxdWl2KGQsIGNhbmRfbS0+dHlwZSwgY2Fub25fbS0+dHlwZSk7
CgkJCWlmIChlcSA8PSAwKQoJCQkJcmV0dXJuIGVxOwoJCQljYW5kX20rKzsKCQkJY2Fub25fbSsr
OwoJCX0KCgkJcmV0dXJuIDE7Cgl9CgoJY2FzZSBCVEZfS0lORF9GVU5DX1BST1RPOiB7CgkJY29u
c3Qgc3RydWN0IGJ0Zl9wYXJhbSAqY2FuZF9wLCAqY2Fub25fcDsKCQlfX3UxNiB2bGVuOwoKCQlp
ZiAoIWJ0Zl9jb21wYXRfZm5wcm90byhjYW5kX3R5cGUsIGNhbm9uX3R5cGUpKQoJCQlyZXR1cm4g
MDsKCQllcSA9IGJ0Zl9kZWR1cF9pc19lcXVpdihkLCBjYW5kX3R5cGUtPnR5cGUsIGNhbm9uX3R5
cGUtPnR5cGUpOwoJCWlmIChlcSA8PSAwKQoJCQlyZXR1cm4gZXE7CgkJdmxlbiA9IGJ0Zl92bGVu
KGNhbmRfdHlwZSk7CgkJY2FuZF9wID0gYnRmX3BhcmFtcyhjYW5kX3R5cGUpOwoJCWNhbm9uX3Ag
PSBidGZfcGFyYW1zKGNhbm9uX3R5cGUpOwoJCWZvciAoaSA9IDA7IGkgPCB2bGVuOyBpKyspIHsK
CQkJZXEgPSBidGZfZGVkdXBfaXNfZXF1aXYoZCwgY2FuZF9wLT50eXBlLCBjYW5vbl9wLT50eXBl
KTsKCQkJaWYgKGVxIDw9IDApCgkJCQlyZXR1cm4gZXE7CgkJCWNhbmRfcCsrOwoJCQljYW5vbl9w
Kys7CgkJfQoJCXJldHVybiAxOwoJfQoKCWRlZmF1bHQ6CgkJcmV0dXJuIC1FSU5WQUw7Cgl9Cgly
ZXR1cm4gMDsKfQoKLyoKICogVXNlIGh5cG90aGV0aWNhbCBtYXBwaW5nLCBwcm9kdWNlZCBieSBz
dWNjZXNzZnVsIHR5cGUgZ3JhcGggZXF1aXZhbGVuY2UKICogY2hlY2ssIHRvIGF1Z21lbnQgZXhp
c3Rpbmcgc3RydWN0L3VuaW9uIGNhbm9uaWNhbCBtYXBwaW5nLCB3aGVyZSBwb3NzaWJsZS4KICoK
ICogSWYgQlRGX0tJTkRfRldEIHJlc29sdXRpb24gaXMgYWxsb3dlZCwgdGhpcyBtYXBwaW5nIGlz
IGFsc28gdXNlZCB0byByZWNvcmQKICogRldEIC0+IFNUUlVDVC9VTklPTiBjb3JyZXNwb25kZW5j
ZSBhcyB3ZWxsLiBGV0QgcmVzb2x1dGlvbiBpcyBiaWRpcmVjdGlvbmFsOgogKiBpdCBkb2Vzbid0
IG1hdHRlciBpZiBGV0QgdHlwZSB3YXMgcGFydCBvZiBjYW5vbmljYWwgZ3JhcGggb3IgY2FuZGlk
YXRlIG9uZSwKICogd2UgYXJlIHJlY29yZGluZyB0aGUgbWFwcGluZyBhbnl3YXkuIEFzIG9wcG9z
ZWQgdG8gY2FyZWZ1bG5lc3MgcmVxdWlyZWQKICogZm9yIHN0cnVjdC91bmlvbiBjb3JyZXNwb25k
ZW5jZSBtYXBwaW5nIChkZXNjcmliZWQgYmVsb3cpLCBmb3IgRldEIHJlc29sdXRpb24KICogaXQn
cyBub3QgaW1wb3J0YW50LCBhcyBieSB0aGUgdGltZSB0aGF0IEZXRCB0eXBlIChyZWZlcmVuY2Ug
dHlwZSkgd2lsbCBiZQogKiBkZWR1cGxpY2F0ZWQgYWxsIHN0cnVjdHMvdW5pb25zIHdpbGwgYmUg
ZGVkdXBlZCBhbHJlYWR5IGFueXdheS4KICoKICogUmVjb3JkaW5nIFNUUlVDVC9VTklPTiBtYXBw
aW5nIGlzIHB1cmVseSBhIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbiBhbmQgaXMKICogbm90IHJl
cXVpcmVkIGZvciBjb3JyZWN0bmVzcy4gSXQgbmVlZHMgdG8gYmUgZG9uZSBjYXJlZnVsbHkgdG8g
ZW5zdXJlIHRoYXQKICogc3RydWN0L3VuaW9uIGZyb20gY2FuZGlkYXRlJ3MgdHlwZSBncmFwaCBp
cyBub3QgbWFwcGVkIGludG8gY29ycmVzcG9uZGluZwogKiBzdHJ1Y3QvdW5pb24gZnJvbSBjYW5v
bmljYWwgdHlwZSBncmFwaCB0aGF0IGl0c2VsZiBoYXNuJ3QgYmVlbiByZXNvbHZlZCBpbnRvCiAq
IGNhbm9uaWNhbCByZXByZXNlbnRhdGl2ZS4gVGhlIG9ubHkgZ3VhcmFudGVlIHdlIGhhdmUgaXMg
dGhhdCBjYW5vbmljYWwKICogc3RydWN0L3VuaW9uIHdhcyBkZXRlcm1pbmVkIGFzIGNhbm9uaWNh
bCBhbmQgdGhhdCB3b24ndCBjaGFuZ2UuIEJ1dCBhbnkKICogdHlwZXMgcmVmZXJlbmNlZCB0aHJv
dWdoIHRoYXQgc3RydWN0L3VuaW9uIGZpZWxkcyBjb3VsZCBoYXZlIGJlZW4gbm90IHlldAogKiBy
ZXNvbHZlZCwgc28gaW4gY2FzZSBsaWtlIHRoYXQgaXQncyB0b28gZWFybHkgdG8gZXN0YWJsaXNo
IGFueSBraW5kIG9mCiAqIGNvcnJlc3BvbmRlbmNlIGJldHdlZW4gc3RydWN0cy91bmlvbnMuCiAq
CiAqIE5vIGNhbm9uaWNhbCBjb3JyZXNwb25kZW5jZSBpcyBkZXJpdmVkIGZvciBwcmltaXRpdmUg
dHlwZXMgKHRoZXkgYXJlIGFscmVhZHkKICogZGVkdXBsaWNhdGVkIGNvbXBsZXRlbHkgYWxyZWFk
eSBhbnl3YXkpIG9yIHJlZmVyZW5jZSB0eXBlcyAodGhleSByZWx5IG9uCiAqIHN0YWJpbGl0eSBv
ZiBzdHJ1Y3QvdW5pb24gY2Fub25pY2FsIHJlbGF0aW9uc2hpcCBmb3IgZXF1aXZhbGVuY2UgY2hl
Y2tzKS4KICovCnN0YXRpYyB2b2lkIGJ0Zl9kZWR1cF9tZXJnZV9oeXBvdF9tYXAoc3RydWN0IGJ0
Zl9kZWR1cCAqZCkKewoJX191MzIgY2Fub25fdHlwZV9pZCwgdGFyZ190eXBlX2lkOwoJX191MTYg
dF9raW5kLCBjX2tpbmQ7CglfX3UzMiB0X2lkLCBjX2lkOwoJaW50IGk7CgoJZm9yIChpID0gMDsg
aSA8IGQtPmh5cG90X2NudDsgaSsrKSB7CgkJY2Fub25fdHlwZV9pZCA9IGQtPmh5cG90X2xpc3Rb
aV07CgkJdGFyZ190eXBlX2lkID0gZC0+aHlwb3RfbWFwW2Nhbm9uX3R5cGVfaWRdOwoJCXRfaWQg
PSByZXNvbHZlX3R5cGVfaWQoZCwgdGFyZ190eXBlX2lkKTsKCQljX2lkID0gcmVzb2x2ZV90eXBl
X2lkKGQsIGNhbm9uX3R5cGVfaWQpOwoJCXRfa2luZCA9IGJ0Zl9raW5kKGJ0Zl9fdHlwZV9ieV9p
ZChkLT5idGYsIHRfaWQpKTsKCQljX2tpbmQgPSBidGZfa2luZChidGZfX3R5cGVfYnlfaWQoZC0+
YnRmLCBjX2lkKSk7CgkJLyoKCQkgKiBSZXNvbHZlIEZXRCBpbnRvIFNUUlVDVC9VTklPTi4KCQkg
KiBJdCdzIG9rIHRvIHJlc29sdmUgRldEIGludG8gU1RSVUNUL1VOSU9OIHRoYXQncyBub3QgeWV0
CgkJICogbWFwcGVkIHRvIGNhbm9uaWNhbCByZXByZXNlbnRhdGl2ZSAoYXMgb3Bwb3NlZCB0bwoJ
CSAqIFNUUlVDVC9VTklPTiA8LS0+IFNUUlVDVC9VTklPTiBtYXBwaW5nIGxvZ2ljIGJlbG93KSwg
YmVjYXVzZQoJCSAqIGV2ZW50dWFsbHkgdGhhdCBzdHJ1Y3QgaXMgZ29pbmcgdG8gYmUgbWFwcGVk
IGFuZCBhbGwgcmVzb2x2ZWQKCQkgKiBGV0RzIHdpbGwgYXV0b21hdGljYWxseSByZXNvbHZlIHRv
IGNvcnJlY3QgY2Fub25pY2FsCgkJICogcmVwcmVzZW50YXRpdmUuIFRoaXMgd2lsbCBoYXBwZW4g
YmVmb3JlIHJlZiB0eXBlIGRlZHVwaW5nLAoJCSAqIHdoaWNoIGNyaXRpY2FsbHkgZGVwZW5kcyBv
biBzdGFiaWxpdHkgb2YgdGhlc2UgbWFwcGluZy4gVGhpcwoJCSAqIHN0YWJpbGl0eSBpcyBub3Qg
YSByZXF1aXJlbWVudCBmb3IgU1RSVUNUL1VOSU9OIGVxdWl2YWxlbmNlCgkJICogY2hlY2tzLCB0
aG91Z2guCgkJICovCgoJCS8qIGlmIGl0J3MgdGhlIHNwbGl0IEJURiBjYXNlLCB3ZSBzdGlsbCBu
ZWVkIHRvIHBvaW50IGJhc2UgRldECgkJICogdG8gU1RSVUNUL1VOSU9OIGluIGEgc3BsaXQgQlRG
LCBiZWNhdXNlIEZXRHMgZnJvbSBzcGxpdCBCVEYKCQkgKiB3aWxsIGJlIHJlc29sdmVkIGFnYWlu
c3QgYmFzZSBGV0QuIElmIHdlIGRvbid0IHBvaW50IGJhc2UKCQkgKiBjYW5vbmljYWwgRldEIHRv
IHRoZSByZXNvbHZlZCBTVFJVQ1QvVU5JT04sIHRoZW4gYWxsIHRoZQoJCSAqIEZXRHMgaW4gc3Bs
aXQgQlRGIHdvbid0IGJlIGNvcnJlY3RseSByZXNvbHZlZCB0byBhIHByb3BlcgoJCSAqIFNUUlVD
VC9VTklPTi4KCQkgKi8KCQlpZiAodF9raW5kICE9IEJURl9LSU5EX0ZXRCAmJiBjX2tpbmQgPT0g
QlRGX0tJTkRfRldEKQoJCQlkLT5tYXBbY19pZF0gPSB0X2lkOwoKCQkvKiBpZiBncmFwaCBlcXVp
dmFsZW5jZSBkZXRlcm1pbmVkIHRoYXQgd2UnZCBuZWVkIHRvIGFkanVzdAoJCSAqIGJhc2UgY2Fu
b25pY2FsIHR5cGVzLCB0aGVuIHdlIG5lZWQgdG8gb25seSBwb2ludCBiYXNlIEZXRHMKCQkgKiB0
byBTVFJVQ1RzL1VOSU9OcyBhbmQgZG8gbm8gbW9yZSBtb2RpZmljYXRpb25zLiBGb3IgYWxsCgkJ
ICogb3RoZXIgcHVycG9zZXMgdGhlIHR5cGUgZ3JhcGhzIHdlcmUgbm90IGVxdWl2YWxlbnQuCgkJ
ICovCgkJaWYgKGQtPmh5cG90X2FkanVzdF9jYW5vbikKCQkJY29udGludWU7CgoJCWlmICh0X2tp
bmQgPT0gQlRGX0tJTkRfRldEICYmIGNfa2luZCAhPSBCVEZfS0lORF9GV0QpCgkJCWQtPm1hcFt0
X2lkXSA9IGNfaWQ7CgoJCWlmICgodF9raW5kID09IEJURl9LSU5EX1NUUlVDVCB8fCB0X2tpbmQg
PT0gQlRGX0tJTkRfVU5JT04pICYmCgkJICAgIGNfa2luZCAhPSBCVEZfS0lORF9GV0QgJiYKCQkg
ICAgaXNfdHlwZV9tYXBwZWQoZCwgY19pZCkgJiYKCQkgICAgIWlzX3R5cGVfbWFwcGVkKGQsIHRf
aWQpKSB7CgkJCS8qCgkJCSAqIGFzIGEgcGVyZiBvcHRpbWl6YXRpb24sIHdlIGNhbiBtYXAgc3Ry
dWN0L3VuaW9uCgkJCSAqIHRoYXQncyBwYXJ0IG9mIHR5cGUgZ3JhcGggd2UganVzdCB2ZXJpZmll
ZCBmb3IKCQkJICogZXF1aXZhbGVuY2UuIFdlIGNhbiBkbyB0aGF0IGZvciBzdHJ1Y3QvdW5pb24g
dGhhdCBoYXMKCQkJICogY2Fub25pY2FsIHJlcHJlc2VudGF0aXZlIG9ubHksIHRob3VnaC4KCQkJ
ICovCgkJCWQtPm1hcFt0X2lkXSA9IGNfaWQ7CgkJfQoJfQp9CgovKgogKiBEZWR1cGxpY2F0ZSBz
dHJ1Y3QvdW5pb24gdHlwZXMuCiAqCiAqIEZvciBlYWNoIHN0cnVjdC91bmlvbiB0eXBlIGl0cyB0
eXBlIHNpZ25hdHVyZSBoYXNoIGlzIGNhbGN1bGF0ZWQsIHRha2luZwogKiBpbnRvIGFjY291bnQg
dHlwZSdzIG5hbWUsIHNpemUsIG51bWJlciwgb3JkZXIgYW5kIG5hbWVzIG9mIGZpZWxkcywgYnV0
CiAqIGlnbm9yaW5nIHR5cGUgSUQncyByZWZlcmVuY2VkIGZyb20gZmllbGRzLCBiZWNhdXNlIHRo
ZXkgbWlnaHQgbm90IGJlIGRlZHVwZWQKICogY29tcGxldGVseSB1bnRpbCBhZnRlciByZWZlcmVu
Y2UgdHlwZXMgZGVkdXBsaWNhdGlvbiBwaGFzZS4gVGhpcyB0eXBlIGhhc2gKICogaXMgdXNlZCB0
byBpdGVyYXRlIG92ZXIgYWxsIHBvdGVudGlhbCBjYW5vbmljYWwgdHlwZXMsIHNoYXJpbmcgc2Ft
ZSBoYXNoLgogKiBGb3IgZWFjaCBjYW5vbmljYWwgY2FuZGlkYXRlIHdlIGNoZWNrIHdoZXRoZXIg
dHlwZSBncmFwaHMgdGhhdCB0aGV5IGZvcm0KICogKHRocm91Z2ggcmVmZXJlbmNlZCB0eXBlcyBp
biBmaWVsZHMgYW5kIHNvIG9uKSBhcmUgZXF1aXZhbGVudCB1c2luZyBhbGdvcml0aG0KICogaW1w
bGVtZW50ZWQgaW4gYGJ0Zl9kZWR1cF9pc19lcXVpdmAuIElmIHN1Y2ggZXF1aXZhbGVuY2UgaXMg
Zm91bmQgYW5kCiAqIEJURl9LSU5EX0ZXRCByZXNvbHV0aW9uIGlzIGFsbG93ZWQsIHRoZW4gaHlw
b3RoZXRpY2FsIG1hcHBpbmcKICogKGJ0Zl9kZWR1cC0+aHlwb3RfbWFwKSBwcm9kdWNlZCBieSBh
Zm9yZW1lbnRpb25lZCB0eXBlIGdyYXBoIGVxdWl2YWxlbmNlCiAqIGFsZ29yaXRobSBpcyB1c2Vk
IHRvIHJlY29yZCBGV0QgLT4gU1RSVUNUL1VOSU9OIG1hcHBpbmcuIEl0J3MgYWxzbyB1c2VkIHRv
CiAqIHBvdGVudGlhbGx5IG1hcCBvdGhlciBzdHJ1Y3RzL3VuaW9ucyB0byB0aGVpciBjYW5vbmlj
YWwgcmVwcmVzZW50YXRpdmVzLAogKiBpZiBzdWNoIHJlbGF0aW9uc2hpcCBoYXNuJ3QgeWV0IGJl
ZW4gZXN0YWJsaXNoZWQuIFRoaXMgc3BlZWRzIHVwIGFsZ29yaXRobQogKiBieSBlbGltaW5hdGlu
ZyBzb21lIG9mIHRoZSBkdXBsaWNhdGUgd29yay4KICoKICogSWYgbm8gbWF0Y2hpbmcgY2Fub25p
Y2FsIHJlcHJlc2VudGF0aXZlIHdhcyBmb3VuZCwgc3RydWN0L3VuaW9uIGlzIG1hcmtlZAogKiBh
cyBjYW5vbmljYWwgZm9yIGl0c2VsZiBhbmQgaXMgYWRkZWQgaW50byBidGZfZGVkdXAtPmRlZHVw
X3RhYmxlIGhhc2ggbWFwCiAqIGZvciBmdXJ0aGVyIGxvb2sgdXBzLgogKi8Kc3RhdGljIGludCBi
dGZfZGVkdXBfc3RydWN0X3R5cGUoc3RydWN0IGJ0Zl9kZWR1cCAqZCwgX191MzIgdHlwZV9pZCkK
ewoJc3RydWN0IGJ0Zl90eXBlICpjYW5kX3R5cGUsICp0OwoJc3RydWN0IGhhc2htYXBfZW50cnkg
Kmhhc2hfZW50cnk7CgkvKiBpZiB3ZSBkb24ndCBmaW5kIGVxdWl2YWxlbnQgdHlwZSwgdGhlbiB3
ZSBhcmUgY2Fub25pY2FsICovCglfX3UzMiBuZXdfaWQgPSB0eXBlX2lkOwoJX191MTYga2luZDsK
CWxvbmcgaDsKCgkvKiBhbHJlYWR5IGRlZHVwZWQgb3IgaXMgaW4gcHJvY2VzcyBvZiBkZWR1cGlu
ZyAobG9vcCBkZXRlY3RlZCkgKi8KCWlmIChkLT5tYXBbdHlwZV9pZF0gPD0gQlRGX01BWF9OUl9U
WVBFUykKCQlyZXR1cm4gMDsKCgl0ID0gYnRmX3R5cGVfYnlfaWQoZC0+YnRmLCB0eXBlX2lkKTsK
CWtpbmQgPSBidGZfa2luZCh0KTsKCglpZiAoa2luZCAhPSBCVEZfS0lORF9TVFJVQ1QgJiYga2lu
ZCAhPSBCVEZfS0lORF9VTklPTikKCQlyZXR1cm4gMDsKCgloID0gYnRmX2hhc2hfc3RydWN0KHQp
OwoJZm9yX2VhY2hfZGVkdXBfY2FuZChkLCBoYXNoX2VudHJ5LCBoKSB7CgkJX191MzIgY2FuZF9p
ZCA9IGhhc2hfZW50cnktPnZhbHVlOwoJCWludCBlcTsKCgkJLyoKCQkgKiBFdmVuIHRob3VnaCBi
dGZfZGVkdXBfaXNfZXF1aXYoKSBjaGVja3MgZm9yCgkJICogYnRmX3NoYWxsb3dfZXF1YWxfc3Ry
dWN0KCkgaW50ZXJuYWxseSB3aGVuIGNoZWNraW5nIHR3bwoJCSAqIHN0cnVjdHMgKHVuaW9ucykg
Zm9yIGVxdWl2YWxlbmNlLCB3ZSBuZWVkIHRvIGd1YXJkIGhlcmUKCQkgKiBmcm9tIHBpY2tpbmcg
bWF0Y2hpbmcgRldEIHR5cGUgYXMgYSBkZWR1cCBjYW5kaWRhdGUuCgkJICogVGhpcyBjYW4gaGFw
cGVuIGR1ZSB0byBoYXNoIGNvbGxpc2lvbi4gSW4gc3VjaCBjYXNlIGp1c3QKCQkgKiByZWx5aW5n
IG9uIGJ0Zl9kZWR1cF9pc19lcXVpdigpIHdvdWxkIGxlYWQgdG8gcG90ZW50aWFsbHkKCQkgKiBj
cmVhdGluZyBhIGxvb3AgKEZXRCAtPiBTVFJVQ1QgYW5kIFNUUlVDVCAtPiBGV0QpLCBiZWNhdXNl
CgkJICogRldEIGFuZCBjb21wYXRpYmxlIFNUUlVDVC9VTklPTiBhcmUgY29uc2lkZXJlZCBlcXVp
dmFsZW50LgoJCSAqLwoJCWNhbmRfdHlwZSA9IGJ0Zl90eXBlX2J5X2lkKGQtPmJ0ZiwgY2FuZF9p
ZCk7CgkJaWYgKCFidGZfc2hhbGxvd19lcXVhbF9zdHJ1Y3QodCwgY2FuZF90eXBlKSkKCQkJY29u
dGludWU7CgoJCWJ0Zl9kZWR1cF9jbGVhcl9oeXBvdF9tYXAoZCk7CgkJZXEgPSBidGZfZGVkdXBf
aXNfZXF1aXYoZCwgdHlwZV9pZCwgY2FuZF9pZCk7CgkJaWYgKGVxIDwgMCkKCQkJcmV0dXJuIGVx
OwoJCWlmICghZXEpCgkJCWNvbnRpbnVlOwoJCWJ0Zl9kZWR1cF9tZXJnZV9oeXBvdF9tYXAoZCk7
CgkJaWYgKGQtPmh5cG90X2FkanVzdF9jYW5vbikgLyogbm90IHJlYWxseSBlcXVpdmFsZW50ICov
CgkJCWNvbnRpbnVlOwoJCW5ld19pZCA9IGNhbmRfaWQ7CgkJYnJlYWs7Cgl9CgoJZC0+bWFwW3R5
cGVfaWRdID0gbmV3X2lkOwoJaWYgKHR5cGVfaWQgPT0gbmV3X2lkICYmIGJ0Zl9kZWR1cF90YWJs
ZV9hZGQoZCwgaCwgdHlwZV9pZCkpCgkJcmV0dXJuIC1FTk9NRU07CgoJcmV0dXJuIDA7Cn0KCnN0
YXRpYyBpbnQgYnRmX2RlZHVwX3N0cnVjdF90eXBlcyhzdHJ1Y3QgYnRmX2RlZHVwICpkKQp7Cglp
bnQgaSwgZXJyOwoKCWZvciAoaSA9IDA7IGkgPCBkLT5idGYtPm5yX3R5cGVzOyBpKyspIHsKCQll
cnIgPSBidGZfZGVkdXBfc3RydWN0X3R5cGUoZCwgZC0+YnRmLT5zdGFydF9pZCArIGkpOwoJCWlm
IChlcnIpCgkJCXJldHVybiBlcnI7Cgl9CglyZXR1cm4gMDsKfQoKLyoKICogRGVkdXBsaWNhdGUg
cmVmZXJlbmNlIHR5cGUuCiAqCiAqIE9uY2UgYWxsIHByaW1pdGl2ZSBhbmQgc3RydWN0L3VuaW9u
IHR5cGVzIGdvdCBkZWR1cGxpY2F0ZWQsIHdlIGNhbiBlYXNpbHkKICogZGVkdXBsaWNhdGUgYWxs
IG90aGVyIChyZWZlcmVuY2UpIEJURiB0eXBlcy4gVGhpcyBpcyBkb25lIGluIHR3byBzdGVwczoK
ICoKICogMS4gUmVzb2x2ZSBhbGwgcmVmZXJlbmNlZCB0eXBlIElEcyBpbnRvIHRoZWlyIGNhbm9u
aWNhbCB0eXBlIElEcy4gVGhpcwogKiByZXNvbHV0aW9uIGNhbiBiZSBkb25lIGVpdGhlciBpbW1l
ZGlhdGVseSBmb3IgcHJpbWl0aXZlIG9yIHN0cnVjdC91bmlvbiB0eXBlcwogKiAoYmVjYXVzZSB0
aGV5IHdlcmUgZGVkdXBlZCBpbiBwcmV2aW91cyB0d28gcGhhc2VzKSBvciByZWN1cnNpdmVseSBm
b3IKICogcmVmZXJlbmNlIHR5cGVzLiBSZWN1cnNpb24gd2lsbCBhbHdheXMgdGVybWluYXRlIGF0
IGVpdGhlciBwcmltaXRpdmUgb3IKICogc3RydWN0L3VuaW9uIHR5cGUsIGF0IHdoaWNoIHBvaW50
IHdlIGNhbiAidW53aW5kIiBjaGFpbiBvZiByZWZlcmVuY2UgdHlwZXMKICogb25lIGJ5IG9uZS4g
VGhlcmUgaXMgbm8gZGFuZ2VyIG9mIGVuY291bnRlcmluZyBjeWNsZXMgYmVjYXVzZSBpbiBDIHR5
cGUKICogc3lzdGVtIHRoZSBvbmx5IHdheSB0byBmb3JtIHR5cGUgY3ljbGUgaXMgdGhyb3VnaCBz
dHJ1Y3QvdW5pb24sIHNvIGFueSBjaGFpbgogKiBvZiByZWZlcmVuY2UgdHlwZXMsIGV2ZW4gdGhv
c2UgdGFraW5nIHBhcnQgaW4gYSB0eXBlIGN5Y2xlLCB3aWxsIGluZXZpdGFibHkKICogcmVhY2gg
c3RydWN0L3VuaW9uIGF0IHNvbWUgcG9pbnQuCiAqCiAqIDIuIE9uY2UgYWxsIHJlZmVyZW5jZWQg
dHlwZSBJRHMgYXJlIHJlc29sdmVkIGludG8gY2Fub25pY2FsIG9uZXMsIEJURiB0eXBlCiAqIGJl
Y29tZXMgInN0YWJsZSIsIGluIHRoZSBzZW5zZSB0aGF0IG5vIGZ1cnRoZXIgZGVkdXBsaWNhdGlv
biB3aWxsIGNhdXNlCiAqIGFueSBjaGFuZ2VzIHRvIGl0LiBXaXRoIHRoYXQsIGl0J3Mgbm93IHBv
c3NpYmxlIHRvIGNhbGN1bGF0ZSB0eXBlJ3Mgc2lnbmF0dXJlCiAqIGhhc2ggKHRoaXMgdGltZSB0
YWtpbmcgaW50byBhY2NvdW50IHJlZmVyZW5jZWQgdHlwZSBJRHMpIGFuZCBsb29wIG92ZXIgYWxs
CiAqIHBvdGVudGlhbCBjYW5vbmljYWwgcmVwcmVzZW50YXRpdmVzLiBJZiBubyBtYXRjaCB3YXMg
Zm91bmQsIGN1cnJlbnQgdHlwZQogKiB3aWxsIGJlY29tZSBjYW5vbmljYWwgcmVwcmVzZW50YXRp
dmUgb2YgaXRzZWxmIGFuZCB3aWxsIGJlIGFkZGVkIGludG8KICogYnRmX2RlZHVwLT5kZWR1cF90
YWJsZSBhcyBhbm90aGVyIHBvc3NpYmxlIGNhbm9uaWNhbCByZXByZXNlbnRhdGl2ZS4KICovCnN0
YXRpYyBpbnQgYnRmX2RlZHVwX3JlZl90eXBlKHN0cnVjdCBidGZfZGVkdXAgKmQsIF9fdTMyIHR5
cGVfaWQpCnsKCXN0cnVjdCBoYXNobWFwX2VudHJ5ICpoYXNoX2VudHJ5OwoJX191MzIgbmV3X2lk
ID0gdHlwZV9pZCwgY2FuZF9pZDsKCXN0cnVjdCBidGZfdHlwZSAqdCwgKmNhbmQ7CgkvKiBpZiB3
ZSBkb24ndCBmaW5kIGVxdWl2YWxlbnQgdHlwZSwgdGhlbiB3ZSBhcmUgcmVwcmVzZW50YXRpdmUg
dHlwZSAqLwoJaW50IHJlZl90eXBlX2lkOwoJbG9uZyBoOwoKCWlmIChkLT5tYXBbdHlwZV9pZF0g
PT0gQlRGX0lOX1BST0dSRVNTX0lEKQoJCXJldHVybiAtRUxPT1A7CglpZiAoZC0+bWFwW3R5cGVf
aWRdIDw9IEJURl9NQVhfTlJfVFlQRVMpCgkJcmV0dXJuIHJlc29sdmVfdHlwZV9pZChkLCB0eXBl
X2lkKTsKCgl0ID0gYnRmX3R5cGVfYnlfaWQoZC0+YnRmLCB0eXBlX2lkKTsKCWQtPm1hcFt0eXBl
X2lkXSA9IEJURl9JTl9QUk9HUkVTU19JRDsKCglzd2l0Y2ggKGJ0Zl9raW5kKHQpKSB7CgljYXNl
IEJURl9LSU5EX0NPTlNUOgoJY2FzZSBCVEZfS0lORF9WT0xBVElMRToKCWNhc2UgQlRGX0tJTkRf
UkVTVFJJQ1Q6CgljYXNlIEJURl9LSU5EX1BUUjoKCWNhc2UgQlRGX0tJTkRfVFlQRURFRjoKCWNh
c2UgQlRGX0tJTkRfRlVOQzoKCWNhc2UgQlRGX0tJTkRfVFlQRV9UQUc6CgkJcmVmX3R5cGVfaWQg
PSBidGZfZGVkdXBfcmVmX3R5cGUoZCwgdC0+dHlwZSk7CgkJaWYgKHJlZl90eXBlX2lkIDwgMCkK
CQkJcmV0dXJuIHJlZl90eXBlX2lkOwoJCXQtPnR5cGUgPSByZWZfdHlwZV9pZDsKCgkJaCA9IGJ0
Zl9oYXNoX2NvbW1vbih0KTsKCQlmb3JfZWFjaF9kZWR1cF9jYW5kKGQsIGhhc2hfZW50cnksIGgp
IHsKCQkJY2FuZF9pZCA9IGhhc2hfZW50cnktPnZhbHVlOwoJCQljYW5kID0gYnRmX3R5cGVfYnlf
aWQoZC0+YnRmLCBjYW5kX2lkKTsKCQkJaWYgKGJ0Zl9lcXVhbF9jb21tb24odCwgY2FuZCkpIHsK
CQkJCW5ld19pZCA9IGNhbmRfaWQ7CgkJCQlicmVhazsKCQkJfQoJCX0KCQlicmVhazsKCgljYXNl
IEJURl9LSU5EX0RFQ0xfVEFHOgoJCXJlZl90eXBlX2lkID0gYnRmX2RlZHVwX3JlZl90eXBlKGQs
IHQtPnR5cGUpOwoJCWlmIChyZWZfdHlwZV9pZCA8IDApCgkJCXJldHVybiByZWZfdHlwZV9pZDsK
CQl0LT50eXBlID0gcmVmX3R5cGVfaWQ7CgoJCWggPSBidGZfaGFzaF9pbnRfZGVjbF90YWcodCk7
CgkJZm9yX2VhY2hfZGVkdXBfY2FuZChkLCBoYXNoX2VudHJ5LCBoKSB7CgkJCWNhbmRfaWQgPSBo
YXNoX2VudHJ5LT52YWx1ZTsKCQkJY2FuZCA9IGJ0Zl90eXBlX2J5X2lkKGQtPmJ0ZiwgY2FuZF9p
ZCk7CgkJCWlmIChidGZfZXF1YWxfaW50X3RhZyh0LCBjYW5kKSkgewoJCQkJbmV3X2lkID0gY2Fu
ZF9pZDsKCQkJCWJyZWFrOwoJCQl9CgkJfQoJCWJyZWFrOwoKCWNhc2UgQlRGX0tJTkRfQVJSQVk6
IHsKCQlzdHJ1Y3QgYnRmX2FycmF5ICppbmZvID0gYnRmX2FycmF5KHQpOwoKCQlyZWZfdHlwZV9p
ZCA9IGJ0Zl9kZWR1cF9yZWZfdHlwZShkLCBpbmZvLT50eXBlKTsKCQlpZiAocmVmX3R5cGVfaWQg
PCAwKQoJCQlyZXR1cm4gcmVmX3R5cGVfaWQ7CgkJaW5mby0+dHlwZSA9IHJlZl90eXBlX2lkOwoK
CQlyZWZfdHlwZV9pZCA9IGJ0Zl9kZWR1cF9yZWZfdHlwZShkLCBpbmZvLT5pbmRleF90eXBlKTsK
CQlpZiAocmVmX3R5cGVfaWQgPCAwKQoJCQlyZXR1cm4gcmVmX3R5cGVfaWQ7CgkJaW5mby0+aW5k
ZXhfdHlwZSA9IHJlZl90eXBlX2lkOwoKCQloID0gYnRmX2hhc2hfYXJyYXkodCk7CgkJZm9yX2Vh
Y2hfZGVkdXBfY2FuZChkLCBoYXNoX2VudHJ5LCBoKSB7CgkJCWNhbmRfaWQgPSBoYXNoX2VudHJ5
LT52YWx1ZTsKCQkJY2FuZCA9IGJ0Zl90eXBlX2J5X2lkKGQtPmJ0ZiwgY2FuZF9pZCk7CgkJCWlm
IChidGZfZXF1YWxfYXJyYXkodCwgY2FuZCkpIHsKCQkJCW5ld19pZCA9IGNhbmRfaWQ7CgkJCQli
cmVhazsKCQkJfQoJCX0KCQlicmVhazsKCX0KCgljYXNlIEJURl9LSU5EX0ZVTkNfUFJPVE86IHsK
CQlzdHJ1Y3QgYnRmX3BhcmFtICpwYXJhbTsKCQlfX3UxNiB2bGVuOwoJCWludCBpOwoKCQlyZWZf
dHlwZV9pZCA9IGJ0Zl9kZWR1cF9yZWZfdHlwZShkLCB0LT50eXBlKTsKCQlpZiAocmVmX3R5cGVf
aWQgPCAwKQoJCQlyZXR1cm4gcmVmX3R5cGVfaWQ7CgkJdC0+dHlwZSA9IHJlZl90eXBlX2lkOwoK
CQl2bGVuID0gYnRmX3ZsZW4odCk7CgkJcGFyYW0gPSBidGZfcGFyYW1zKHQpOwoJCWZvciAoaSA9
IDA7IGkgPCB2bGVuOyBpKyspIHsKCQkJcmVmX3R5cGVfaWQgPSBidGZfZGVkdXBfcmVmX3R5cGUo
ZCwgcGFyYW0tPnR5cGUpOwoJCQlpZiAocmVmX3R5cGVfaWQgPCAwKQoJCQkJcmV0dXJuIHJlZl90
eXBlX2lkOwoJCQlwYXJhbS0+dHlwZSA9IHJlZl90eXBlX2lkOwoJCQlwYXJhbSsrOwoJCX0KCgkJ
aCA9IGJ0Zl9oYXNoX2ZucHJvdG8odCk7CgkJZm9yX2VhY2hfZGVkdXBfY2FuZChkLCBoYXNoX2Vu
dHJ5LCBoKSB7CgkJCWNhbmRfaWQgPSBoYXNoX2VudHJ5LT52YWx1ZTsKCQkJY2FuZCA9IGJ0Zl90
eXBlX2J5X2lkKGQtPmJ0ZiwgY2FuZF9pZCk7CgkJCWlmIChidGZfZXF1YWxfZm5wcm90byh0LCBj
YW5kKSkgewoJCQkJbmV3X2lkID0gY2FuZF9pZDsKCQkJCWJyZWFrOwoJCQl9CgkJfQoJCWJyZWFr
OwoJfQoKCWRlZmF1bHQ6CgkJcmV0dXJuIC1FSU5WQUw7Cgl9CgoJZC0+bWFwW3R5cGVfaWRdID0g
bmV3X2lkOwoJaWYgKHR5cGVfaWQgPT0gbmV3X2lkICYmIGJ0Zl9kZWR1cF90YWJsZV9hZGQoZCwg
aCwgdHlwZV9pZCkpCgkJcmV0dXJuIC1FTk9NRU07CgoJcmV0dXJuIG5ld19pZDsKfQoKc3RhdGlj
IGludCBidGZfZGVkdXBfcmVmX3R5cGVzKHN0cnVjdCBidGZfZGVkdXAgKmQpCnsKCWludCBpLCBl
cnI7CgoJZm9yIChpID0gMDsgaSA8IGQtPmJ0Zi0+bnJfdHlwZXM7IGkrKykgewoJCWVyciA9IGJ0
Zl9kZWR1cF9yZWZfdHlwZShkLCBkLT5idGYtPnN0YXJ0X2lkICsgaSk7CgkJaWYgKGVyciA8IDAp
CgkJCXJldHVybiBlcnI7Cgl9CgkvKiB3ZSB3b24ndCBuZWVkIGQtPmRlZHVwX3RhYmxlIGFueW1v
cmUgKi8KCWhhc2htYXBfX2ZyZWUoZC0+ZGVkdXBfdGFibGUpOwoJZC0+ZGVkdXBfdGFibGUgPSBO
VUxMOwoJcmV0dXJuIDA7Cn0KCi8qCiAqIENvbGxlY3QgYSBtYXAgZnJvbSB0eXBlIG5hbWVzIHRv
IHR5cGUgaWRzIGZvciBhbGwgY2Fub25pY2FsIHN0cnVjdHMKICogYW5kIHVuaW9ucy4gSWYgdGhl
IHNhbWUgbmFtZSBpcyBzaGFyZWQgYnkgc2V2ZXJhbCBjYW5vbmljYWwgdHlwZXMKICogdXNlIGEg
c3BlY2lhbCB2YWx1ZSAwIHRvIGluZGljYXRlIHRoaXMgZmFjdC4KICovCnN0YXRpYyBpbnQgYnRm
X2RlZHVwX2ZpbGxfdW5pcXVlX25hbWVzX21hcChzdHJ1Y3QgYnRmX2RlZHVwICpkLCBzdHJ1Y3Qg
aGFzaG1hcCAqbmFtZXNfbWFwKQp7CglfX3UzMiBucl90eXBlcyA9IGJ0Zl9fdHlwZV9jbnQoZC0+
YnRmKTsKCXN0cnVjdCBidGZfdHlwZSAqdDsKCV9fdTMyIHR5cGVfaWQ7CglfX3UxNiBraW5kOwoJ
aW50IGVycjsKCgkvKgoJICogSXRlcmF0ZSBvdmVyIGJhc2UgYW5kIHNwbGl0IG1vZHVsZSBpZHMg
aW4gb3JkZXIgdG8gZ2V0IGFsbAoJICogYXZhaWxhYmxlIHN0cnVjdHMgaW4gdGhlIG1hcC4KCSAq
LwoJZm9yICh0eXBlX2lkID0gMTsgdHlwZV9pZCA8IG5yX3R5cGVzOyArK3R5cGVfaWQpIHsKCQl0
ID0gYnRmX3R5cGVfYnlfaWQoZC0+YnRmLCB0eXBlX2lkKTsKCQlraW5kID0gYnRmX2tpbmQodCk7
CgoJCWlmIChraW5kICE9IEJURl9LSU5EX1NUUlVDVCAmJiBraW5kICE9IEJURl9LSU5EX1VOSU9O
KQoJCQljb250aW51ZTsKCgkJLyogU2tpcCBub24tY2Fub25pY2FsIHR5cGVzICovCgkJaWYgKHR5
cGVfaWQgIT0gZC0+bWFwW3R5cGVfaWRdKQoJCQljb250aW51ZTsKCgkJZXJyID0gaGFzaG1hcF9f
YWRkKG5hbWVzX21hcCwgdC0+bmFtZV9vZmYsIHR5cGVfaWQpOwoJCWlmIChlcnIgPT0gLUVFWElT
VCkKCQkJZXJyID0gaGFzaG1hcF9fc2V0KG5hbWVzX21hcCwgdC0+bmFtZV9vZmYsIDAsIE5VTEws
IE5VTEwpOwoKCQlpZiAoZXJyKQoJCQlyZXR1cm4gZXJyOwoJfQoKCXJldHVybiAwOwp9CgpzdGF0
aWMgaW50IGJ0Zl9kZWR1cF9yZXNvbHZlX2Z3ZChzdHJ1Y3QgYnRmX2RlZHVwICpkLCBzdHJ1Y3Qg
aGFzaG1hcCAqbmFtZXNfbWFwLCBfX3UzMiB0eXBlX2lkKQp7CglzdHJ1Y3QgYnRmX3R5cGUgKnQg
PSBidGZfdHlwZV9ieV9pZChkLT5idGYsIHR5cGVfaWQpOwoJZW51bSBidGZfZndkX2tpbmQgZndk
X2tpbmQgPSBidGZfa2ZsYWcodCk7CglfX3UxNiBjYW5kX2tpbmQsIGtpbmQgPSBidGZfa2luZCh0
KTsKCXN0cnVjdCBidGZfdHlwZSAqY2FuZF90OwoJdWludHB0cl90IGNhbmRfaWQ7CgoJaWYgKGtp
bmQgIT0gQlRGX0tJTkRfRldEKQoJCXJldHVybiAwOwoKCS8qIFNraXAgaWYgdGhpcyBGV0QgYWxy
ZWFkeSBoYXMgYSBtYXBwaW5nICovCglpZiAodHlwZV9pZCAhPSBkLT5tYXBbdHlwZV9pZF0pCgkJ
cmV0dXJuIDA7CgoJaWYgKCFoYXNobWFwX19maW5kKG5hbWVzX21hcCwgdC0+bmFtZV9vZmYsICZj
YW5kX2lkKSkKCQlyZXR1cm4gMDsKCgkvKiBaZXJvIGlzIGEgc3BlY2lhbCB2YWx1ZSBpbmRpY2F0
aW5nIHRoYXQgbmFtZSBpcyBub3QgdW5pcXVlICovCglpZiAoIWNhbmRfaWQpCgkJcmV0dXJuIDA7
CgoJY2FuZF90ID0gYnRmX3R5cGVfYnlfaWQoZC0+YnRmLCBjYW5kX2lkKTsKCWNhbmRfa2luZCA9
IGJ0Zl9raW5kKGNhbmRfdCk7CglpZiAoKGNhbmRfa2luZCA9PSBCVEZfS0lORF9TVFJVQ1QgJiYg
ZndkX2tpbmQgIT0gQlRGX0ZXRF9TVFJVQ1QpIHx8CgkgICAgKGNhbmRfa2luZCA9PSBCVEZfS0lO
RF9VTklPTiAmJiBmd2Rfa2luZCAhPSBCVEZfRldEX1VOSU9OKSkKCQlyZXR1cm4gMDsKCglkLT5t
YXBbdHlwZV9pZF0gPSBjYW5kX2lkOwoKCXJldHVybiAwOwp9CgovKgogKiBSZXNvbHZlIHVuYW1i
aWd1b3VzIGZvcndhcmQgZGVjbGFyYXRpb25zLgogKgogKiBUaGUgbGlvbidzIHNoYXJlIG9mIGFs
bCBGV0QgZGVjbGFyYXRpb25zIGlzIHJlc29sdmVkIGR1cmluZwogKiBgYnRmX2RlZHVwX3N0cnVj
dF90eXBlc2AgcGhhc2Ugd2hlbiBkaWZmZXJlbnQgdHlwZSBncmFwaHMgYXJlCiAqIGNvbXBhcmVk
IGFnYWluc3QgZWFjaCBvdGhlci4gSG93ZXZlciwgaWYgaW4gc29tZSBjb21waWxhdGlvbiB1bml0
IGEKICogRldEIGRlY2xhcmF0aW9uIGlzIG5vdCBhIHBhcnQgb2YgYSB0eXBlIGdyYXBoIGNvbXBh
cmVkIGFnYWluc3QKICogYW5vdGhlciB0eXBlIGdyYXBoIHRoYXQgZGVjbGFyYXRpb24ncyBjYW5v
bmljYWwgdHlwZSB3b3VsZCBub3QgYmUKICogY2hhbmdlZC4gRXhhbXBsZToKICoKICogQ1UgIzE6
CiAqCiAqIHN0cnVjdCBmb287CiAqIHN0cnVjdCBmb28gKnNvbWVfZ2xvYmFsOwogKgogKiBDVSAj
MjoKICoKICogc3RydWN0IGZvbyB7IGludCB1OyB9OwogKiBzdHJ1Y3QgZm9vICphbm90aGVyX2ds
b2JhbDsKICoKICogQWZ0ZXIgYGJ0Zl9kZWR1cF9zdHJ1Y3RfdHlwZXNgIHRoZSBCVEYgbG9va3Mg
YXMgZm9sbG93czoKICoKICogWzFdIFNUUlVDVCAnZm9vJyBzaXplPTQgdmxlbj0xIC4uLgogKiBb
Ml0gSU5UICdpbnQnIHNpemU9NCAuLi4KICogWzNdIFBUUiAnKGFub24pJyB0eXBlX2lkPTEKICog
WzRdIEZXRCAnZm9vJyBmd2Rfa2luZD1zdHJ1Y3QKICogWzVdIFBUUiAnKGFub24pJyB0eXBlX2lk
PTQKICoKICogVGhpcyBwYXNzIGFzc3VtZXMgdGhhdCBzdWNoIEZXRCBkZWNsYXJhdGlvbnMgc2hv
dWxkIGJlIG1hcHBlZCB0bwogKiBzdHJ1Y3RzIG9yIHVuaW9ucyB3aXRoIGlkZW50aWNhbCBuYW1l
IGluIGNhc2UgaWYgdGhlIG5hbWUgaXMgbm90CiAqIGFtYmlndW91cy4KICovCnN0YXRpYyBpbnQg
YnRmX2RlZHVwX3Jlc29sdmVfZndkcyhzdHJ1Y3QgYnRmX2RlZHVwICpkKQp7CglpbnQgaSwgZXJy
OwoJc3RydWN0IGhhc2htYXAgKm5hbWVzX21hcDsKCgluYW1lc19tYXAgPSBoYXNobWFwX19uZXco
YnRmX2RlZHVwX2lkZW50aXR5X2hhc2hfZm4sIGJ0Zl9kZWR1cF9lcXVhbF9mbiwgTlVMTCk7Cglp
ZiAoSVNfRVJSKG5hbWVzX21hcCkpCgkJcmV0dXJuIFBUUl9FUlIobmFtZXNfbWFwKTsKCgllcnIg
PSBidGZfZGVkdXBfZmlsbF91bmlxdWVfbmFtZXNfbWFwKGQsIG5hbWVzX21hcCk7CglpZiAoZXJy
IDwgMCkKCQlnb3RvIGV4aXQ7CgoJZm9yIChpID0gMDsgaSA8IGQtPmJ0Zi0+bnJfdHlwZXM7IGkr
KykgewoJCWVyciA9IGJ0Zl9kZWR1cF9yZXNvbHZlX2Z3ZChkLCBuYW1lc19tYXAsIGQtPmJ0Zi0+
c3RhcnRfaWQgKyBpKTsKCQlpZiAoZXJyIDwgMCkKCQkJYnJlYWs7Cgl9CgpleGl0OgoJaGFzaG1h
cF9fZnJlZShuYW1lc19tYXApOwoJcmV0dXJuIGVycjsKfQoKLyoKICogQ29tcGFjdCB0eXBlcy4K
ICoKICogQWZ0ZXIgd2UgZXN0YWJsaXNoZWQgZm9yIGVhY2ggdHlwZSBpdHMgY29ycmVzcG9uZGlu
ZyBjYW5vbmljYWwgcmVwcmVzZW50YXRpdmUKICogdHlwZSwgd2Ugbm93IGNhbiBlbGltaW5hdGUg
dHlwZXMgdGhhdCBhcmUgbm90IGNhbm9uaWNhbCBhbmQgbGVhdmUgb25seQogKiBjYW5vbmljYWwg
b25lcyBsYXllZCBvdXQgc2VxdWVudGlhbGx5IGluIG1lbW9yeSBieSBjb3B5aW5nIHRoZW0gb3Zl
cgogKiBkdXBsaWNhdGVzLiBEdXJpbmcgY29tcGFjdGlvbiBidGZfZGVkdXAtPmh5cG90X21hcCBh
cnJheSBpcyByZXVzZWQgdG8gc3RvcmUKICogYSBtYXAgZnJvbSBvcmlnaW5hbCB0eXBlIElEIHRv
IGEgbmV3IGNvbXBhY3RlZCB0eXBlIElELCB3aGljaCB3aWxsIGJlIHVzZWQKICogZHVyaW5nIG5l
eHQgcGhhc2UgdG8gImZpeCB1cCIgdHlwZSBJRHMsIHJlZmVyZW5jZWQgZnJvbSBzdHJ1Y3QvdW5p
b24gYW5kCiAqIHJlZmVyZW5jZSB0eXBlcy4KICovCnN0YXRpYyBpbnQgYnRmX2RlZHVwX2NvbXBh
Y3RfdHlwZXMoc3RydWN0IGJ0Zl9kZWR1cCAqZCkKewoJX191MzIgKm5ld19vZmZzOwoJX191MzIg
bmV4dF90eXBlX2lkID0gZC0+YnRmLT5zdGFydF9pZDsKCWNvbnN0IHN0cnVjdCBidGZfdHlwZSAq
dDsKCXZvaWQgKnA7CglpbnQgaSwgaWQsIGxlbjsKCgkvKiB3ZSBhcmUgZ29pbmcgdG8gcmV1c2Ug
aHlwb3RfbWFwIHRvIHN0b3JlIGNvbXBhY3Rpb24gcmVtYXBwaW5nICovCglkLT5oeXBvdF9tYXBb
MF0gPSAwOwoJLyogYmFzZSBCVEYgdHlwZXMgYXJlIG5vdCByZW51bWJlcmVkICovCglmb3IgKGlk
ID0gMTsgaWQgPCBkLT5idGYtPnN0YXJ0X2lkOyBpZCsrKQoJCWQtPmh5cG90X21hcFtpZF0gPSBp
ZDsKCWZvciAoaSA9IDAsIGlkID0gZC0+YnRmLT5zdGFydF9pZDsgaSA8IGQtPmJ0Zi0+bnJfdHlw
ZXM7IGkrKywgaWQrKykKCQlkLT5oeXBvdF9tYXBbaWRdID0gQlRGX1VOUFJPQ0VTU0VEX0lEOwoK
CXAgPSBkLT5idGYtPnR5cGVzX2RhdGE7CgoJZm9yIChpID0gMCwgaWQgPSBkLT5idGYtPnN0YXJ0
X2lkOyBpIDwgZC0+YnRmLT5ucl90eXBlczsgaSsrLCBpZCsrKSB7CgkJaWYgKGQtPm1hcFtpZF0g
IT0gaWQpCgkJCWNvbnRpbnVlOwoKCQl0ID0gYnRmX190eXBlX2J5X2lkKGQtPmJ0ZiwgaWQpOwoJ
CWxlbiA9IGJ0Zl90eXBlX3NpemUodCk7CgkJaWYgKGxlbiA8IDApCgkJCXJldHVybiBsZW47CgoJ
CW1lbW1vdmUocCwgdCwgbGVuKTsKCQlkLT5oeXBvdF9tYXBbaWRdID0gbmV4dF90eXBlX2lkOwoJ
CWQtPmJ0Zi0+dHlwZV9vZmZzW25leHRfdHlwZV9pZCAtIGQtPmJ0Zi0+c3RhcnRfaWRdID0gcCAt
IGQtPmJ0Zi0+dHlwZXNfZGF0YTsKCQlwICs9IGxlbjsKCQluZXh0X3R5cGVfaWQrKzsKCX0KCgkv
KiBzaHJpbmsgc3RydWN0IGJ0ZidzIGludGVybmFsIHR5cGVzIGluZGV4IGFuZCB1cGRhdGUgYnRm
X2hlYWRlciAqLwoJZC0+YnRmLT5ucl90eXBlcyA9IG5leHRfdHlwZV9pZCAtIGQtPmJ0Zi0+c3Rh
cnRfaWQ7CglkLT5idGYtPnR5cGVfb2Zmc19jYXAgPSBkLT5idGYtPm5yX3R5cGVzOwoJZC0+YnRm
LT5oZHItPnR5cGVfbGVuID0gcCAtIGQtPmJ0Zi0+dHlwZXNfZGF0YTsKCW5ld19vZmZzID0gbGli
YnBmX3JlYWxsb2NhcnJheShkLT5idGYtPnR5cGVfb2ZmcywgZC0+YnRmLT50eXBlX29mZnNfY2Fw
LAoJCQkJICAgICAgIHNpemVvZigqbmV3X29mZnMpKTsKCWlmIChkLT5idGYtPnR5cGVfb2Zmc19j
YXAgJiYgIW5ld19vZmZzKQoJCXJldHVybiAtRU5PTUVNOwoJZC0+YnRmLT50eXBlX29mZnMgPSBu
ZXdfb2ZmczsKCWQtPmJ0Zi0+aGRyLT5zdHJfb2ZmID0gZC0+YnRmLT5oZHItPnR5cGVfbGVuOwoJ
ZC0+YnRmLT5yYXdfc2l6ZSA9IGQtPmJ0Zi0+aGRyLT5oZHJfbGVuICsgZC0+YnRmLT5oZHItPnR5
cGVfbGVuICsgZC0+YnRmLT5oZHItPnN0cl9sZW47CglyZXR1cm4gMDsKfQoKLyoKICogRmlndXJl
IG91dCBmaW5hbCAoZGVkdXBsaWNhdGVkIGFuZCBjb21wYWN0ZWQpIHR5cGUgSUQgZm9yIHByb3Zp
ZGVkIG9yaWdpbmFsCiAqIGB0eXBlX2lkYCBieSBmaXJzdCByZXNvbHZpbmcgaXQgaW50byBjb3Jy
ZXNwb25kaW5nIGNhbm9uaWNhbCB0eXBlIElEIGFuZAogKiB0aGVuIG1hcHBpbmcgaXQgdG8gYSBk
ZWR1cGxpY2F0ZWQgdHlwZSBJRCwgc3RvcmVkIGluIGJ0Zl9kZWR1cC0+aHlwb3RfbWFwLAogKiB3
aGljaCBpcyBwb3B1bGF0ZWQgZHVyaW5nIGNvbXBhY3Rpb24gcGhhc2UuCiAqLwpzdGF0aWMgaW50
IGJ0Zl9kZWR1cF9yZW1hcF90eXBlX2lkKF9fdTMyICp0eXBlX2lkLCB2b2lkICpjdHgpCnsKCXN0
cnVjdCBidGZfZGVkdXAgKmQgPSBjdHg7CglfX3UzMiByZXNvbHZlZF90eXBlX2lkLCBuZXdfdHlw
ZV9pZDsKCglyZXNvbHZlZF90eXBlX2lkID0gcmVzb2x2ZV90eXBlX2lkKGQsICp0eXBlX2lkKTsK
CW5ld190eXBlX2lkID0gZC0+aHlwb3RfbWFwW3Jlc29sdmVkX3R5cGVfaWRdOwoJaWYgKG5ld190
eXBlX2lkID4gQlRGX01BWF9OUl9UWVBFUykKCQlyZXR1cm4gLUVJTlZBTDsKCgkqdHlwZV9pZCA9
IG5ld190eXBlX2lkOwoJcmV0dXJuIDA7Cn0KCi8qCiAqIFJlbWFwIHJlZmVyZW5jZWQgdHlwZSBJ
RHMgaW50byBkZWR1cGVkIHR5cGUgSURzLgogKgogKiBBZnRlciBCVEYgdHlwZXMgYXJlIGRlZHVw
bGljYXRlZCBhbmQgY29tcGFjdGVkLCB0aGVpciBmaW5hbCB0eXBlIElEcyBtYXkKICogZGlmZmVy
IGZyb20gb3JpZ2luYWwgb25lcy4gVGhlIG1hcCBmcm9tIG9yaWdpbmFsIHRvIGEgY29ycmVzcG9u
ZGluZwogKiBkZWR1cGVkIHR5cGUgSUQgaXMgc3RvcmVkIGluIGJ0Zl9kZWR1cC0+aHlwb3RfbWFw
IGFuZCBpcyBwb3B1bGF0ZWQgZHVyaW5nCiAqIGNvbXBhY3Rpb24gcGhhc2UuIER1cmluZyByZW1h
cHBpbmcgcGhhc2Ugd2UgYXJlIHJld3JpdGluZyBhbGwgdHlwZSBJRHMKICogcmVmZXJlbmNlZCBm
cm9tIGFueSBCVEYgdHlwZSAoZS5nLiwgc3RydWN0IGZpZWxkcywgZnVuYyBwcm90byBhcmdzLCBl
dGMpIHRvCiAqIHRoZWlyIGZpbmFsIGRlZHVwZWQgdHlwZSBJRHMuCiAqLwpzdGF0aWMgaW50IGJ0
Zl9kZWR1cF9yZW1hcF90eXBlcyhzdHJ1Y3QgYnRmX2RlZHVwICpkKQp7CglpbnQgaSwgcjsKCglm
b3IgKGkgPSAwOyBpIDwgZC0+YnRmLT5ucl90eXBlczsgaSsrKSB7CgkJc3RydWN0IGJ0Zl90eXBl
ICp0ID0gYnRmX3R5cGVfYnlfaWQoZC0+YnRmLCBkLT5idGYtPnN0YXJ0X2lkICsgaSk7CgkJc3Ry
dWN0IGJ0Zl9maWVsZF9pdGVyIGl0OwoJCV9fdTMyICp0eXBlX2lkOwoKCQlyID0gYnRmX2ZpZWxk
X2l0ZXJfaW5pdCgmaXQsIHQsIEJURl9GSUVMRF9JVEVSX0lEUyk7CgkJaWYgKHIpCgkJCXJldHVy
biByOwoKCQl3aGlsZSAoKHR5cGVfaWQgPSBidGZfZmllbGRfaXRlcl9uZXh0KCZpdCkpKSB7CgkJ
CV9fdTMyIHJlc29sdmVkX2lkLCBuZXdfaWQ7CgoJCQlyZXNvbHZlZF9pZCA9IHJlc29sdmVfdHlw
ZV9pZChkLCAqdHlwZV9pZCk7CgkJCW5ld19pZCA9IGQtPmh5cG90X21hcFtyZXNvbHZlZF9pZF07
CgkJCWlmIChuZXdfaWQgPiBCVEZfTUFYX05SX1RZUEVTKQoJCQkJcmV0dXJuIC1FSU5WQUw7CgoJ
CQkqdHlwZV9pZCA9IG5ld19pZDsKCQl9Cgl9CgoJaWYgKCFkLT5idGZfZXh0KQoJCXJldHVybiAw
OwoKCXIgPSBidGZfZXh0X3Zpc2l0X3R5cGVfaWRzKGQtPmJ0Zl9leHQsIGJ0Zl9kZWR1cF9yZW1h
cF90eXBlX2lkLCBkKTsKCWlmIChyKQoJCXJldHVybiByOwoKCXJldHVybiAwOwp9CgovKgogKiBQ
cm9iZSBmZXcgd2VsbC1rbm93biBsb2NhdGlvbnMgZm9yIHZtbGludXgga2VybmVsIGltYWdlIGFu
ZCB0cnkgdG8gbG9hZCBCVEYKICogZGF0YSBvdXQgb2YgaXQgdG8gdXNlIGZvciB0YXJnZXQgQlRG
LgogKi8Kc3RydWN0IGJ0ZiAqYnRmX19sb2FkX3ZtbGludXhfYnRmKHZvaWQpCnsKCWNvbnN0IGNo
YXIgKnN5c2ZzX2J0Zl9wYXRoID0gIi9zeXMva2VybmVsL2J0Zi92bWxpbnV4IjsKCS8qIGZhbGwg
YmFjayBsb2NhdGlvbnMsIHRyeWluZyB0byBmaW5kIHZtbGludXggb24gZGlzayAqLwoJY29uc3Qg
Y2hhciAqbG9jYXRpb25zW10gPSB7CgkJIi9ib290L3ZtbGludXgtJTEkcyIsCgkJIi9saWIvbW9k
dWxlcy8lMSRzL3ZtbGludXgtJTEkcyIsCgkJIi9saWIvbW9kdWxlcy8lMSRzL2J1aWxkL3ZtbGlu
dXgiLAoJCSIvdXNyL2xpYi9tb2R1bGVzLyUxJHMva2VybmVsL3ZtbGludXgiLAoJCSIvdXNyL2xp
Yi9kZWJ1Zy9ib290L3ZtbGludXgtJTEkcyIsCgkJIi91c3IvbGliL2RlYnVnL2Jvb3Qvdm1saW51
eC0lMSRzLmRlYnVnIiwKCQkiL3Vzci9saWIvZGVidWcvbGliL21vZHVsZXMvJTEkcy92bWxpbnV4
IiwKCX07CgljaGFyIHBhdGhbUEFUSF9NQVggKyAxXTsKCXN0cnVjdCB1dHNuYW1lIGJ1ZjsKCXN0
cnVjdCBidGYgKmJ0ZjsKCWludCBpLCBlcnI7CgoJLyogaXMgY2Fub25pY2FsIHN5c2ZzIGxvY2F0
aW9uIGFjY2Vzc2libGU/ICovCglpZiAoZmFjY2Vzc2F0KEFUX0ZEQ1dELCBzeXNmc19idGZfcGF0
aCwgRl9PSywgQVRfRUFDQ0VTUykgPCAwKSB7CgkJcHJfd2Fybigia2VybmVsIEJURiBpcyBtaXNz
aW5nIGF0ICclcycsIHdhcyBDT05GSUdfREVCVUdfSU5GT19CVEYgZW5hYmxlZD9cbiIsCgkJCXN5
c2ZzX2J0Zl9wYXRoKTsKCX0gZWxzZSB7CgkJYnRmID0gYnRmX19wYXJzZShzeXNmc19idGZfcGF0
aCwgTlVMTCk7CgkJaWYgKCFidGYpIHsKCQkJZXJyID0gLWVycm5vOwoJCQlwcl93YXJuKCJmYWls
ZWQgdG8gcmVhZCBrZXJuZWwgQlRGIGZyb20gJyVzJzogJXNcbiIsCgkJCQlzeXNmc19idGZfcGF0
aCwgZXJyc3RyKGVycikpOwoJCQlyZXR1cm4gbGliYnBmX2Vycl9wdHIoZXJyKTsKCQl9CgkJcHJf
ZGVidWcoImxvYWRlZCBrZXJuZWwgQlRGIGZyb20gJyVzJ1xuIiwgc3lzZnNfYnRmX3BhdGgpOwoJ
CXJldHVybiBidGY7Cgl9CgoJLyogdHJ5IGZhbGxiYWNrIGxvY2F0aW9ucyAqLwoJdW5hbWUoJmJ1
Zik7Cglmb3IgKGkgPSAwOyBpIDwgQVJSQVlfU0laRShsb2NhdGlvbnMpOyBpKyspIHsKCQlzbnBy
aW50ZihwYXRoLCBQQVRIX01BWCwgbG9jYXRpb25zW2ldLCBidWYucmVsZWFzZSk7CgoJCWlmIChm
YWNjZXNzYXQoQVRfRkRDV0QsIHBhdGgsIFJfT0ssIEFUX0VBQ0NFU1MpKQoJCQljb250aW51ZTsK
CgkJYnRmID0gYnRmX19wYXJzZShwYXRoLCBOVUxMKTsKCQllcnIgPSBsaWJicGZfZ2V0X2Vycm9y
KGJ0Zik7CgkJcHJfZGVidWcoImxvYWRpbmcga2VybmVsIEJURiAnJXMnOiAlc1xuIiwgcGF0aCwg
ZXJyc3RyKGVycikpOwoJCWlmIChlcnIpCgkJCWNvbnRpbnVlOwoKCQlyZXR1cm4gYnRmOwoJfQoK
CXByX3dhcm4oImZhaWxlZCB0byBmaW5kIHZhbGlkIGtlcm5lbCBCVEZcbiIpOwoJcmV0dXJuIGxp
YmJwZl9lcnJfcHRyKC1FU1JDSCk7Cn0KCnN0cnVjdCBidGYgKmxpYmJwZl9maW5kX2tlcm5lbF9i
dGYodm9pZCkgX19hdHRyaWJ1dGVfXygoYWxpYXMoImJ0Zl9fbG9hZF92bWxpbnV4X2J0ZiIpKSk7
CgpzdHJ1Y3QgYnRmICpidGZfX2xvYWRfbW9kdWxlX2J0Zihjb25zdCBjaGFyICptb2R1bGVfbmFt
ZSwgc3RydWN0IGJ0ZiAqdm1saW51eF9idGYpCnsKCWNoYXIgcGF0aFs4MF07CgoJc25wcmludGYo
cGF0aCwgc2l6ZW9mKHBhdGgpLCAiL3N5cy9rZXJuZWwvYnRmLyVzIiwgbW9kdWxlX25hbWUpOwoJ
cmV0dXJuIGJ0Zl9fcGFyc2Vfc3BsaXQocGF0aCwgdm1saW51eF9idGYpOwp9CgppbnQgYnRmX2V4
dF92aXNpdF90eXBlX2lkcyhzdHJ1Y3QgYnRmX2V4dCAqYnRmX2V4dCwgdHlwZV9pZF92aXNpdF9m
biB2aXNpdCwgdm9pZCAqY3R4KQp7Cgljb25zdCBzdHJ1Y3QgYnRmX2V4dF9pbmZvICpzZWc7Cglz
dHJ1Y3QgYnRmX2V4dF9pbmZvX3NlYyAqc2VjOwoJaW50IGksIGVycjsKCglzZWcgPSAmYnRmX2V4
dC0+ZnVuY19pbmZvOwoJZm9yX2VhY2hfYnRmX2V4dF9zZWMoc2VnLCBzZWMpIHsKCQlzdHJ1Y3Qg
YnBmX2Z1bmNfaW5mb19taW4gKnJlYzsKCgkJZm9yX2VhY2hfYnRmX2V4dF9yZWMoc2VnLCBzZWMs
IGksIHJlYykgewoJCQllcnIgPSB2aXNpdCgmcmVjLT50eXBlX2lkLCBjdHgpOwoJCQlpZiAoZXJy
IDwgMCkKCQkJCXJldHVybiBlcnI7CgkJfQoJfQoKCXNlZyA9ICZidGZfZXh0LT5jb3JlX3JlbG9f
aW5mbzsKCWZvcl9lYWNoX2J0Zl9leHRfc2VjKHNlZywgc2VjKSB7CgkJc3RydWN0IGJwZl9jb3Jl
X3JlbG8gKnJlYzsKCgkJZm9yX2VhY2hfYnRmX2V4dF9yZWMoc2VnLCBzZWMsIGksIHJlYykgewoJ
CQllcnIgPSB2aXNpdCgmcmVjLT50eXBlX2lkLCBjdHgpOwoJCQlpZiAoZXJyIDwgMCkKCQkJCXJl
dHVybiBlcnI7CgkJfQoJfQoKCXJldHVybiAwOwp9CgppbnQgYnRmX2V4dF92aXNpdF9zdHJfb2Zm
cyhzdHJ1Y3QgYnRmX2V4dCAqYnRmX2V4dCwgc3RyX29mZl92aXNpdF9mbiB2aXNpdCwgdm9pZCAq
Y3R4KQp7Cgljb25zdCBzdHJ1Y3QgYnRmX2V4dF9pbmZvICpzZWc7CglzdHJ1Y3QgYnRmX2V4dF9p
bmZvX3NlYyAqc2VjOwoJaW50IGksIGVycjsKCglzZWcgPSAmYnRmX2V4dC0+ZnVuY19pbmZvOwoJ
Zm9yX2VhY2hfYnRmX2V4dF9zZWMoc2VnLCBzZWMpIHsKCQllcnIgPSB2aXNpdCgmc2VjLT5zZWNf
bmFtZV9vZmYsIGN0eCk7CgkJaWYgKGVycikKCQkJcmV0dXJuIGVycjsKCX0KCglzZWcgPSAmYnRm
X2V4dC0+bGluZV9pbmZvOwoJZm9yX2VhY2hfYnRmX2V4dF9zZWMoc2VnLCBzZWMpIHsKCQlzdHJ1
Y3QgYnBmX2xpbmVfaW5mb19taW4gKnJlYzsKCgkJZXJyID0gdmlzaXQoJnNlYy0+c2VjX25hbWVf
b2ZmLCBjdHgpOwoJCWlmIChlcnIpCgkJCXJldHVybiBlcnI7CgoJCWZvcl9lYWNoX2J0Zl9leHRf
cmVjKHNlZywgc2VjLCBpLCByZWMpIHsKCQkJZXJyID0gdmlzaXQoJnJlYy0+ZmlsZV9uYW1lX29m
ZiwgY3R4KTsKCQkJaWYgKGVycikKCQkJCXJldHVybiBlcnI7CgkJCWVyciA9IHZpc2l0KCZyZWMt
PmxpbmVfb2ZmLCBjdHgpOwoJCQlpZiAoZXJyKQoJCQkJcmV0dXJuIGVycjsKCQl9Cgl9CgoJc2Vn
ID0gJmJ0Zl9leHQtPmNvcmVfcmVsb19pbmZvOwoJZm9yX2VhY2hfYnRmX2V4dF9zZWMoc2VnLCBz
ZWMpIHsKCQlzdHJ1Y3QgYnBmX2NvcmVfcmVsbyAqcmVjOwoKCQllcnIgPSB2aXNpdCgmc2VjLT5z
ZWNfbmFtZV9vZmYsIGN0eCk7CgkJaWYgKGVycikKCQkJcmV0dXJuIGVycjsKCgkJZm9yX2VhY2hf
YnRmX2V4dF9yZWMoc2VnLCBzZWMsIGksIHJlYykgewoJCQllcnIgPSB2aXNpdCgmcmVjLT5hY2Nl
c3Nfc3RyX29mZiwgY3R4KTsKCQkJaWYgKGVycikKCQkJCXJldHVybiBlcnI7CgkJfQoJfQoKCXJl
dHVybiAwOwp9CgpzdHJ1Y3QgYnRmX2Rpc3RpbGwgewoJc3RydWN0IGJ0Zl9waXBlIHBpcGU7Cglp
bnQgKmlkX21hcDsKCXVuc2lnbmVkIGludCBzcGxpdF9zdGFydF9pZDsKCXVuc2lnbmVkIGludCBz
cGxpdF9zdGFydF9zdHI7CglpbnQgZGlmZl9pZDsKfTsKCnN0YXRpYyBpbnQgYnRmX2FkZF9kaXN0
aWxsZWRfdHlwZV9pZHMoc3RydWN0IGJ0Zl9kaXN0aWxsICpkaXN0LCBfX3UzMiBpKQp7CglzdHJ1
Y3QgYnRmX3R5cGUgKnNwbGl0X3QgPSBidGZfdHlwZV9ieV9pZChkaXN0LT5waXBlLnNyYywgaSk7
CglzdHJ1Y3QgYnRmX2ZpZWxkX2l0ZXIgaXQ7CglfX3UzMiAqaWQ7CglpbnQgZXJyOwoKCWVyciA9
IGJ0Zl9maWVsZF9pdGVyX2luaXQoJml0LCBzcGxpdF90LCBCVEZfRklFTERfSVRFUl9JRFMpOwoJ
aWYgKGVycikKCQlyZXR1cm4gZXJyOwoJd2hpbGUgKChpZCA9IGJ0Zl9maWVsZF9pdGVyX25leHQo
Jml0KSkpIHsKCQlzdHJ1Y3QgYnRmX3R5cGUgKmJhc2VfdDsKCgkJaWYgKCEqaWQpCgkJCWNvbnRp
bnVlOwoJCS8qIHNwbGl0IEJURiBpZCwgbm90IG5lZWRlZCAqLwoJCWlmICgqaWQgPj0gZGlzdC0+
c3BsaXRfc3RhcnRfaWQpCgkJCWNvbnRpbnVlOwoJCS8qIGFscmVhZHkgYWRkZWQgPyAqLwoJCWlm
IChkaXN0LT5pZF9tYXBbKmlkXSA+IDApCgkJCWNvbnRpbnVlOwoKCQkvKiBvbmx5IGEgc3Vic2V0
IG9mIGJhc2UgQlRGIHR5cGVzIHNob3VsZCBiZSByZWZlcmVuY2VkIGZyb20KCQkgKiBzcGxpdCBC
VEY7IGVuc3VyZSBub3RoaW5nIHVuZXhwZWN0ZWQgaXMgcmVmZXJlbmNlZC4KCQkgKi8KCQliYXNl
X3QgPSBidGZfdHlwZV9ieV9pZChkaXN0LT5waXBlLnNyYywgKmlkKTsKCQlzd2l0Y2ggKGJ0Zl9r
aW5kKGJhc2VfdCkpIHsKCQljYXNlIEJURl9LSU5EX0lOVDoKCQljYXNlIEJURl9LSU5EX0ZMT0FU
OgoJCWNhc2UgQlRGX0tJTkRfRldEOgoJCWNhc2UgQlRGX0tJTkRfQVJSQVk6CgkJY2FzZSBCVEZf
S0lORF9TVFJVQ1Q6CgkJY2FzZSBCVEZfS0lORF9VTklPTjoKCQljYXNlIEJURl9LSU5EX1RZUEVE
RUY6CgkJY2FzZSBCVEZfS0lORF9FTlVNOgoJCWNhc2UgQlRGX0tJTkRfRU5VTTY0OgoJCWNhc2Ug
QlRGX0tJTkRfUFRSOgoJCWNhc2UgQlRGX0tJTkRfQ09OU1Q6CgkJY2FzZSBCVEZfS0lORF9SRVNU
UklDVDoKCQljYXNlIEJURl9LSU5EX1ZPTEFUSUxFOgoJCWNhc2UgQlRGX0tJTkRfRlVOQ19QUk9U
TzoKCQljYXNlIEJURl9LSU5EX1RZUEVfVEFHOgoJCQlkaXN0LT5pZF9tYXBbKmlkXSA9ICppZDsK
CQkJYnJlYWs7CgkJZGVmYXVsdDoKCQkJcHJfd2FybigidW5leHBlY3RlZCByZWZlcmVuY2UgdG8g
YmFzZSB0eXBlWyV1XSBvZiBraW5kIFsldV0gd2hlbiBjcmVhdGluZyBkaXN0aWxsZWQgYmFzZSBC
VEYuXG4iLAoJCQkJKmlkLCBidGZfa2luZChiYXNlX3QpKTsKCQkJcmV0dXJuIC1FSU5WQUw7CgkJ
fQoJCS8qIElmIGEgYmFzZSB0eXBlIGlzIHVzZWQsIGVuc3VyZSB0eXBlcyBpdCByZWZlcnMgdG8g
YXJlCgkJICogbWFya2VkIGFzIHVzZWQgYWxzbzsgc28gZm9yIGV4YW1wbGUgaWYgd2UgZmluZCBh
IFBUUiB0byBJTlQKCQkgKiB3ZSBuZWVkIGJvdGggdGhlIFBUUiBhbmQgSU5ULgoJCSAqCgkJICog
VGhlIG9ubHkgZXhjZXB0aW9uIGlzIG5hbWVkIHN0cnVjdC91bmlvbnMsIHNpbmNlIGRpc3RpbGxl
ZAoJCSAqIGJhc2UgQlRGIGNvbXBvc2l0ZSB0eXBlcyBoYXZlIG5vIG1lbWJlcnMuCgkJICovCgkJ
aWYgKGJ0Zl9pc19jb21wb3NpdGUoYmFzZV90KSAmJiBiYXNlX3QtPm5hbWVfb2ZmKQoJCQljb250
aW51ZTsKCQllcnIgPSBidGZfYWRkX2Rpc3RpbGxlZF90eXBlX2lkcyhkaXN0LCAqaWQpOwoJCWlm
IChlcnIpCgkJCXJldHVybiBlcnI7Cgl9CglyZXR1cm4gMDsKfQoKc3RhdGljIGludCBidGZfYWRk
X2Rpc3RpbGxlZF90eXBlcyhzdHJ1Y3QgYnRmX2Rpc3RpbGwgKmRpc3QpCnsKCWJvb2wgYWRkaW5n
X3RvX2Jhc2UgPSBkaXN0LT5waXBlLmRzdC0+c3RhcnRfaWQgPT0gMTsKCWludCBpZCA9IGJ0Zl9f
dHlwZV9jbnQoZGlzdC0+cGlwZS5kc3QpOwoJc3RydWN0IGJ0Zl90eXBlICp0OwoJaW50IGksIGVy
ciA9IDA7CgoKCS8qIEFkZCB0eXBlcyBmb3IgZWFjaCBvZiB0aGUgcmVxdWlyZWQgcmVmZXJlbmNl
cyB0byBlaXRoZXIgZGlzdGlsbGVkCgkgKiBiYXNlIG9yIHNwbGl0IEJURiwgZGVwZW5kaW5nIG9u
IHR5cGUgY2hhcmFjdGVyaXN0aWNzLgoJICovCglmb3IgKGkgPSAxOyBpIDwgZGlzdC0+c3BsaXRf
c3RhcnRfaWQ7IGkrKykgewoJCWNvbnN0IGNoYXIgKm5hbWU7CgkJaW50IGtpbmQ7CgoJCWlmICgh
ZGlzdC0+aWRfbWFwW2ldKQoJCQljb250aW51ZTsKCQl0ID0gYnRmX3R5cGVfYnlfaWQoZGlzdC0+
cGlwZS5zcmMsIGkpOwoJCWtpbmQgPSBidGZfa2luZCh0KTsKCQluYW1lID0gYnRmX19uYW1lX2J5
X29mZnNldChkaXN0LT5waXBlLnNyYywgdC0+bmFtZV9vZmYpOwoKCQlzd2l0Y2ggKGtpbmQpIHsK
CQljYXNlIEJURl9LSU5EX0lOVDoKCQljYXNlIEJURl9LSU5EX0ZMT0FUOgoJCWNhc2UgQlRGX0tJ
TkRfRldEOgoJCQkvKiBOYW1lZCBpbnQsIGZsb2F0LCBmd2QgYXJlIGFkZGVkIHRvIGJhc2UuICov
CgkJCWlmICghYWRkaW5nX3RvX2Jhc2UpCgkJCQljb250aW51ZTsKCQkJZXJyID0gYnRmX2FkZF90
eXBlKCZkaXN0LT5waXBlLCB0KTsKCQkJYnJlYWs7CgkJY2FzZSBCVEZfS0lORF9TVFJVQ1Q6CgkJ
Y2FzZSBCVEZfS0lORF9VTklPTjoKCQkJLyogTmFtZWQgc3RydWN0L3VuaW9uIGFyZSBhZGRlZCB0
byBiYXNlIGFzIDAtdmxlbgoJCQkgKiBzdHJ1Y3QvdW5pb24gb2Ygc2FtZSBzaXplLiAgQW5vbnlt
b3VzIHN0cnVjdC91bmlvbnMKCQkJICogYXJlIGFkZGVkIHRvIHNwbGl0IEJURiBhcy1pcy4KCQkJ
ICovCgkJCWlmIChhZGRpbmdfdG9fYmFzZSkgewoJCQkJaWYgKCF0LT5uYW1lX29mZikKCQkJCQlj
b250aW51ZTsKCQkJCWVyciA9IGJ0Zl9hZGRfY29tcG9zaXRlKGRpc3QtPnBpcGUuZHN0LCBraW5k
LCBuYW1lLCB0LT5zaXplKTsKCQkJfSBlbHNlIHsKCQkJCWlmICh0LT5uYW1lX29mZikKCQkJCQlj
b250aW51ZTsKCQkJCWVyciA9IGJ0Zl9hZGRfdHlwZSgmZGlzdC0+cGlwZSwgdCk7CgkJCX0KCQkJ
YnJlYWs7CgkJY2FzZSBCVEZfS0lORF9FTlVNOgoJCWNhc2UgQlRGX0tJTkRfRU5VTTY0OgoJCQkv
KiBOYW1lZCBlbnVtWzY0XXMgYXJlIGFkZGVkIHRvIGJhc2UgYXMgYSBzaXplZAoJCQkgKiBlbnVt
OyByZWxvY2F0aW9uIHdpbGwgbWF0Y2ggd2l0aCBhcHByb3ByaWF0ZWx5LW5hbWVkCgkJCSAqIGFu
ZCBzaXplZCBlbnVtIG9yIGVudW02NC4KCQkJICoKCQkJICogQW5vbnltb3VzIGVudW1zIGFyZSBh
ZGRlZCB0byBzcGxpdCBCVEYgYXMtaXMuCgkJCSAqLwoJCQlpZiAoYWRkaW5nX3RvX2Jhc2UpIHsK
CQkJCWlmICghdC0+bmFtZV9vZmYpCgkJCQkJY29udGludWU7CgkJCQllcnIgPSBidGZfX2FkZF9l
bnVtKGRpc3QtPnBpcGUuZHN0LCBuYW1lLCB0LT5zaXplKTsKCQkJfSBlbHNlIHsKCQkJCWlmICh0
LT5uYW1lX29mZikKCQkJCQljb250aW51ZTsKCQkJCWVyciA9IGJ0Zl9hZGRfdHlwZSgmZGlzdC0+
cGlwZSwgdCk7CgkJCX0KCQkJYnJlYWs7CgkJY2FzZSBCVEZfS0lORF9BUlJBWToKCQljYXNlIEJU
Rl9LSU5EX1RZUEVERUY6CgkJY2FzZSBCVEZfS0lORF9QVFI6CgkJY2FzZSBCVEZfS0lORF9DT05T
VDoKCQljYXNlIEJURl9LSU5EX1JFU1RSSUNUOgoJCWNhc2UgQlRGX0tJTkRfVk9MQVRJTEU6CgkJ
Y2FzZSBCVEZfS0lORF9GVU5DX1BST1RPOgoJCWNhc2UgQlRGX0tJTkRfVFlQRV9UQUc6CgkJCS8q
IEFsbCBvdGhlciB0eXBlcyBhcmUgYWRkZWQgdG8gc3BsaXQgQlRGLiAqLwoJCQlpZiAoYWRkaW5n
X3RvX2Jhc2UpCgkJCQljb250aW51ZTsKCQkJZXJyID0gYnRmX2FkZF90eXBlKCZkaXN0LT5waXBl
LCB0KTsKCQkJYnJlYWs7CgkJZGVmYXVsdDoKCQkJcHJfd2FybigidW5leHBlY3RlZCBraW5kIHdo
ZW4gYWRkaW5nIGJhc2UgdHlwZSAnJXMnWyV1XSBvZiBraW5kIFsldV0gdG8gZGlzdGlsbGVkIGJh
c2UgQlRGLlxuIiwKCQkJCW5hbWUsIGksIGtpbmQpOwoJCQlyZXR1cm4gLUVJTlZBTDsKCgkJfQoJ
CWlmIChlcnIgPCAwKQoJCQlicmVhazsKCQlkaXN0LT5pZF9tYXBbaV0gPSBpZCsrOwoJfQoJcmV0
dXJuIGVycjsKfQoKLyogU3BsaXQgQlRGIGlkcyB3aXRob3V0IGEgbWFwcGluZyB3aWxsIGJlIHNo
aWZ0ZWQgZG93bndhcmRzIHNpbmNlIGRpc3RpbGxlZAogKiBiYXNlIEJURiBpcyBzbWFsbGVyIHRo
YW4gdGhlIG9yaWdpbmFsIGJhc2UgQlRGLiAgRm9yIHRob3NlIHRoYXQgaGF2ZSBhCiAqIG1hcHBp
bmcgKGVpdGhlciB0byBiYXNlIG9yIHVwZGF0ZWQgc3BsaXQgQlRGKSwgdXBkYXRlIHRoZSBpZCBi
YXNlZCBvbgogKiB0aGF0IG1hcHBpbmcuCiAqLwpzdGF0aWMgaW50IGJ0Zl91cGRhdGVfZGlzdGls
bGVkX3R5cGVfaWRzKHN0cnVjdCBidGZfZGlzdGlsbCAqZGlzdCwgX191MzIgaSkKewoJc3RydWN0
IGJ0Zl90eXBlICp0ID0gYnRmX3R5cGVfYnlfaWQoZGlzdC0+cGlwZS5kc3QsIGkpOwoJc3RydWN0
IGJ0Zl9maWVsZF9pdGVyIGl0OwoJX191MzIgKmlkOwoJaW50IGVycjsKCgllcnIgPSBidGZfZmll
bGRfaXRlcl9pbml0KCZpdCwgdCwgQlRGX0ZJRUxEX0lURVJfSURTKTsKCWlmIChlcnIpCgkJcmV0
dXJuIGVycjsKCXdoaWxlICgoaWQgPSBidGZfZmllbGRfaXRlcl9uZXh0KCZpdCkpKSB7CgkJaWYg
KGRpc3QtPmlkX21hcFsqaWRdKQoJCQkqaWQgPSBkaXN0LT5pZF9tYXBbKmlkXTsKCQllbHNlIGlm
ICgqaWQgPj0gZGlzdC0+c3BsaXRfc3RhcnRfaWQpCgkJCSppZCAtPSBkaXN0LT5kaWZmX2lkOwoJ
fQoJcmV0dXJuIDA7Cn0KCi8qIENyZWF0ZSB1cGRhdGVkIHNwbGl0IEJURiB3aXRoIGRpc3RpbGxl
ZCBiYXNlIEJURjsgZGlzdGlsbGVkIGJhc2UgQlRGCiAqIGNvbnNpc3RzIG9mIEJURiBpbmZvcm1h
dGlvbiByZXF1aXJlZCB0byBjbGFyaWZ5IHRoZSB0eXBlcyB0aGF0IHNwbGl0CiAqIEJURiByZWZl
cnMgdG8sIG9taXR0aW5nIHVubmVlZGVkIGRldGFpbHMuICBTcGVjaWZpY2FsbHkgaXQgd2lsbCBj
b250YWluCiAqIGJhc2UgdHlwZXMgYW5kIG1lbWJlcmxlc3MgZGVmaW5pdGlvbnMgb2YgbmFtZWQg
c3RydWN0cywgdW5pb25zIGFuZCBlbnVtZXJhdGVkCiAqIHR5cGVzLiBBc3NvY2lhdGVkIHJlZmVy
ZW5jZSB0eXBlcyBsaWtlIHBvaW50ZXJzLCBhcnJheXMgYW5kIGFub255bW91cwogKiBzdHJ1Y3Rz
LCB1bmlvbnMgYW5kIGVudW1lcmF0ZWQgdHlwZXMgd2lsbCBiZSBhZGRlZCB0byBzcGxpdCBCVEYu
CiAqIFNpemUgaXMgcmVjb3JkZWQgZm9yIG5hbWVkIHN0cnVjdC91bmlvbnMgdG8gaGVscCBndWlk
ZSBtYXRjaGluZyB0byB0aGUKICogdGFyZ2V0IGJhc2UgQlRGIGR1cmluZyBsYXRlciByZWxvY2F0
aW9uLgogKgogKiBUaGUgb25seSBjYXNlIHdoZXJlIHN0cnVjdHMsIHVuaW9ucyBvciBlbnVtZXJh
dGVkIHR5cGVzIGFyZSBmdWxseSByZXByZXNlbnRlZAogKiBpcyB3aGVuIHRoZXkgYXJlIGFub255
bW91czsgaW4gc3VjaCBjYXNlcywgdGhlIGFub255bW91cyB0eXBlIGlzIGFkZGVkIHRvCiAqIHNw
bGl0IEJURiBpbiBmdWxsLgogKgogKiBXZSByZXR1cm4gbmV3bHktY3JlYXRlZCBzcGxpdCBCVEYg
d2hlcmUgdGhlIHNwbGl0IEJURiByZWZlcnMgdG8gYSBuZXdseS1jcmVhdGVkCiAqIGRpc3RpbGxl
ZCBiYXNlIEJURi4gQm90aCBtdXN0IGJlIGZyZWVkIHNlcGFyYXRlbHkgYnkgdGhlIGNhbGxlci4K
ICovCmludCBidGZfX2Rpc3RpbGxfYmFzZShjb25zdCBzdHJ1Y3QgYnRmICpzcmNfYnRmLCBzdHJ1
Y3QgYnRmICoqbmV3X2Jhc2VfYnRmLAoJCSAgICAgIHN0cnVjdCBidGYgKipuZXdfc3BsaXRfYnRm
KQp7CglzdHJ1Y3QgYnRmICpuZXdfYmFzZSA9IE5VTEwsICpuZXdfc3BsaXQgPSBOVUxMOwoJY29u
c3Qgc3RydWN0IGJ0ZiAqb2xkX2Jhc2U7Cgl1bnNpZ25lZCBpbnQgbiA9IGJ0Zl9fdHlwZV9jbnQo
c3JjX2J0Zik7CglzdHJ1Y3QgYnRmX2Rpc3RpbGwgZGlzdCA9IHt9OwoJc3RydWN0IGJ0Zl90eXBl
ICp0OwoJaW50IGksIGVyciA9IDA7CgoJLyogc3JjIEJURiBtdXN0IGJlIHNwbGl0IEJURi4gKi8K
CW9sZF9iYXNlID0gYnRmX19iYXNlX2J0ZihzcmNfYnRmKTsKCWlmICghbmV3X2Jhc2VfYnRmIHx8
ICFuZXdfc3BsaXRfYnRmIHx8ICFvbGRfYmFzZSkKCQlyZXR1cm4gbGliYnBmX2VycigtRUlOVkFM
KTsKCgluZXdfYmFzZSA9IGJ0Zl9fbmV3X2VtcHR5KCk7CglpZiAoIW5ld19iYXNlKQoJCXJldHVy
biBsaWJicGZfZXJyKC1FTk9NRU0pOwoKCWJ0Zl9fc2V0X2VuZGlhbm5lc3MobmV3X2Jhc2UsIGJ0
Zl9fZW5kaWFubmVzcyhzcmNfYnRmKSk7CgoJZGlzdC5pZF9tYXAgPSBjYWxsb2Mobiwgc2l6ZW9m
KCpkaXN0LmlkX21hcCkpOwoJaWYgKCFkaXN0LmlkX21hcCkgewoJCWVyciA9IC1FTk9NRU07CgkJ
Z290byBkb25lOwoJfQoJZGlzdC5waXBlLnNyYyA9IHNyY19idGY7CglkaXN0LnBpcGUuZHN0ID0g
bmV3X2Jhc2U7CglkaXN0LnBpcGUuc3RyX29mZl9tYXAgPSBoYXNobWFwX19uZXcoYnRmX2RlZHVw
X2lkZW50aXR5X2hhc2hfZm4sIGJ0Zl9kZWR1cF9lcXVhbF9mbiwgTlVMTCk7CglpZiAoSVNfRVJS
KGRpc3QucGlwZS5zdHJfb2ZmX21hcCkpIHsKCQllcnIgPSAtRU5PTUVNOwoJCWdvdG8gZG9uZTsK
CX0KCWRpc3Quc3BsaXRfc3RhcnRfaWQgPSBidGZfX3R5cGVfY250KG9sZF9iYXNlKTsKCWRpc3Qu
c3BsaXRfc3RhcnRfc3RyID0gb2xkX2Jhc2UtPmhkci0+c3RyX2xlbjsKCgkvKiBQYXNzIG92ZXIg
c3JjIHNwbGl0IEJURjsgZ2VuZXJhdGUgdGhlIGxpc3Qgb2YgYmFzZSBCVEYgdHlwZSBpZHMgaXQK
CSAqIHJlZmVyZW5jZXM7IHRoZXNlIHdpbGwgY29uc3RpdHV0ZSBvdXIgZGlzdGlsbGVkIEJURiBz
ZXQgdG8gYmUKCSAqIGRpc3RyaWJ1dGVkIG92ZXIgYmFzZSBhbmQgc3BsaXQgQlRGIGFzIGFwcHJv
cHJpYXRlLgoJICovCglmb3IgKGkgPSBzcmNfYnRmLT5zdGFydF9pZDsgaSA8IG47IGkrKykgewoJ
CWVyciA9IGJ0Zl9hZGRfZGlzdGlsbGVkX3R5cGVfaWRzKCZkaXN0LCBpKTsKCQlpZiAoZXJyIDwg
MCkKCQkJZ290byBkb25lOwoJfQoJLyogTmV4dCBhZGQgdHlwZXMgZm9yIGVhY2ggb2YgdGhlIHJl
cXVpcmVkIHJlZmVyZW5jZXMgdG8gYmFzZSBCVEYgYW5kIHNwbGl0IEJURgoJICogaW4gdHVybi4K
CSAqLwoJZXJyID0gYnRmX2FkZF9kaXN0aWxsZWRfdHlwZXMoJmRpc3QpOwoJaWYgKGVyciA8IDAp
CgkJZ290byBkb25lOwoKCS8qIENyZWF0ZSBuZXcgc3BsaXQgQlRGIHdpdGggZGlzdGlsbGVkIGJh
c2UgQlRGIGFzIGl0cyBiYXNlOyB0aGUgZmluYWwKCSAqIHN0YXRlIGlzIHNwbGl0IEJURiB3aXRo
IGRpc3RpbGxlZCBiYXNlIEJURiB0aGF0IHJlcHJlc2VudHMgZW5vdWdoCgkgKiBhYm91dCBpdHMg
YmFzZSByZWZlcmVuY2VzIHRvIGFsbG93IGl0IHRvIGJlIHJlbG9jYXRlZCB3aXRoIHRoZSBiYXNl
CgkgKiBCVEYgYXZhaWxhYmxlLgoJICovCgluZXdfc3BsaXQgPSBidGZfX25ld19lbXB0eV9zcGxp
dChuZXdfYmFzZSk7CglpZiAoIW5ld19zcGxpdCkgewoJCWVyciA9IC1lcnJubzsKCQlnb3RvIGRv
bmU7Cgl9CglkaXN0LnBpcGUuZHN0ID0gbmV3X3NwbGl0OwoJLyogRmlyc3QgYWRkIGFsbCBzcGxp
dCB0eXBlcyAqLwoJZm9yIChpID0gc3JjX2J0Zi0+c3RhcnRfaWQ7IGkgPCBuOyBpKyspIHsKCQl0
ID0gYnRmX3R5cGVfYnlfaWQoc3JjX2J0ZiwgaSk7CgkJZXJyID0gYnRmX2FkZF90eXBlKCZkaXN0
LnBpcGUsIHQpOwoJCWlmIChlcnIgPCAwKQoJCQlnb3RvIGRvbmU7Cgl9CgkvKiBOb3cgYWRkIGRp
c3RpbGxlZCB0eXBlcyB0byBzcGxpdCBCVEYgdGhhdCBhcmUgbm90IGFkZGVkIHRvIGJhc2UuICov
CgllcnIgPSBidGZfYWRkX2Rpc3RpbGxlZF90eXBlcygmZGlzdCk7CglpZiAoZXJyIDwgMCkKCQln
b3RvIGRvbmU7CgoJLyogQWxsIHNwbGl0IEJURiBpZHMgd2lsbCBiZSBzaGlmdGVkIGRvd253YXJk
cyBzaW5jZSB0aGVyZSBhcmUgbGVzcyBiYXNlCgkgKiBCVEYgaWRzIGluIGRpc3RpbGxlZCBiYXNl
IEJURi4KCSAqLwoJZGlzdC5kaWZmX2lkID0gZGlzdC5zcGxpdF9zdGFydF9pZCAtIGJ0Zl9fdHlw
ZV9jbnQobmV3X2Jhc2UpOwoKCW4gPSBidGZfX3R5cGVfY250KG5ld19zcGxpdCk7CgkvKiBOb3cg
dXBkYXRlIGJhc2Uvc3BsaXQgQlRGIGlkcy4gKi8KCWZvciAoaSA9IDE7IGkgPCBuOyBpKyspIHsK
CQllcnIgPSBidGZfdXBkYXRlX2Rpc3RpbGxlZF90eXBlX2lkcygmZGlzdCwgaSk7CgkJaWYgKGVy
ciA8IDApCgkJCWJyZWFrOwoJfQpkb25lOgoJZnJlZShkaXN0LmlkX21hcCk7CgloYXNobWFwX19m
cmVlKGRpc3QucGlwZS5zdHJfb2ZmX21hcCk7CglpZiAoZXJyKSB7CgkJYnRmX19mcmVlKG5ld19z
cGxpdCk7CgkJYnRmX19mcmVlKG5ld19iYXNlKTsKCQlyZXR1cm4gbGliYnBmX2VycihlcnIpOwoJ
fQoJKm5ld19iYXNlX2J0ZiA9IG5ld19iYXNlOwoJKm5ld19zcGxpdF9idGYgPSBuZXdfc3BsaXQ7
CgoJcmV0dXJuIDA7Cn0KCmNvbnN0IHN0cnVjdCBidGZfaGVhZGVyICpidGZfaGVhZGVyKGNvbnN0
IHN0cnVjdCBidGYgKmJ0ZikKewoJcmV0dXJuIGJ0Zi0+aGRyOwp9Cgp2b2lkIGJ0Zl9zZXRfYmFz
ZV9idGYoc3RydWN0IGJ0ZiAqYnRmLCBjb25zdCBzdHJ1Y3QgYnRmICpiYXNlX2J0ZikKewoJYnRm
LT5iYXNlX2J0ZiA9IChzdHJ1Y3QgYnRmICopYmFzZV9idGY7CglidGYtPnN0YXJ0X2lkID0gYnRm
X190eXBlX2NudChiYXNlX2J0Zik7CglidGYtPnN0YXJ0X3N0cl9vZmYgPSBiYXNlX2J0Zi0+aGRy
LT5zdHJfbGVuOwp9CgppbnQgYnRmX19yZWxvY2F0ZShzdHJ1Y3QgYnRmICpidGYsIGNvbnN0IHN0
cnVjdCBidGYgKmJhc2VfYnRmKQp7CglpbnQgZXJyID0gYnRmX3JlbG9jYXRlKGJ0ZiwgYmFzZV9i
dGYsIE5VTEwpOwoKCWlmICghZXJyKQoJCWJ0Zi0+b3duc19iYXNlID0gZmFsc2U7CglyZXR1cm4g
bGliYnBmX2VycihlcnIpOwp9Cg==
--00000000000029f6ba062c6f0d3c--

