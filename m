Return-Path: <bpf+bounces-8807-lists+bpf=lfdr.de@vger.kernel.org>
X-Original-To: lists+bpf@lfdr.de
Delivered-To: lists+bpf@lfdr.de
Received: from ny.mirrors.kernel.org (ny.mirrors.kernel.org [147.75.199.223])
	by mail.lfdr.de (Postfix) with ESMTPS id CB9FB78A123
	for <lists+bpf@lfdr.de>; Sun, 27 Aug 2023 21:20:58 +0200 (CEST)
Received: from smtp.subspace.kernel.org (wormhole.subspace.kernel.org [52.25.139.140])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by ny.mirrors.kernel.org (Postfix) with ESMTPS id F23151C20952
	for <lists+bpf@lfdr.de>; Sun, 27 Aug 2023 19:20:57 +0000 (UTC)
Received: from localhost.localdomain (localhost.localdomain [127.0.0.1])
	by smtp.subspace.kernel.org (Postfix) with ESMTP id AF7EE14261;
	Sun, 27 Aug 2023 19:20:49 +0000 (UTC)
X-Original-To: bpf@vger.kernel.org
Received: from smtp.kernel.org (aws-us-west-2-korg-mail-1.web.codeaurora.org [10.30.226.201])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 4D924111D
	for <bpf@vger.kernel.org>; Sun, 27 Aug 2023 19:20:47 +0000 (UTC)
Received: by smtp.kernel.org (Postfix) with ESMTPSA id 50982C433C7;
	Sun, 27 Aug 2023 19:20:47 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
	s=k20201202; t=1693164047;
	bh=R0yz9DYWWTF2JfkG/4yrB5YqEhnyNDO2Qx4lGAj3G8o=;
	h=From:To:Cc:Subject:In-Reply-To:References:Date:From;
	b=Gn4fHzjutkm+Ah9eK4/+X5VRkqcVs72ObgB6xwovTEYUbeD/vFf0BVWr4h0Crvqbh
	 77/IM2PbfLgVOt7DmGJsrcmvDRf8LXlZgSlrUD1QSBexwtTS4+FAH02Wb1SbxY1fua
	 twNjIDgbmbMeJxsa85cEOJEy6eauNLD7S70Qu36z6vw7wKi3/T36i6SOPQjc47g84Z
	 GOHnJRwi/blt+92dYdE8VMhqGhEP9rmul+/DlPycbD9U2Lonl2UPcd6vf+MlS+kpSt
	 /l7wB2BUeDw2GG8Ga6Zzj7YEA73qsSbLQW7jx895NSzJlfeJ+Y0nykJxfziehCbwmC
	 H2YnEAZ3ygcOQ==
From: =?utf-8?B?QmrDtnJuIFTDtnBlbA==?= <bjorn@kernel.org>
To: Nam Cao <namcaov@gmail.com>
Cc: linux-riscv@lists.infradead.org, Guo Ren <guoren@kernel.org>,
 bpf@vger.kernel.org, Hou Tao <houtao@huaweicloud.com>,
 yonghong.song@linux.dev, Alexei Starovoitov
 <alexei.starovoitov@gmail.com>, Puranjay Mohan <puranjay12@gmail.com>
Subject: Re: RISC-V uprobe bug (Was: Re: WARNING: CPU: 3 PID: 261 at
 kernel/bpf/memalloc.c:342)
In-Reply-To: <ZOsZtH+5P0/R6kvd@nam-dell>
References: <87jztjmmy4.fsf@all.your.base.are.belong.to.us>
 <87v8d19aun.fsf@all.your.base.are.belong.to.us>
 <ZOpAjkTtA4jYtuIa@nam-dell>
 <87cyz8sy4y.fsf@all.your.base.are.belong.to.us>
 <ZOsKukBz8i+h4Y8j@nam-dell>
 <87y1hw7t5p.fsf@all.your.base.are.belong.to.us>
 <ZOsZtH+5P0/R6kvd@nam-dell>
Date: Sun, 27 Aug 2023 21:20:44 +0200
Message-ID: <87jztgwaur.fsf@all.your.base.are.belong.to.us>
Precedence: bulk
X-Mailing-List: bpf@vger.kernel.org
List-Id: <bpf.vger.kernel.org>
List-Subscribe: <mailto:bpf+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:bpf+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: quoted-printable

Nam Cao <namcaov@gmail.com> writes:

> On Sun, Aug 27, 2023 at 11:04:34AM +0200, Bj=C3=B6rn T=C3=B6pel wrote:
>> Nam Cao <namcaov@gmail.com> writes:
>>=20
>> > On Sun, Aug 27, 2023 at 10:11:25AM +0200, Bj=C3=B6rn T=C3=B6pel wrote:
>> >> The default implementation of is_trap_insn() which RISC-V is using ca=
lls
>> >> is_swbp_insn(), which is doing what your patch does. Your patch does =
not
>> >> address the issue.
>> >
>> > is_swbp_insn() does this:
>> >
>> >         #ifdef CONFIG_RISCV_ISA_C
>> >                 return (*insn & 0xffff) =3D=3D UPROBE_SWBP_INSN;
>> >         #else
>> >                 return *insn =3D=3D UPROBE_SWBP_INSN;
>> >         #endif
>> >
>> > ...so it doesn't even check for 32-bit ebreak if C extension is on. My=
 patch
>> > is not the same.
>>=20
>> Ah, was too quick.
>>=20
>> AFAIU uprobes *always* uses c.ebreak when CONFIG_RISCV_ISA_C is set, and
>> ebreak otherwise. That's the reason is_swbp_insn() is implemented like
>> that.
>
> That's what I understand too.
>
>> If that's not the case, there's a another bug, that your patches
>> addresses.
>
> I think it's a bug regardless. is_trap_insn() is used by uprobes to figur=
e out
> if there is an instruction that generates trap exception, not just instru=
ctions
> that are "SWBP". The reason is because when there is a trap, but uprobes =
doesn't
> see a probe installed here, it needs is_trap_insn() to figure out if the =
trap
> is generated by ebreak from something else, or because the probe is just =
removed.
> In the latter case, uprobes will return back, because probe has already b=
een removed,
> so it should be safe to do so. That's why I think the incorrect is_swbp_i=
nsn()
> would cause a hang, because uprobes incorrectly thinks there is no ebreak=
 there,
> so it should be okay to go back, but there actually is.
>
> So, from my understanding, if uprobes encounter a 32-bit ebreak for any r=
eason,
> the kernel would hang. I think your patch is a great addition nonetheless=
, but I
> am guessing that it only masks the problem by preventing uprobes from see=
ing the
> 32-bit ebreak in the specific test, not really solve it. So, if there is =
a 32-bit
> ebreak in userspace, the bug still causes the kernel to hang.
>
> I am still quite confident of my logic, so I would be very suprised if my=
 fix
> doesn't solve the reported hang. Do you mind testing my patch? My potato =
of a
> laptop unfortunately cannot run the test :(

Maybe I wasn't clear, sorry for that! I did take the patch for a spin,
and it did not solve this particular problem.

When we're taking a trap from *kernel*mode, we should never deal with
uprobes at all. Have a look at uprobe_pre_sstep_notifier(), this
function returns 1, which then means that the trap handler exit
premature.

The code you're referring to (called from uprobe_notify_resume()), and
will never be entered, because we're not exiting the trap to
userland. Have a look in kernel/entry/common.c (search for
e.g. TIF_UPROBE).

Now, for your concern, which I see as a potential different bug. Not at
all related to my issue "trap from kernelmode touches uprobe
incorrectly"; A "random" ebreak from *userland* is trapped, when uprobes
is enabled will set the kernel in a hang. I suggest you construct try to
write a simple program to reproduce this!

I had a quick look in the uprobe handling code, and AFAIU the was used
when installing the uprobe as an additional check, and when searching
for an active uprobe. I'm still a bit puzzled how the issue you're
describing could trigger. A reproducer would help!


Cheers,
Bj=C3=B6rn

