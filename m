Return-Path: <bpf+bounces-58633-lists+bpf=lfdr.de@vger.kernel.org>
X-Original-To: lists+bpf@lfdr.de
Delivered-To: lists+bpf@lfdr.de
Received: from ny.mirrors.kernel.org (ny.mirrors.kernel.org [147.75.199.223])
	by mail.lfdr.de (Postfix) with ESMTPS id DEED6ABEA63
	for <lists+bpf@lfdr.de>; Wed, 21 May 2025 05:22:00 +0200 (CEST)
Received: from smtp.subspace.kernel.org (relay.kernel.org [52.25.139.140])
	(using TLSv1.2 with cipher ECDHE-ECDSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by ny.mirrors.kernel.org (Postfix) with ESMTPS id 9A0A54E2A7E
	for <lists+bpf@lfdr.de>; Wed, 21 May 2025 03:22:01 +0000 (UTC)
Received: from localhost.localdomain (localhost.localdomain [127.0.0.1])
	by smtp.subspace.kernel.org (Postfix) with ESMTP id 8EF3822DF8D;
	Wed, 21 May 2025 03:21:07 +0000 (UTC)
X-Original-To: bpf@vger.kernel.org
Received: from 66-220-144-178.mail-mxout.facebook.com (66-220-144-178.mail-mxout.facebook.com [66.220.144.178])
	(using TLSv1.2 with cipher ECDHE-RSA-AES128-GCM-SHA256 (128/128 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id D92C122D9F6
	for <bpf@vger.kernel.org>; Wed, 21 May 2025 03:21:03 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=66.220.144.178
ARC-Seal:i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1747797667; cv=none; b=oMi53KGm90piA2GiZRG4vF850eOQnm736g2o92jIo1p9rC8ko5c2b9CqBBtRLqS+J+n4j5kvCvOqPpPe05Gwkn+S0qRAzVP05wGzdhZcMwo653oinf3voQDwX+E/pyodDdGU+YEz9+tjQ3uUYk8EZbUy60a0l4stn2emLnQ0BA8=
ARC-Message-Signature:i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1747797667; c=relaxed/simple;
	bh=U0ljfMwpbkZ6eyRPk696G3ijBUjLirZar1B4xN4VR2E=;
	h=From:To:Cc:Subject:Date:Message-ID:In-Reply-To:References:
	 MIME-Version; b=sNZ6eJBd3b/wPQDQKl/C3/fY/pVvUBG7yYsr/tszZYdjEYCObKz3/AdVjSXiPUcEijqBaiQPq4ZuLLdrTMVrgru5IGjzCu+ilswS/5E/xKv91VCabyOeBkolv96pvxs0u3rHro0G5VysQhOtUsB4KSvnwFPknhjtBOHKGWTfb0o=
ARC-Authentication-Results:i=1; smtp.subspace.kernel.org; dmarc=fail (p=none dis=none) header.from=linux.dev; spf=fail smtp.mailfrom=linux.dev; arc=none smtp.client-ip=66.220.144.178
Authentication-Results: smtp.subspace.kernel.org; dmarc=fail (p=none dis=none) header.from=linux.dev
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=linux.dev
Received: by devvm16039.vll0.facebook.com (Postfix, from userid 128203)
	id 0F9EE7E5405E; Tue, 20 May 2025 20:21:03 -0700 (PDT)
From: Yonghong Song <yonghong.song@linux.dev>
To: bpf@vger.kernel.org
Cc: Alexei Starovoitov <ast@kernel.org>,
	Andrii Nakryiko <andrii@kernel.org>,
	Daniel Borkmann <daniel@iogearbox.net>,
	kernel-team@fb.com,
	Martin KaFai Lau <martin.lau@kernel.org>
Subject: [PATCH bpf-next v4 3/3] selftests/bpf: Add unit tests with bpf_unreachable() kfunc
Date: Tue, 20 May 2025 20:21:03 -0700
Message-ID: <20250521032103.1017331-1-yonghong.song@linux.dev>
X-Mailer: git-send-email 2.47.1
In-Reply-To: <20250521032047.1015381-1-yonghong.song@linux.dev>
References: <20250521032047.1015381-1-yonghong.song@linux.dev>
Precedence: bulk
X-Mailing-List: bpf@vger.kernel.org
List-Id: <bpf.vger.kernel.org>
List-Subscribe: <mailto:bpf+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:bpf+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Transfer-Encoding: quoted-printable

The compiler support for bpf_unreachable() ([1]) will be in llvm21,
but the current kernel will have a build failure with llvm21 ([2]).
So all unit tests have explicit references to bpf_unreachable().
The test where bpf_unreachable() is generated by compiler will be
provided later.

  [1] https://github.com/llvm/llvm-project/pull/131731
  [2] https://patchew.org/linux/20250506-default-const-init-clang-v2-1-fc=
fb69703264@kernel.org/

Signed-off-by: Yonghong Song <yonghong.song@linux.dev>
---
 .../selftests/bpf/prog_tests/verifier.c       |  2 +
 .../bpf/progs/verifier_bpf_unreachable.c      | 61 +++++++++++++++++++
 2 files changed, 63 insertions(+)
 create mode 100644 tools/testing/selftests/bpf/progs/verifier_bpf_unreac=
hable.c

diff --git a/tools/testing/selftests/bpf/prog_tests/verifier.c b/tools/te=
sting/selftests/bpf/prog_tests/verifier.c
index e66a57970d28..790fff264ec6 100644
--- a/tools/testing/selftests/bpf/prog_tests/verifier.c
+++ b/tools/testing/selftests/bpf/prog_tests/verifier.c
@@ -14,6 +14,7 @@
 #include "verifier_bounds_deduction_non_const.skel.h"
 #include "verifier_bounds_mix_sign_unsign.skel.h"
 #include "verifier_bpf_get_stack.skel.h"
+#include "verifier_bpf_unreachable.skel.h"
 #include "verifier_bswap.skel.h"
 #include "verifier_btf_ctx_access.skel.h"
 #include "verifier_btf_unreliable_prog.skel.h"
@@ -148,6 +149,7 @@ void test_verifier_bounds_deduction(void)     { RUN(v=
erifier_bounds_deduction);
 void test_verifier_bounds_deduction_non_const(void)     { RUN(verifier_b=
ounds_deduction_non_const); }
 void test_verifier_bounds_mix_sign_unsign(void) { RUN(verifier_bounds_mi=
x_sign_unsign); }
 void test_verifier_bpf_get_stack(void)        { RUN(verifier_bpf_get_sta=
ck); }
+void test_verifier_bpf_unreachable(void)      { RUN(verifier_bpf_unreach=
able); }
 void test_verifier_bswap(void)                { RUN(verifier_bswap); }
 void test_verifier_btf_ctx_access(void)       { RUN(verifier_btf_ctx_acc=
ess); }
 void test_verifier_btf_unreliable_prog(void)  { RUN(verifier_btf_unrelia=
ble_prog); }
diff --git a/tools/testing/selftests/bpf/progs/verifier_bpf_unreachable.c=
 b/tools/testing/selftests/bpf/progs/verifier_bpf_unreachable.c
new file mode 100644
index 000000000000..c8b14b6022a5
--- /dev/null
+++ b/tools/testing/selftests/bpf/progs/verifier_bpf_unreachable.c
@@ -0,0 +1,61 @@
+// SPDX-License-Identifier: GPL-2.0
+/* Copyright (c) 2025 Meta Platforms, Inc. and affiliates. */
+#include <vmlinux.h>
+#include <bpf/bpf_helpers.h>
+#include "bpf_misc.h"
+
+SEC("socket")
+__description("bpf_unreachable with simple c code")
+__failure __msg("unexpected bpf_unreachable() due to uninitialized varia=
ble?")
+void bpf_unreachable_with_simple_c(void)
+{
+	bpf_unreachable();
+}
+
+SEC("socket")
+__description("bpf_unreachable as the second-from-last insn")
+__failure __msg("unexpected bpf_unreachable() due to uninitialized varia=
ble?")
+__naked void bpf_unreachable_at_func_end(void)
+{
+	asm volatile (
+	"r0 =3D 0;"
+	"call %[bpf_unreachable];"
+	"exit;"
+	:
+	: __imm(bpf_unreachable)
+	: __clobber_all);
+}
+
+SEC("socket")
+__description("dead code bpf_unreachable() in the middle of code")
+__success
+__naked void dead_bpf_unreachable_in_middle(void)
+{
+	asm volatile (
+	"r0 =3D 0;"
+	"if r0 =3D=3D 0 goto +1;"
+	"call %[bpf_unreachable];"
+	"r0 =3D 2;"
+	"exit;"
+	:
+	: __imm(bpf_unreachable)
+	: __clobber_all);
+}
+
+SEC("socket")
+__description("reachable bpf_unreachable() in the middle of code")
+__failure __msg("unexpected bpf_unreachable() due to uninitialized varia=
ble?")
+__naked void live_bpf_unreachable_in_middle(void)
+{
+	asm volatile (
+	"r0 =3D 0;"
+	"if r0 =3D=3D 1 goto +1;"
+	"call %[bpf_unreachable];"
+	"r0 =3D 2;"
+	"exit;"
+	:
+	: __imm(bpf_unreachable)
+	: __clobber_all);
+}
+
+char _license[] SEC("license") =3D "GPL";
--=20
2.47.1


