Return-Path: <bpf-owner@vger.kernel.org>
X-Original-To: lists+bpf@lfdr.de
Delivered-To: lists+bpf@lfdr.de
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by mail.lfdr.de (Postfix) with ESMTP id 7F887340B0C
	for <lists+bpf@lfdr.de>; Thu, 18 Mar 2021 18:09:28 +0100 (CET)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S232009AbhCRRIz (ORCPT <rfc822;lists+bpf@lfdr.de>);
        Thu, 18 Mar 2021 13:08:55 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:60798 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S231998AbhCRRIr (ORCPT <rfc822;bpf@vger.kernel.org>);
        Thu, 18 Mar 2021 13:08:47 -0400
Received: from mail-yb1-xb2e.google.com (mail-yb1-xb2e.google.com [IPv6:2607:f8b0:4864:20::b2e])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id B576BC06174A
        for <bpf@vger.kernel.org>; Thu, 18 Mar 2021 10:08:47 -0700 (PDT)
Received: by mail-yb1-xb2e.google.com with SMTP id v107so2528228ybi.0
        for <bpf@vger.kernel.org>; Thu, 18 Mar 2021 10:08:47 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc:content-transfer-encoding;
        bh=ULfobQRcVBzVb52stkvQMARqlGFp+R2V6KtAMJJusI8=;
        b=dBXTgeN+IZiAjPifZC1gwzjMkykTcxhF/3I6ifJ/OJZQaQnfe7pmUscdD6sM70/KGC
         Xisqp8hNU8/R2CaosXknDqrQEV8djuuckpalgYSQuNrGjzj64j21IxGgan1Vbppf8JYZ
         2Twmr5pWuz/eLMJSjSLDbWN+gyhhroFJfkatUDhchPqfxhna9bbET1jktVqK/Ru/Ti8M
         Lpxvk2SW4A8vJSAW6iLgQxjZ/+1G+vdXCwIj/i2UsNbn/G0sgO1e/Nu7V0j735UVMgsR
         XFKPo2UFJC0jILmEmojDOgJmvYkThmcM9CuP/V0bcQxcPd1iSoH6zmptDb1u9AZpzQxF
         S87g==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc:content-transfer-encoding;
        bh=ULfobQRcVBzVb52stkvQMARqlGFp+R2V6KtAMJJusI8=;
        b=GHhky+DJsRolIz9yGIf8Ffz19JRogwJ8kTz7uhJ/RDl/xoQelHGjkad0FEeaF+nWoY
         LM8QIR/NCsskMDb6VmU6SQPqNVzlXma8MkF7mpShHT7U0/QQbSH5c3k9VLcVYvdu+82d
         rO/nkCmtX9lzvApPqu4N1ChWeur1YrmSKuLVdODAD2qVN9H1MDe4A6q/MSgOiFt1n+Oh
         r3LU+LQpG6ke3PZu+yQNlb73cBPqKpic2Z0iVZTktemQSWBV2JUybeNSHoO9au11dXpD
         MtHOyggHyl7gM0sFCyys+JEIECMZEee+WTZ6ktLS+/SrRm96W9+jvFLDPK9KWyAlVBl5
         s5AQ==
X-Gm-Message-State: AOAM5339pqUsyZ84NIv3wcMo5hrkHMN0Bqa8sXhxKdbPRucIdPwDdOg4
        CEAA0OfHR3ohiuquEFNCG+m68h4kSZh/dgnGjqyj01+dV96bPA==
X-Google-Smtp-Source: ABdhPJy9trKq4tJj5FCXkS7LAg4ZcTaTs6vpaiyBmMjU7oR3vP5aqGQMuaoD+U7kpeyO3qPhdNpWxBxqsGxhs1Y/xU8=
X-Received: by 2002:a25:874c:: with SMTP id e12mr350616ybn.403.1616087326940;
 Thu, 18 Mar 2021 10:08:46 -0700 (PDT)
MIME-Version: 1.0
References: <20210318122700.396574-1-jean-philippe@linaro.org>
In-Reply-To: <20210318122700.396574-1-jean-philippe@linaro.org>
From:   Andrii Nakryiko <andrii.nakryiko@gmail.com>
Date:   Thu, 18 Mar 2021 10:08:36 -0700
Message-ID: <CAEf4BzZzXxYxjzH86VYh0TvpW8u2+4qgAD1wMkRncYiiJ+2-0g@mail.gmail.com>
Subject: Re: [PATCH bpf] libbpf: Fix BTF dump of pointer-to-array-of-struct
To:     Jean-Philippe Brucker <jean-philippe@linaro.org>
Cc:     Alexei Starovoitov <ast@kernel.org>,
        Daniel Borkmann <daniel@iogearbox.net>,
        Andrii Nakryiko <andrii@kernel.org>, Martin Lau <kafai@fb.com>,
        Song Liu <songliubraving@fb.com>, Yonghong Song <yhs@fb.com>,
        john fastabend <john.fastabend@gmail.com>,
        KP Singh <kpsingh@kernel.org>, bpf <bpf@vger.kernel.org>
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable
Precedence: bulk
List-ID: <bpf.vger.kernel.org>
X-Mailing-List: bpf@vger.kernel.org

On Thu, Mar 18, 2021 at 5:31 AM Jean-Philippe Brucker
<jean-philippe@linaro.org> wrote:
>
> The vmlinux.h generated from BTF is invalid when building
> drivers/phy/ti/phy-gmii-sel.c with clang:
>
> vmlinux.h:61702:27: error: array type has incomplete element type =E2=80=
=98struct reg_field=E2=80=99
> 61702 |  const struct reg_field (*regfields)[3];
>       |                           ^~~~~~~~~
>
> bpftool generates a forward declaration for this struct regfield, which
> compilers aren't happy about. Here's a simplified reproducer:
>
>         struct inner {
>                 int val;
>         };
>         struct outer {
>                 struct inner (*ptr_to_array)[2];
>         };
>
>         static struct inner a[2];
>         struct outer b =3D {
>                 .ptr_to_array =3D &a,
>         };
>
> After build with clang -> bpftool btf dump c -> clang/gcc:
> ./def-clang.h:11:23: error: array has incomplete element type 'struct inn=
er'
>         struct inner (*ptr_to_array)[2];
>
> Member ptr_to_array of struct outer is a pointer to an array of struct
> inner. In the DWARF generated by clang, struct outer appears before
> struct inner, so when converting BTF of struct outer into C, bpftool
> issues a forward declaration of struct inner. With GCC the DWARF info is
> reversed so struct inner gets fully defined.
>
> That forward declaration is not sufficient when compilers handle an
> array of the struct, even when it's only used through a pointer. Note
> that we can trigger the same issue with an intermediate typedef:
>
>         struct inner {
>                 int val;
>         };
>         typedef struct inner inner2_t[2];
>         struct outer {
>                 inner2_t *ptr_to_array;
>         };
>
>         static inner2_t a;
>         struct outer b =3D {
>                 .ptr_to_array =3D &a,
>         };
>
> Becomes:
>
>         struct inner;
>         typedef struct inner inner2_t[2];
>
> And causes:
>
> ./def-clang.h:10:30: error: array has incomplete element type 'struct inn=
er'
>         typedef struct inner inner2_t[2];
>
> To fix this, clear through_ptr whenever we encounter an intermediate
> array, to make the inner struct part of a strong link and force full
> declaration.
>

Yeah, makes total sense. I missed that array forces a strong link
between types. The fix looks good, but can you please add those two
cases to selftests? There is progs/btf_dump_test_case_syntax.c that
probably can be extended. Please think about a way to specify types
such that the order of BTF types doesn't matter and the issue has to
be handled always.

> Fixes: 351131b51c7a ("libbpf: add btf_dump API for BTF-to-C conversion")
> Signed-off-by: Jean-Philippe Brucker <jean-philippe@linaro.org>
> ---
>  tools/lib/bpf/btf_dump.c | 2 +-
>  1 file changed, 1 insertion(+), 1 deletion(-)
>
> diff --git a/tools/lib/bpf/btf_dump.c b/tools/lib/bpf/btf_dump.c
> index 2f9d685bd522..0911aea4cdbe 100644
> --- a/tools/lib/bpf/btf_dump.c
> +++ b/tools/lib/bpf/btf_dump.c
> @@ -462,7 +462,7 @@ static int btf_dump_order_type(struct btf_dump *d, __=
u32 id, bool through_ptr)
>                 return err;
>
>         case BTF_KIND_ARRAY:
> -               return btf_dump_order_type(d, btf_array(t)->type, through=
_ptr);
> +               return btf_dump_order_type(d, btf_array(t)->type, false);
>
>         case BTF_KIND_STRUCT:
>         case BTF_KIND_UNION: {
> --
> 2.30.2
>
