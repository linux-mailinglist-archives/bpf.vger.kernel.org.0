Return-Path: <bpf+bounces-44422-lists+bpf=lfdr.de@vger.kernel.org>
X-Original-To: lists+bpf@lfdr.de
Delivered-To: lists+bpf@lfdr.de
Received: from am.mirrors.kernel.org (am.mirrors.kernel.org [147.75.80.249])
	by mail.lfdr.de (Postfix) with ESMTPS id 88FE89C2C56
	for <lists+bpf@lfdr.de>; Sat,  9 Nov 2024 12:56:10 +0100 (CET)
Received: from smtp.subspace.kernel.org (wormhole.subspace.kernel.org [52.25.139.140])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by am.mirrors.kernel.org (Postfix) with ESMTPS id 408F01F21D6E
	for <lists+bpf@lfdr.de>; Sat,  9 Nov 2024 11:56:10 +0000 (UTC)
Received: from localhost.localdomain (localhost.localdomain [127.0.0.1])
	by smtp.subspace.kernel.org (Postfix) with ESMTP id 0155C18EFF8;
	Sat,  9 Nov 2024 11:55:49 +0000 (UTC)
X-Original-To: bpf@vger.kernel.org
Received: from mail.itouring.de (mail.itouring.de [85.10.202.141])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 7EEB115443D
	for <bpf@vger.kernel.org>; Sat,  9 Nov 2024 11:55:44 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=85.10.202.141
ARC-Seal:i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1731153348; cv=none; b=fhFFlzyxYI7qlHBmsjBhSuDkCObfqPn8aL06LJdzxofa4dKsixYiyRQ0gF7qjF43He9VBgGciemNF/Ua0Mbs92v9OMfRxs+CMboXIVtZIHG6mTEntc47Ah05rSV9osOAON4ewuVy6J6KzcjiYqFoCDYuoSN0fLLLAiuz7yg35T0=
ARC-Message-Signature:i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1731153348; c=relaxed/simple;
	bh=6Ej6ejPEZkOpUFC9v1VtSXJl6v8WRzPbIdWo2CeB70U=;
	h=To:From:Subject:Message-ID:Date:MIME-Version:Content-Type; b=dn3+w6wP0HekD9xKbm/T7yNZE/HCxXLWPm7cd6sJZcDseWwsd3Wuyszmp9L1U9Zyb4xBQB4aoLIXPM9EQC8DtF72zzI2k4mCdnMVdCKM/PBtfFFoan4YkNtWtilW3urYKrD0yKexM38HsbyZ+vuR0P7Q5qVAImqGHex+R5rPY2g=
ARC-Authentication-Results:i=1; smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=applied-asynchrony.com; spf=pass smtp.mailfrom=applied-asynchrony.com; arc=none smtp.client-ip=85.10.202.141
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=applied-asynchrony.com
Authentication-Results: smtp.subspace.kernel.org; spf=pass smtp.mailfrom=applied-asynchrony.com
Received: from tux.applied-asynchrony.com (p5ddd7b29.dip0.t-ipconnect.de [93.221.123.41])
	by mail.itouring.de (Postfix) with ESMTPSA id A993F11DD55
	for <bpf@vger.kernel.org>; Sat, 09 Nov 2024 12:55:36 +0100 (CET)
Received: from [192.168.100.221] (hho.applied-asynchrony.com [192.168.100.221])
	by tux.applied-asynchrony.com (Postfix) with ESMTP id 152FD600BC989
	for <bpf@vger.kernel.org>; Sat, 09 Nov 2024 12:55:36 +0100 (CET)
To: bpf@vger.kernel.org
From: =?UTF-8?Q?Holger_Hoffst=c3=a4tte?= <holger@applied-asynchrony.com>
Subject: Using gcc-bpf for bpftool: problems with CO-RE feature detection
Organization: Applied Asynchrony, Inc.
Message-ID: <8665818f-8a32-3796-1efc-1a9e5d036f18@applied-asynchrony.com>
Date: Sat, 9 Nov 2024 12:55:36 +0100
Precedence: bulk
X-Mailing-List: bpf@vger.kernel.org
List-Id: <bpf.vger.kernel.org>
List-Subscribe: <mailto:bpf+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:bpf+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Language: en-US
Content-Transfer-Encoding: 7bit

Hi,

I'm trying to use Gentoo's bpf-toolchain - basically just gcc built for
the BPF target - to build the CO-RE support in bpftool, in order to
provide an alternative to clang.

This currently fails because the feature detection relies on a comment
in the generated BPF assembly, which gcc does not seem to generate.

While I'm using the Github mirror for bpftool, the same check is
being done in the kernel build, so it affects both.

Our tracker bug with full output etc. is: https://bugs.gentoo.org/943113

Basically the problem boils down to:

	.long	16777248                        # 0x1000020
	.long	9                               # BTF_KIND_VAR(id = 3)
	.long	234881024                       # 0xe000000

generated by clang (19.1.3)

vs.

	.4byte	0x1000020
	.4byte	0x9
	.4byte	0xe000000

generated by gcc (14.2.0).

As the values themselves are correct, the problem is really just
the missing debug information in gcc's output. So far I've tried
every option I could find, but to no avail. I have no idea whether
this is because I'm holding it wrong, gcc cannot do it for the bpf
target (yet?) or anything else.

Does anybody know how I can convince gcc to generate symbol comments?
Alternatively can we find a better way to verify the generated output
instead of grepping for a comment?

This is not really a bug, but IMHO having an alternative toolchain to
build BPF seems like a good idea in general. Gentoo's bpf-toolchain
package was initially made to build dtrace, and seems to be working
fine so far.

Thanks for any suggestions!

cheers
Holger

