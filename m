Return-Path: <bpf-owner@vger.kernel.org>
X-Original-To: lists+bpf@lfdr.de
Delivered-To: lists+bpf@lfdr.de
Received: from out1.vger.email (out1.vger.email [IPv6:2620:137:e000::1:20])
	by mail.lfdr.de (Postfix) with ESMTP id 37D59697E21
	for <lists+bpf@lfdr.de>; Wed, 15 Feb 2023 15:12:53 +0100 (CET)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S229504AbjBOOMu (ORCPT <rfc822;lists+bpf@lfdr.de>);
        Wed, 15 Feb 2023 09:12:50 -0500
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:51602 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S229468AbjBOOMt (ORCPT <rfc822;bpf@vger.kernel.org>);
        Wed, 15 Feb 2023 09:12:49 -0500
Received: from mail-lf1-x12d.google.com (mail-lf1-x12d.google.com [IPv6:2a00:1450:4864:20::12d])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 8D1BEB45C
        for <bpf@vger.kernel.org>; Wed, 15 Feb 2023 06:12:47 -0800 (PST)
Received: by mail-lf1-x12d.google.com with SMTP id d23so167828lfl.6
        for <bpf@vger.kernel.org>; Wed, 15 Feb 2023 06:12:47 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20210112;
        h=content-transfer-encoding:to:subject:message-id:date:from
         :mime-version:from:to:cc:subject:date:message-id:reply-to;
        bh=DbJhBhmY7bnyYfuDF36RRfyQFCHPwauFmgODj7PYbs8=;
        b=P4I7BFep9G6gXj6tzqnHWfjcIeyK/Bo37OVWMYBeWb5xrYMfDEur9xvLcGjP6z32vX
         iQv38qnN+/F3nwzbFCeyBn0+DiBwZ3cWlFz5eEeLyqUg37h7MMyCpwT2jIXBzZlqda8V
         BbHyevrwKHZGJEnzA0aZaxms4Uhs7TRESOmPJl1KlqdAEqnDh+g/LTw+vHS/zKbO6Yv2
         MuoVExTukLUiQLn19WyjRKPkqm3x/IYwdJTEf/YPsRQM6eRtv8kVz6hjxmaedWXtUS1U
         /DQMn/uMqY0Q60rYdaXuTl2BGIKCPz6QEdez6nRBTEIxd8Ya1vMuYmWRFZvmfr4Hly+W
         yrZw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20210112;
        h=content-transfer-encoding:to:subject:message-id:date:from
         :mime-version:x-gm-message-state:from:to:cc:subject:date:message-id
         :reply-to;
        bh=DbJhBhmY7bnyYfuDF36RRfyQFCHPwauFmgODj7PYbs8=;
        b=cslocBKt6MGcqkPyIodFDzBuNAqj1RqAEUoQVVP72onYeim4TwVowWw4Q/u+PXnfoM
         93c3+gehVFXPbPOYtidJ5K08A0wkm1smH2ZiIHQK2KGYON+CfgUEPTsQcCqX7UZhYWn2
         +RNT/oWcfEEzieGCDo3h58Re1eokpv7T87jC0+fQTfBFfbEcWEAf91myj0K277GH45Th
         vm4q8ow2vxR+DfcpypvvFTqrn5QPVU+TGFg4SYKSiPaLtqdqThn3Ljt+NaPJlssgDeof
         rvE3kTJuWCoIEB6J5jC+vvSUSmJX0aKWffNjHc67yu8njY5sENfhIkTeiuOwILWPh0tE
         fNrg==
X-Gm-Message-State: AO0yUKVh+cUORPsKNUr6jwZavPzaN7HPhOspxKociB7Go9xfW5lbxbnZ
        eAhaR4ZI2FVsxjfTNrpDYfO8au35LippUKT4qI52oIW+x0+8Jg==
X-Google-Smtp-Source: AK7set9F48UhYmYApZdddOBb2JCCENSLiat9Un1+tRj1jy2VXy1pRp9oityrGtyEhrlg00mZakzDejqh/4HZ+z7jny8=
X-Received: by 2002:ac2:530e:0:b0:4db:266c:4337 with SMTP id
 c14-20020ac2530e000000b004db266c4337mr598386lfh.1.1676470365391; Wed, 15 Feb
 2023 06:12:45 -0800 (PST)
MIME-Version: 1.0
From:   Puranjay Mohan <puranjay12@gmail.com>
Date:   Wed, 15 Feb 2023 15:12:34 +0100
Message-ID: <CANk7y0joRFw2F4iAuN9r-dWWMvOmbFZz_J4rhGhgVFjdnxPTYw@mail.gmail.com>
Subject: [RFC] libbbpf/bpftool: Support 32-bit Architectures.
To:     bpf@vger.kernel.org, quentin@isovalent.com, ast@kernel.org,
        daniel@iogearbox.net, memxor@gmail.com
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable
X-Spam-Status: No, score=-1.8 required=5.0 tests=BAYES_00,DKIM_SIGNED,
        DKIM_VALID,DKIM_VALID_AU,DKIM_VALID_EF,FREEMAIL_ENVFROM_END_DIGIT,
        FREEMAIL_FROM,RCVD_IN_DNSWL_NONE,SPF_HELO_NONE,SPF_PASS autolearn=ham
        autolearn_force=no version=3.4.6
X-Spam-Checker-Version: SpamAssassin 3.4.6 (2021-04-09) on
        lindbergh.monkeyblade.net
Precedence: bulk
List-ID: <bpf.vger.kernel.org>
X-Mailing-List: bpf@vger.kernel.org

The BPF selftests fail to compile on 32-bit architectures as the skeleton
generated by bpftool doesn=E2=80=99t take into consideration the size diffe=
rence of
variables on 32-bit/64-bit architectures.

As an example,
If a bpf program has a global variable of type: long, its skeleton will inc=
lude
a bss map that will have a field for this variable. The long variable in BP=
F is
64-bit. if we are working on a 32-bit machine, the generated skeleton has t=
o
compile for that machine where long is 32-bit.

A reproducer for this issue:
        root@56ec59aa632f:~# cat test.bpf.c
        long var;

        root@56ec59aa632f:~# clang -target bpf -g -c test.bpf.c

        root@56ec59aa632f:~# bpftool btf dump file test.bpf.o format raw
        [1] INT 'long int' size=3D8 bits_offset=3D0 nr_bits=3D64 encoding=
=3DSIGNED
        [2] VAR 'var' type_id=3D1, linkage=3Dglobal
        [3] DATASEC '.bss' size=3D0 vlen=3D1
               type_id=3D2 offset=3D0 size=3D8 (VAR 'var')

       root@56ec59aa632f:~# bpftool gen skeleton test.bpf.o > skeleton.h

       root@56ec59aa632f:~# echo "#include \"skeleton.h\"" > test.c

       root@56ec59aa632f:~# gcc test.c
       In file included from test.c:1:
       skeleton.h: In function 'test_bpf__assert':
       skeleton.h:231:2: error: static assertion failed: "unexpected
size of \'var\'"
         231 |  _Static_assert(sizeof(s->bss->var) =3D=3D 8, "unexpected
size of 'var'");
                |  ^~~~~~~~~~~~~~

One naive solution for this would be to map =E2=80=98long=E2=80=99 to =E2=
=80=98long long=E2=80=99 and
=E2=80=98unsigned long=E2=80=99 to =E2=80=98unsigned long long=E2=80=99. Bu=
t this doesn=E2=80=99t solve everything
because this problem is also seen with pointers that are 64-bit in BPF and
32-bit in 32-bit machines.

I want to work on solving this and am looking for ideas to solve it efficie=
ntly.
The main goal is to make libbbpf/bpftool host architecture agnostic.

Thanks,
Puranjay Mohan.
